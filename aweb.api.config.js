define(["jquery"],function($){return{appInterfaces:[{desp:"AWEB 核心框架",children:[{name:"Controller",desp:"AWEB核心SPA框架",belongTo:"closure",appJsCode:"app.Controller=function () {\r\n            'use strict';\r\n\r\n            var getTextURL = function (mvvmConfPath, server) {\r\n                    return \"text!./\" + (server || '') + mvvmConfPath + \"?timestamp=\" + new Date().getTime();\r\n                },\r\n                getJavascriptURL = function (mvvmConfPath, server) {\r\n                    return (server || '') + mvvmConfPath + \"?timestamp=\" + new Date().getTime();\r\n                },\r\n                validateModule = function (module) {\r\n                    var error = [],\r\n                        flows = module.flows,\r\n                        views = module.views,\r\n                        i, flow;\r\n\r\n                    if (!views) {\r\n                        error.push(\"views必需定义！\");\r\n                    }\r\n\r\n                    if (flows && flows.length) {\r\n                        for (i = -1; flow = flows[++i];) {\r\n                            if (!flow.id) {\r\n                                error.push(\"flows中位置为\" + i + \"的流程需包含关联view的id！\");\r\n                            } else {\r\n                                if (views && !views[flow.id]) {\r\n                                    error.push(\"flows中位置为\" + i + \"的流程id关联的view未在views中定义！\");\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        error.push(\"flows必需为长度大于0的数组！\");\r\n                    }\r\n\r\n                    return error;\r\n                };\r\n\r\n            var View = function (options, controller) {\r\n                    var _default = this._default,\r\n                        context = this,\r\n                        $left, $right,\r\n                        $contextMenu,\r\n                        $tabCtn,\r\n\r\n                        queryString, windowId, windowOptions;\r\n\r\n                    $.extend(true, context, _default, options);\r\n\r\n                    context.controller = controller;\r\n\r\n                    context.$ctn = $(context.ctn).addClass('hidden');\r\n                    context.$contextMenu = $contextMenu = $(context.contextMenuTemp);\r\n                    context.$ctn.prepend($contextMenu);\r\n\r\n                    context.$tabs = $(context.tabs, context.$ctn);\r\n                    context.$left = $left = $(context.leftBtnTemp);\r\n                    context.$right = $right = $(context.rightBtnTemp);\r\n\r\n                    context.$moveBtns = context.$left.add(context.$right);\r\n\r\n\r\n                    context.$tabs.wrap(context.tabCtnTemp);\r\n\r\n                    context.$tabCtn = $tabCtn = context.$tabs.parent();\r\n                    $tabCtn.prepend($left);\r\n                    $tabCtn.append($right);\r\n\r\n                    context.$ctt = $(context.ctt, context.$ctn);\r\n\r\n\r\n                    context.$tabs.on({\r\n                        'click.view': function (e) {\r\n                            var $target = $(e.target || window.event.srcElement),\r\n                                $item = $target.closest('[data-dom-id]'),\r\n                                domID = $item.attr('data-dom-id');\r\n\r\n                            if (domID) {\r\n                                if ($target.attr('data-role') === 'close') {\r\n                                    context.close(domID);\r\n                                } else {\r\n                                    context.switchView(domID);\r\n                                }\r\n\r\n                                return false;\r\n                            }\r\n\r\n                        }\r\n                    });\r\n                    if (context.contextMenuOption) {\r\n                        context.$tabs.on({\r\n                            'contextmenu.view': function (e) {\r\n                                var $li = $(e.target || event.srcElement).closest('[data-dom-id]'),\r\n                                    $tabs = $li.parent(),\r\n                                    $contextMenu = context.$contextMenu,\r\n\r\n                                    contextMenuOption = context.contextMenuOption,\r\n                                    contextMenuCallback = context.contextMenuCallback,\r\n                                    html = '',\r\n                                    lineTemp,\r\n                                    index, menuList, menu, length;\r\n\r\n                                if ($li.length) {\r\n                                    length = $tabs.children().length;\r\n                                    lineTemp = contextMenuOption.lineTemp;\r\n                                    index = $li.index();\r\n\r\n                                    if ($li.hasClass('active')) {\r\n                                        menuList = [].concat(contextMenuOption.CURRENT).reverse();\r\n                                    } else {\r\n                                        switch (index) {\r\n                                            case 0:\r\n                                                if (length === 1) {\r\n                                                    menuList = contextMenuOption.ONLY;\r\n                                                } else {\r\n                                                    menuList = contextMenuOption.FIRST;\r\n                                                }\r\n                                                break;\r\n                                            case length - 1:\r\n                                                menuList = contextMenuOption.LAST;\r\n                                                break;\r\n                                            default:\r\n                                                menuList = contextMenuOption._DEFAULT;\r\n                                        }\r\n\r\n                                        menuList = ([].concat(menuList)).reverse();\r\n                                    }\r\n\r\n\r\n                                    for (length = menuList.length;\r\n                                         (menu = contextMenuOption[menuList[--length]]);) {\r\n                                        html += lineTemp\r\n                                            .replace('_action_', menu.action)\r\n                                            .replace('_filter_', menu.filter)\r\n                                            .replace('_name_', menu.name);\r\n                                    }\r\n\r\n                                    $contextMenu\r\n                                        .empty().append(html.replace(/_index_/g, index))\r\n                                        .css(app.position(e, $(window), $contextMenu), -15, 0).removeClass('hide')\r\n                                        .off('.viewContextMenu')\r\n                                        .one({\r\n                                            'click.viewContextMenu': function (e) {\r\n                                                var $target = $(e.target || event.srcElement),\r\n                                                    action = $target.attr('data-action');\r\n\r\n                                                if (action && action !== \"undefined\") {\r\n                                                    contextMenuCallback.doAction.call(context, $li, action);\r\n                                                } else {\r\n                                                    contextMenuCallback.closeTab.call(context, $target.attr('data-filter'));\r\n                                                }\r\n\r\n                                                $contextMenu.addClass('hide');\r\n                                            },\r\n                                            'mouseleave.viewContextMenu': function () {\r\n                                                $contextMenu.addClass('hide');\r\n                                            }\r\n                                        });\r\n\r\n                                    $tabs.off('.viewContextMenu').one('mouseleave.viewContextMenu', function (e) {\r\n                                        if (!$(e.relatedTarget).closest('ul').hasClass('aweb-tab-content-menu')) {\r\n                                            $contextMenu.addClass('hide');\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                return false;\r\n                            }\r\n                        });\r\n                    }\r\n                    context.$moveBtns.on({\r\n                        'click.view': function () {\r\n                            context.focusTab(undefined, $(this));\r\n                        }\r\n                    });\r\n\r\n                    app.screen.addResizeHandler({\r\n                        uid: app.getUID(),\r\n                        isGlobal: options.isGlobal,\r\n                        timeout: 500,\r\n                        callback: function () {\r\n                            context.focusTab(context.$tabs.children('.active'));\r\n                        }\r\n                    });\r\n\r\n                    queryString = app.getQueryStringMap();\r\n\r\n                    if ((windowId = queryString[this.windowKey]) && (windowOptions = app.getData(windowId))) {\r\n                        windowOptions = JSON.parse(windowOptions);\r\n                        windowOptions.type = this.TYPE.BLANK;\r\n\r\n                        this.controller.open(windowOptions);\r\n                    }\r\n                },\r\n\r\n                Model = function (options,controller) {\r\n\r\n                    $.extend(true, this, options, {\r\n                        currentStep: -1,\r\n                        intervals: {},\r\n                        timeouts: {},\r\n                        _data: {\r\n                            scope: {}\r\n                        }\r\n                    });\r\n\r\n	                this.controller = controller;\r\n\r\n                    this.uid = this.pageId = this.cacheId = this.domID;\r\n                },\r\n\r\n                Controller = function (options) {\r\n                    var context = this,\r\n                        _default = this._default,\r\n                        eventController;\r\n\r\n                    $.extend(true, this, _default, options);\r\n\r\n                    options.view.controller = this;\r\n\r\n                    this.context = this;\r\n                    this.event=app.dispatcher();\r\n                    this.Model = this.Model || Model;\r\n                    this.tab = new (options.View || View)(options.view, this);\r\n                    this.pages = {};\r\n\r\n                };\r\n\r\n            View.prototype = {\r\n                version: 'AWOS 4.4_20171127',\r\n                constructor: View,\r\n                _default: {\r\n                    ctn: '[data-role=container]',\r\n\r\n                    tabs: '#tabs',\r\n\r\n                    ctt: '#spa-page-main',\r\n\r\n                    count: {},\r\n                    stack: [],\r\n\r\n                    contextMenuTemp: '<ul class=\"aweb-tab-content-menu hide\"></ul>',\r\n                    tabCtnTemp: '<div class=\"aweb-tabs-container\"></div>',\r\n                    tabTemp: '<li class=\"active\" data-dom-id=\"_domID_\" data-tab-id=\"_id_\" data-href=\"_href_\" title=\"_title_\"><a>_title_</a>_button_</li>',\r\n                    leftBtnTemp: '<button type=\"button\" title=\"左移标签\" class=\"btn aweb-tabs-left hidden\" data-role=\"left\"><i class=\"fa fa-chevron-left\"></i>',\r\n                    rightBtnTemp: '<button type=\"button\" title=\"右移标签\" class=\"btn aweb-tabs-right hidden\" data-role=\"right\"><i class=\"fa fa-chevron-right\"></i></button>',\r\n                    closeButtonTemp: '<button type=\"button\" data-role=\"close\" class=\"close\">&times;</button>',\r\n                    untitled: '未定义',\r\n\r\n                    cttTemp: '<div id=\"_domID_\" />',\r\n\r\n                    ctnFullClassName: 'aweb-spa-ctn-full',\r\n                    cttFullClassName: 'aweb-spa-ctt-full',\r\n\r\n                    hideNavClass: 'hide',\r\n\r\n                    pathKeyInURL: 'page',\r\n                    fullscreenKeyInURL: 'fullscreen',\r\n                    displayNavKeyInURL: 'displayNav',\r\n\r\n                    windowKey: 'windowId',\r\n\r\n                    toUpdateTitle: true\r\n                },\r\n\r\n                TYPE: {\r\n                    BLANK: 'BLANK',\r\n                    SUB: 'SUB',\r\n                    SELF: 'SELF',\r\n                    WINDOW: 'WINDOW',\r\n                    POPOVER: 'POPOVER'\r\n                },\r\n                popOption: {\r\n                    popSwitch: false\r\n                },\r\n\r\n                open: function (options) {\r\n                    var TYPE = this.TYPE,\r\n\r\n                        ret = false,\r\n                        title = options.title || this.untitled,\r\n                        id = options.id,\r\n                        fixed = options.fixed,\r\n                        domID,\r\n                        href = $.camelCase(options.sections.join('-')),\r\n\r\n                        handler,\r\n\r\n                        $tabs = this.$tabs.children(),\r\n                        $tab, $renderTo;\r\n\r\n\r\n                    if (!this.stack.length && options.type === TYPE.SELF) {\r\n                        options.type = TYPE.BLANK;\r\n                    }\r\n\r\n\r\n                    if (!options.type || options.type === TYPE.BLANK) {\r\n                        $tab = id ? $tabs.filter('[data-tab-id=\"' + id + '\"][data-href=\"' + href + '\"]') : $tabs.filter('[data-href=\"' + href + '\"]');\r\n\r\n                        if ($tab.length) {\r\n                            domID = $tab.attr('data-dom-id');\r\n\r\n                            this.switchView(domID, !$tab.length);\r\n                        } else {\r\n                            if (this.stack.length > 1 && (handler = this.controller.getCacheHandler(this.stack[this.stack.length - 1])) && (handler.type === TYPE.SUB || handler.type === TYPE.POPOVER)) {\r\n\r\n                                switch (handler.type) {\r\n                                    case TYPE.SUB:\r\n                                        app.alert('系统错误 0x01：子页面下不能打开新页面！', app.alert.ERROR, '0x01');\r\n                                        break;\r\n                                    case TYPE.POPOVER:\r\n                                        app.alert('系统错误 0x01：气泡页面下不能打开新页面！', app.alert.ERROR, '0x01');\r\n                                        break;\r\n                                }\r\n                            } else {\r\n                                domID = this.getUID(id || href);\r\n\r\n                                this.$tabs.append(this.tabTemp.replace(/_domID_/, domID).replace(/_id_/, id).replace(/_href_/, href)\r\n                                    .replace(/_title_/g, title)\r\n                                    .replace(/_button_/, fixed ? '':this.closeButtonTemp)\r\n                                );\r\n\r\n                                $renderTo = $(this.cttTemp.replace(/_domID_/, domID));\r\n                                this.$ctt.append($renderTo);\r\n\r\n                                ret = {\r\n                                    domID: domID,\r\n                                    $renderTo: $renderTo,\r\n                                    type: TYPE.BLANK\r\n                                };\r\n                            }\r\n                        }\r\n                    } else {\r\n                        switch (options.type) {\r\n                            case TYPE.SELF:\r\n                                //暂时阻止气泡页面下自身打开页面\r\n                                if (this.stack.length > 1 && (handler = this.controller.getCacheHandler(this.stack[this.stack.length - 1])) && (handler.type === TYPE.POPOVER)) {\r\n                                    app.alert('系统错误 0x01：气泡页面下不能打开自身页面！', app.alert.ERROR, '0x01');\r\n                                } else {\r\n                                    handler = this.controller.getCurrentHandler();\r\n\r\n                                    this.controller.unload(handler.domID, true);\r\n\r\n                                    domID = this.getUID(id || href);\r\n\r\n                                    $renderTo = handler.$renderTo = this.updateTitleAndID(handler.type, handler.domID, domID, title, id, href, handler.$renderTo);\r\n\r\n                                    ret = {\r\n                                        $renderTo: handler.$renderTo,\r\n                                        domID: domID,\r\n                                        type: handler.type\r\n                                    };\r\n                                }\r\n\r\n\r\n                                break;\r\n                            case TYPE.SUB:\r\n\r\n                                if (this.stack.length > 1 && (handler = this.controller.getCacheHandler(this.stack[this.stack.length - 1])) && (handler.type === TYPE.POPOVER)) {\r\n                                    app.alert('系统错误 0x01：气泡页面下不能打开子页面！', app.alert.ERROR, '0x01');\r\n                                } else {\r\n                                    domID = this.getUID(id || href);\r\n\r\n                                    $renderTo = $(this.cttTemp.replace(/_domID_/, domID));\r\n\r\n                                    ret = {\r\n                                        $renderTo: $renderTo,\r\n                                        domID: domID,\r\n                                        type: TYPE.SUB\r\n                                    };\r\n\r\n                                    app.modal({\r\n                                        title: title,\r\n                                        content: '',\r\n                                        btnConfirm: options.btnConfirm || '关闭',\r\n                                        btnCancel: options.btnCancel || '取消',\r\n                                        init: function (controller) {\r\n                                            var $body = $(this),\r\n                                                $close = $('<button title=\"关闭子页面\" type=\"button\" class=\"close alert-close\">&times;</button>');\r\n\r\n                                            $body.prev().prepend($close);\r\n                                            $body.append($renderTo);\r\n\r\n                                            $close.one('click', function () {\r\n                                                controller.unload();\r\n\r\n                                                $(this).closest('.modal').modal('hide');\r\n\r\n                                                controller.tab.resumeView();\r\n                                            });\r\n                                        },\r\n                                        confirmHandler: function (controller) {\r\n                                            controller.unload();\r\n\r\n                                            $(this).closest('.modal').modal('hide');\r\n\r\n                                            controller.tab.resumeView();\r\n                                        },\r\n                                        cancelHandler: function (controller) {\r\n                                            controller.unload();\r\n\r\n                                            $(this).closest('.modal').modal('hide');\r\n\r\n                                            controller.tab.resumeView();\r\n\r\n                                        },\r\n                                        width: options.width,\r\n                                        height: options.height,\r\n                                        args: [this.controller],\r\n                                        isLargeModal: true,\r\n                                        isDialog: true,\r\n                                        backdrop: 'static',\r\n                                        noFooter: !options.hasFooter,\r\n                                        noHeader: !options.title\r\n                                    });\r\n                                }\r\n\r\n                                break;\r\n                            case TYPE.POPOVER:\r\n\r\n                                if (this.stack.length > 1 && (handler = this.controller.getCacheHandler(this.stack[this.stack.length - 1])) && (handler.type === TYPE.POPOVER)) {\r\n                                    app.alert('系统错误 0x01：气泡页面下不能打开新气泡页面！', app.alert.ERROR, '0x01');\r\n\r\n                                } else {\r\n                                    domID = this.getUID(id || href);\r\n\r\n                                    $renderTo = $(this.cttTemp.replace(/_domID_/, domID));\r\n\r\n                                    ret = {\r\n                                        $renderTo: $renderTo,\r\n                                        domID: domID,\r\n                                        type: TYPE.POPOVER\r\n                                    };\r\n\r\n\r\n                                  /*  //需要阻止第二次点击的时候仍然进行 popover 动作\r\n                                    if (this.popOption.popSwitch) {\r\n                                        this.popOption.popSwitch = !this.popOption.popSwitch;\r\n\r\n                                    } else {*/\r\n                                        app.popover({\r\n                                            $elem: options.$elem,\r\n                                            title: title,\r\n                                            content: '',\r\n                                            placement: 'auto left',\r\n                                            init: function (popIns, controller) {\r\n                                                var $body = $(this).find('.aweb-popover-content');\r\n\r\n                                                $body.append($renderTo);\r\n\r\n\r\n                                            },\r\n                                            confirmHandler: function (popIns, controller, popOption) {\r\n\r\n                                                if (!popIns.popInstance.inState.click) {\r\n                                                    popOption.popSwitch = !popOption.popSwitch;\r\n                                                }\r\n                                                controller.unload();\r\n                                                controller.tab.resumeView();\r\n                                            },\r\n\r\n                                            width: options.width,\r\n                                            height: options.height,\r\n                                            args: [this.controller, this.popOption]\r\n                                        });\r\n                                  /*  }*/\r\n                                }\r\n\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    if (typeof options.fullscreen === 'boolean') {\r\n                        this.fullscreen(options.fullscreen);\r\n                    }\r\n\r\n                    if (typeof options.displayNav === 'boolean') {\r\n                        this.displayNav(options.displayNav);\r\n                    }\r\n\r\n                    return ret;\r\n                },\r\n                openWindow: function (options) {\r\n	                var optionStr = JSON.stringify(options || {}),\r\n		                windowId = app.getUID(),\r\n		                location = window.location || document.location,\r\n		                url = (location.origin || '') + location.pathname,\r\n		                a = document.createElement(\"a\");\r\n\r\n	                app.setData(windowId, optionStr);\r\n\r\n	                window.open(url + '?' + app.getNewQueryStringURL({\r\n		                windowId: windowId\r\n	                }));\r\n                },\r\n                close: function (domID, _doNotResume) {\r\n                    var handler,\r\n                        controller = this.controller,\r\n                        currentViewID = this.getCurrentView();\r\n\r\n                    handler = controller.getCacheHandler(domID) || controller.getCurrentHandler();\r\n                    domID = domID || currentViewID;\r\n\r\n                    if (handler) {\r\n                        if (handler.type === this.TYPE.SUB) {\r\n                            controller.unload(domID, true);\r\n\r\n                            handler.$renderTo.closest('.modal').modal('hide');\r\n                        } else {\r\n                            controller.unload(domID);\r\n\r\n                            this.$tabs.children('[data-dom-id=\"' + domID + '\"]').remove();\r\n                            this.$ctt.children('#' + domID).remove();\r\n                        }\r\n\r\n                        if (!_doNotResume && domID === currentViewID) {\r\n                            this.resumeView();\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n\r\n                getUID: function (domID) {\r\n\r\n                    if (this.count[domID]) {\r\n                        domID += (++this.count[domID]);\r\n                    } else {\r\n                        this.count[domID] = 1;\r\n                    }\r\n                    return domID;\r\n                },\r\n                updateTitleAndID: function (type, oldID, newID, title, id, href, $renderTo) {\r\n                    var TYPE = this.TYPE;\r\n\r\n                    title = title || this.untitled;\r\n\r\n                    switch (type) {\r\n                        case TYPE.SUB:\r\n                            $renderTo.closest('.modal').children('.modal-header').children(':not(button)').text(title);\r\n                            break;\r\n                        case TYPE.POPOVER:\r\n                            $renderTo.closest('.aweb-popover').children('.aweb-popover-header').children('.aweb-popover-title').text(title);\r\n                            break;\r\n                        default:\r\n                            this.$tabs\r\n                                .children('[data-dom-id=\"' + oldID + '\"]')\r\n                                .attr({\r\n                                    title: title,\r\n                                    'data-dom-id': newID,\r\n                                    'data-tab-id': id,\r\n                                    'data-href': href\r\n                                })\r\n                                .children('a').text(title);\r\n                            break;\r\n                    }\r\n\r\n                    return $renderTo.attr('id', newID);\r\n                },\r\n                setTitle: function (uid, newTitle) {\r\n                    var TYPE = this.TYPE,\r\n                        model = this.controller.getCacheHandler(uid),\r\n                        $view;\r\n\r\n                    if (model && ($view = model.$renderTo)) {\r\n                        newTitle = newTitle || this.untitled;\r\n\r\n                        switch (model.type) {\r\n                            case TYPE.SUB:\r\n                                $view.closest('.modal').children('.modal-header').children(':not(button)').text(newTitle);\r\n                                break;\r\n                            default:\r\n                                this.$tabs\r\n                                    .children('[data-dom-id=\"' + uid + '\"]')\r\n                                    .attr({\r\n                                        title: newTitle\r\n                                    })\r\n                                    .children('a').text(newTitle);\r\n                                break;\r\n                        }\r\n                    }\r\n                },\r\n\r\n                setCurrentView: function (domID) {\r\n                    if (domID) {\r\n                        var stack = [],\r\n                            _stack = this.stack,\r\n                            i, id;\r\n\r\n                        for (i = _stack.length; id = _stack[--i];) {\r\n                            if (domID !== id) {\r\n                                stack.push(id);\r\n                            }\r\n                        }\r\n                        this.stack = stack.reverse();\r\n                        this.stack.push(domID);\r\n\r\n                        this.$ctn.removeClass('hidden');\r\n                    }\r\n                },\r\n                getCurrentView: function () {\r\n                    //字符串化\r\n	                return this.stack[this.stack.length - 1] + '';\r\n                },\r\n                removeView: function (domID) {\r\n                    if (domID) {\r\n                        var stack = [],\r\n                            _stack = this.stack,\r\n                            i, id;\r\n\r\n                        for (i = _stack.length; id = _stack[--i];) {\r\n                            if (domID !== id) {\r\n                                stack.push(id);\r\n                            }\r\n                        }\r\n                        this.stack = stack.reverse();\r\n\r\n                        if (!stack.length) {\r\n                            this.$ctn.addClass('hidden');\r\n                            this.fullscreen(false);\r\n                            this.displayNav(true);\r\n                        }\r\n                    }\r\n                },\r\n\r\n\r\n                switchView: function (domID, isLoad) {\r\n                    var\r\n\r\n                        lastDomID = this.getCurrentView(),\r\n                        $tab, $ctt, $page,\r\n                        model;\r\n\r\n                    if (isLoad || lastDomID !== domID) {\r\n\r\n\r\n                        model = this.controller.getCacheHandler(domID);\r\n\r\n                        if (model) {\r\n                            this.controller.pause();\r\n\r\n                            if ((model.type !== this.TYPE.SUB) && (model.type !== this.TYPE.POPOVER)) {\r\n                                $tab = this.$tabs.children()\r\n                                    .removeClass('active')\r\n                                    .filter('[data-dom-id=\"' + domID + '\"]').addClass('active');\r\n\r\n                                $ctt = this.$ctt;\r\n\r\n                                $page = $ctt.children('#' + lastDomID);\r\n                                $page.attr('data-scroll-top', $page.parent().scrollTop()).addClass('hide');\r\n\r\n\r\n                                $page = $ctt.children('#' + domID);\r\n                                $page.removeClass('hide');\r\n                                $page.parent().scrollTop($page.attr('data-scroll-top') || 0);\r\n                            } else {\r\n                                $ctt = this.$ctt;\r\n                                $page = $ctt.children('#' + lastDomID);\r\n                                $page.attr('data-scroll-top', $page.parent().scrollTop());\r\n\r\n                                $page = model.$renderTo;\r\n                                $page.removeClass('hide');\r\n                            }\r\n\r\n\r\n                            !isLoad && this.controller.resume(domID);\r\n\r\n                            this.setCurrentView(domID);\r\n\r\n                            this.focusTab($tab);\r\n                        }\r\n\r\n\r\n                    }\r\n                },\r\n                resumeView: function () {\r\n                    var TYPE = this.TYPE,\r\n                        lastDomID = this.getCurrentView(),\r\n                        handler = this.controller.getCurrentHandler(),\r\n                        domID,\r\n                        $tab, $ctt, $page, model;\r\n\r\n                    if (handler) {\r\n                        domID = handler.domID;\r\n                        model = this.controller.getCacheHandler(domID);\r\n\r\n                        if ((model.type !== this.TYPE.SUB) && (model.type !== this.TYPE.POPOVER)) {\r\n                            $tab = this.$tabs.children()\r\n                                .removeClass('active')\r\n                                .filter('[data-dom-id=\"' + domID + '\"]').addClass('active');\r\n\r\n                            $ctt = this.$ctt;\r\n\r\n\r\n                            $page = $ctt.children('#' + lastDomID);\r\n                            $page.attr('data-scroll-top', $page.parent().scrollTop()).addClass('hide');\r\n\r\n                            $page = $ctt.children('#' + domID);\r\n                            $page.removeClass('hide');\r\n                            $page.parent().scrollTop($page.attr('data-scroll-top') || 0);\r\n                        }\r\n                        this.controller.resume(domID);\r\n\r\n                        this.focusTab($tab);\r\n                    }\r\n                },\r\n                focusTab: (function () {\r\n                    var _focusTab = function ($tab, $btn) {\r\n                            var widths = 0,\r\n                                totalWidths = 0,\r\n\r\n                                $tabCtn = this.$tabCtn,\r\n                                $tabs = this.$tabs,\r\n                                $lis = $tabs.children($tab ? ':lt(' + ($tab.index() + 1) + ')' : undefined),\r\n                                $tabBtn = $btn || this.$left,\r\n                                marginLeft,\r\n\r\n                                tabsContainerWidth = $tabCtn.innerWidth() - $tabBtn.outerWidth() * 4.2,\r\n                                tabsOffsetLeft = parseInt($tabs.css('left'), 10);\r\n\r\n\r\n                            $lis.each(function (index, elem) {\r\n                                widths += $(elem).outerWidth();\r\n                            });\r\n\r\n                            if (!$tab) {\r\n                                totalWidths = widths;\r\n                            } else {\r\n                                $tabs.children().each(function (index, elem) {\r\n                                    totalWidths += $(elem).outerWidth();\r\n                                });\r\n                            }\r\n\r\n                            this.$moveBtns[totalWidths < tabsContainerWidth ? 'addClass' : 'removeClass']('hidden');\r\n\r\n\r\n                            if ($btn) {\r\n                                if ($btn.attr('data-role') === 'left') {\r\n                                    tabsOffsetLeft += tabsContainerWidth;\r\n                                } else {\r\n                                    tabsOffsetLeft -= tabsContainerWidth;\r\n                                }\r\n                            } else {\r\n                                tabsOffsetLeft = tabsContainerWidth - widths;\r\n                            }\r\n\r\n                            if (tabsContainerWidth - widths > tabsOffsetLeft) {\r\n\r\n                                tabsOffsetLeft = tabsContainerWidth - widths;\r\n                            } else if (tabsOffsetLeft > 0) {\r\n                                marginLeft = totalWidths < tabsContainerWidth ? 0 : $tabBtn.outerWidth();\r\n\r\n                                tabsOffsetLeft = tabsOffsetLeft > marginLeft ? marginLeft : tabsOffsetLeft;\r\n                            }\r\n\r\n                            $tabs.animate({\r\n                                'left': tabsOffsetLeft + 'px'\r\n                            }, 500);\r\n                        },\r\n                        focusTabHandler = null;\r\n\r\n                    return function ($tab, $btn) {\r\n                        var context = this;\r\n                        if (focusTabHandler) {\r\n                            clearTimeout(focusTabHandler);\r\n                            focusTabHandler = null;\r\n                        }\r\n\r\n                        focusTabHandler = setTimeout(function () {\r\n                            _focusTab.call(context, $tab, $btn);\r\n                        }, 200);\r\n                    }\r\n                }()),\r\n\r\n                fullscreen: function (fullscreen) {\r\n                    this.$ctn[fullscreen ? 'addClass' : 'removeClass'](this.ctnFullClassName);\r\n\r\n                    app.shelter[fullscreen ? 'upperZIndex' : 'lowerZIndex']();\r\n\r\n                    this.focusTab();\r\n                },\r\n                isFullScreen: function () {\r\n                    return this.$ctn.hasClass(this.ctnFullClassName);\r\n                },\r\n                displayNav: function (show) {\r\n                    this.$tabCtn[show ? 'removeClass' : 'addClass'](this.hideNavClass);\r\n                    this.$ctt[show ? 'removeClass' : 'addClass'](this.cttFullClassName);\r\n\r\n                    this.focusTab();\r\n                },\r\n                isDisplayNav: function () {\r\n                    return !this.$tabCtn.hasClass(this.hideNavClass);\r\n                }\r\n            };\r\n\r\n            Model.prototype = {\r\n                version: 'AWOS 4.4_20171127',\r\n                constructor: Model,\r\n\r\n                load: function () {\r\n                    return this.stepTo(0);\r\n                },\r\n                pause: function () {\r\n                    var data = this._data;\r\n\r\n                    try {\r\n                        if (data && data.bootstrap && data.bootstrap.pause) {\r\n\r\n	                        this.controller.trigger(this.controller.STATUS.BEFORE_PAUSE,this);\r\n\r\n                            data.bootstrap.pause.call(this, data.$el, data.scope, this);\r\n\r\n	                        this.controller.trigger(this.controller.STATUS.AFTER_PAUSE,this);\r\n                        }\r\n                    } catch (e) {\r\n                        if (window.aweb.error) {\r\n                            app.alert(e.message, app.alert.ERROR);\r\n                        }\r\n                        if (window.aweb.log) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n\r\n                    this.stopAsyncEvent();\r\n\r\n                    return this;\r\n                },\r\n                resume: function () {\r\n                    var data = this._data;\r\n\r\n                    try {\r\n                        if (data && data.bootstrap && data.bootstrap.resume) {\r\n	                        this.controller.trigger(this.controller.STATUS.BEFORE_RESUME,this);\r\n\r\n                            data.bootstrap.resume.call(this, data.$el, data.scope, this);\r\n\r\n	                        this.controller.trigger(this.controller.STATUS.AFTER_RESUME,this);\r\n                        }\r\n                    } catch (e) {\r\n\r\n                        if (window.aweb.error) {\r\n                            app.alert(e.message, app.alert.ERROR);\r\n                        }\r\n                        if (window.aweb.log) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n\r\n                    this.startAsyncEvent();\r\n\r\n                    return this;\r\n                },\r\n                unload: function (keepDom) {\r\n                    if (this.currentStep !== -1) {\r\n                        var data = this._data;\r\n\r\n                        try {\r\n                            if (data && data.bootstrap && data.bootstrap.unload) {\r\n	                            this.controller.trigger(this.controller.STATUS.BEFORE_UNLOAD,this);\r\n\r\n                                data.bootstrap.unload.call(this, data.$el, data.scope, this);\r\n\r\n	                            this.controller.trigger(this.controller.STATUS.AFTER_UNLOAD,this);\r\n                            }\r\n                        } catch (e) {\r\n                            if (window.aweb.error) {\r\n                                app.alert(e.message, app.alert.ERROR);\r\n                            }\r\n                            if (window.aweb.log) {\r\n                                console.error(e);\r\n                            }\r\n                        } finally {\r\n                            this.undelegateEvents();\r\n                            this.stopAsyncEvent(true);\r\n\r\n                            if (!keepDom) {\r\n                                data.$el.remove();\r\n                                delete this._data.$el;\r\n\r\n                                if (window.$AW) {\r\n                                    delete window.$AW._css[this.domID];\r\n                                }\r\n                            } else {\r\n                                data.$el.empty();\r\n                            }\r\n\r\n                            delete this.timeouts;\r\n                            delete this.intervals;\r\n\r\n\r\n                            this.timeouts = {};\r\n                            this.intervals = {};\r\n                        }\r\n                    }\r\n\r\n                    return this;\r\n                },\r\n\r\n                stepTo: function (step) {\r\n                    var\r\n                        handler = this,\r\n                        cache = handler._data && handler._data.scope,\r\n                        module = handler.conf,\r\n                        modulePath = handler.path,\r\n                        oFlow = module.flows[step],\r\n                        oView = module.views[oFlow.id],\r\n	                    dtd = $.Deferred();\r\n\r\n                    //防止刷新时，pageParams不一致\r\n                    if (cache && !$.isEmptyObject(cache)) {\r\n                        app.domain.exports('page', cache);\r\n                    }\r\n\r\n                    this.unload(true);\r\n\r\n                    require([getTextURL(modulePath + oView.template, handler.server), getJavascriptURL(modulePath + oView.js, handler.server)],\r\n                        function (template, bootstrap) {\r\n                            var data = handler._data,\r\n                                $div = $('<div/>'),\r\n                                $el;\r\n\r\n\r\n                            handler.$renderTo.empty().append($div);\r\n                            template && $div.append(template);\r\n                            $el = data.$el = handler.$renderTo;\r\n\r\n                            data.bootstrap = bootstrap;\r\n\r\n                            try {\r\n                                if (data && data.bootstrap && data.bootstrap.load) {\r\n                                    bootstrap.load.call(handler, $el, data.scope, handler);\r\n                                }\r\n\r\n                                handler.currentStep = step;\r\n\r\n                                handler.controller.trigger(handler.controller.STATUS.AFTER_LOAD,handler);\r\n\r\n                                if (window.aweb.log) {\r\n                                    console.log(new Date().toTimeString() + '：加载' + handler.path + '完毕，唯一ID（domID）：' + handler.domID + '，页面ID（id）：' + handler.id + '，当前步数（currentStep）：' + step + '');\r\n                                }\r\n                            } catch (e) {\r\n                                if (window.aweb.error) {\r\n                                    app.alert(e.message, app.alert.ERROR);\r\n                                }\r\n                                if (window.aweb.log) {\r\n                                    console.error(e);\r\n                                }\r\n                            }finally {\r\n	                            dtd.resolve();\r\n                            }\r\n                        });\r\n\r\n	                return dtd.promise();\r\n                },\r\n\r\n                setTimeout: function (option) {\r\n                    var handler = this;\r\n\r\n                    if (option.immediate) {\r\n                        option.callback ? option.callback() : option.func();\r\n                    }\r\n\r\n                    option.clock = option.clock || 0;\r\n                    option.uniqueId = option.uniqueId || app.getUID();\r\n                    option.windowId = window.setTimeout(function () {\r\n                        option.callback ? option.callback() : option.func();\r\n\r\n                        handler.removeAsyncEvent(handler.timeouts, option.uniqueId);\r\n                    }, option.clock);\r\n\r\n                    handler.timeouts[option.uniqueId] = option;\r\n\r\n                    return option.uniqueId;\r\n                },\r\n                clearTimeout: function (uniqueId) {\r\n                    var e = this.timeouts[uniqueId];\r\n\r\n                    if (e) {\r\n                        window.clearTimeout(e.windowId);\r\n                        this.removeAsyncEvent(this.timeouts, e.uniqueId);\r\n                    }\r\n                },\r\n                setInterval: function (option) {\r\n                    var handler = this;\r\n\r\n                    if (option.immediate) {\r\n                        option.callback ? option.callback() : option.func();\r\n                    }\r\n\r\n                    option.clock = option.clock || 0;\r\n                    option.uniqueId = option.uniqueId || app.getUID();\r\n                    option.windowId = window.setInterval(option.times ? function () {\r\n                        if (option.times) {\r\n                            option.times--;\r\n                            option.callback ? option.callback() : option.func();\r\n                        } else {\r\n                            handler.removeAsyncEvent(handler.timeouts, option.uniqueId);\r\n                        }\r\n                    } : (option.callback || option.func), option.clock);\r\n\r\n                    handler.intervals[option.uniqueId] = option;\r\n\r\n                    return option.uniqueId;\r\n                },\r\n                clearInterval: function (uniqueId) {\r\n                    var e = this.intervals[uniqueId];\r\n\r\n                    if (e) {\r\n                        window.clearInterval(e.windowId);\r\n                        this.removeAsyncEvent(this.intervals, e.uniqueId);\r\n                    }\r\n                },\r\n                updateInterval: function (uniqueId, option) {\r\n                    var handler = this,\r\n                        e = handler.intervals[uniqueId];\r\n\r\n                    if (e) {\r\n                        this.clearInterval(e.uniqueId);\r\n\r\n                        return this.setInterval($.extend(true, e, option));\r\n                    }\r\n                },\r\n                startAsyncEvent: function () {\r\n                    var i, map, item,\r\n                        handler = this;\r\n\r\n                    map = this.intervals;\r\n                    for (i in map) {\r\n                        if ((item = map[i]) && item.isPause) {\r\n\r\n                            item.windowId = window.setInterval(item.times ? (function (item, handler) {\r\n                                return function () {\r\n                                    if (item.times) {\r\n                                        item.times--;\r\n                                        item.callback ? item.callback() : item.func();\r\n                                    } else {\r\n                                        handler.removeAsyncEvent(handler.timeouts, item.uniqueId);\r\n                                    }\r\n                                };\r\n                            }(item, handler)) : (item.callback || item.func), item.clock);\r\n                        }\r\n                    }\r\n\r\n                    map = this.timeouts;\r\n                    for (i in map) {\r\n                        if ((item = map[i]) && item.isPause) {\r\n                            item.windowId = window.setTimeout((function (item, handler) {\r\n                                return function () {\r\n                                    item.callback ? item.callback() : item.func();\r\n\r\n                                    handler.removeAsyncEvent(handler.timeouts, item.uniqueId);\r\n                                }\r\n                            }(item, handler)), item.clock);\r\n                        }\r\n                    }\r\n\r\n                    i = null, item = null, map = null;\r\n                },\r\n                stopAsyncEvent: function (isUnload) {\r\n                    var i, map, item;\r\n\r\n                    map = this.intervals;\r\n                    for (i in map) {\r\n                        if ((item = map[i]) && (isUnload || item.isPause)) {\r\n                            window.clearInterval(map[i].windowId);\r\n                        }\r\n                    }\r\n\r\n                    map = this.timeouts;\r\n                    for (i in map) {\r\n                        if ((item = map[i]) && (isUnload || item.isPause)) {\r\n                            window.clearTimeout(map[i].windowId);\r\n                        }\r\n                    }\r\n                },\r\n                removeAsyncEvent: function (arr, uniqueId) {\r\n                    if (arr[uniqueId]) {\r\n                        arr[uniqueId] = null;\r\n                        delete arr[uniqueId];\r\n                    }\r\n                },\r\n\r\n\r\n                delegateEvents: function (events) {\r\n                    var context = this,\r\n                        $el = context._data.$el || context.$renderTo,\r\n                        method, match, eventName, selector, $selector, key, touchName,\r\n                        map = {},\r\n                        intercept,\r\n                        $ = jQuery;\r\n\r\n                    this.undelegateEvents();\r\n                    for (key in events) {\r\n                        if (events.hasOwnProperty(key)) {\r\n                            method = events[key];\r\n\r\n                            if (!this.isFunction(method)) method = this[events[key]];\r\n\r\n                            if (!method) continue;\r\n\r\n                            match = key.match(this.delegateEventSplitter);\r\n\r\n                            eventName = match[1];\r\n                            selector = match[2];\r\n\r\n                            eventName += '.previewEvents';\r\n                            if (selector === '') {\r\n                                $el.on(eventName, method);\r\n                            } else {\r\n                                $selector = $(selector, $el);\r\n\r\n\r\n                                if ($selector.length) {\r\n                                    // (touchName = eventName.split(\".\")[0]) && touchType[touchName] && $selector.addClass(\"waves-effect\");\r\n                                    $selector\r\n                                        .on(eventName, method)\r\n                                        .attr('data-aweb-event', true);\r\n                                }\r\n\r\n                                if (!map[eventName]) {\r\n                                    map[eventName] = {};\r\n                                    $el.on(eventName, {\r\n                                        eventName: eventName\r\n                                    }, function (e) {\r\n                                        var $e = $(e.target || window.event.srcElement),\r\n                                            $selector,\r\n                                            selector, items = map[e.data.eventName];\r\n\r\n                                        for (selector in items) {\r\n                                            if (items.hasOwnProperty(selector)) {\r\n                                                $selector = $e.closest($(selector, $el));\r\n\r\n                                                if ($selector.attr('data-aweb-event')) {\r\n                                                    break;\r\n                                                } else if ($selector.length) {\r\n                                                    return items[selector].apply($e[0], arguments);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                map[eventName][selector] = method;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                    if (window.aweb && window.aweb.headless && window.aweb.headless.on) {\r\n                        intercept = function (e) {\r\n                            var $target = $(e.target || event.srcElement);\r\n\r\n                            console.log(new Date().toString() + ':' + context.path + '触发了' + e.type + '，元素是:' + $target);\r\n                        };\r\n                        $el.on({\r\n                            'click.debug': intercept,\r\n                            'focus.debug': intercept,\r\n                            'keydown.debug': intercept\r\n                        });\r\n                    }\r\n                },\r\n                undelegateEvents: function () {\r\n                    this._data.$el && this._data.$el.off();\r\n                },\r\n                isFunction: function (obj) {\r\n                    return ((typeof obj === 'function') || false);\r\n                },\r\n                delegateEventSplitter: /^(\\S+)\\s*(.*)$/,\r\n\r\n                getController: function () {\r\n                    return this.controller;\r\n                }\r\n            };\r\n\r\n            Controller.prototype = {\r\n                version: 'AWOS 4.4_20171127',\r\n                constructor: Controller,\r\n                _default: {\r\n                    conf: {},\r\n                    cache: {},\r\n                    modulesPath: \"module\",\r\n                    separator: \"/\",\r\n                    mvvmConfName: \"mvvm.json\",\r\n                    modulePath404: \"module/error/404/\"\r\n                },\r\n\r\n	            STATUS: {\r\n		            AFTER_LOAD: 'afterLoad',\r\n		            BEFORE_PAUSE: 'beforePause',\r\n		            AFTER_PAUSE: 'afterPause',\r\n		            BEFORE_RESUME: 'beforeResume',\r\n		            AFTER_RESUME: 'afterResume',\r\n		            BEFORE_UNLOAD: 'beforeUnload',\r\n		            AFTER_UNLOAD: 'afterUnload'\r\n	            },\r\n\r\n                getDefaultModulesPath: function () {\r\n                    return this.modulesPath;\r\n                },\r\n                getDefaultMVVMConfName: function () {\r\n                    return this.mvvmConfName;\r\n                },\r\n                getDefaultSeparator: function () {\r\n                    return this.separator;\r\n                },\r\n                getCurrentHandler: function () {\r\n                    return this.cache[this.tab.getCurrentView()];\r\n                },\r\n\r\n                getMVVM404: function () {\r\n                    return {\r\n                        path: this.modulePath404,\r\n                        conf: this.conf[this.modulePath404]\r\n                    };\r\n                },\r\n\r\n                getCacheHandler: function (domID) {\r\n                    return this.cache[domID];\r\n                },\r\n                addCacheHandler: function (handler) {\r\n                    this.cache[handler.domID] = handler;\r\n                },\r\n                removeCacheHandler: function (domID) {\r\n                    if (this.cache[domID]) {\r\n                        delete this.cache[domID];\r\n\r\n                        this.tab.removeView(domID);\r\n                    }\r\n                },\r\n\r\n                load: function (options) {\r\n                    var modulePath = this.getDefaultModulesPath() + this.getDefaultSeparator(),\r\n                        $renderTo,\r\n                        id, domID,\r\n                        result, type,\r\n                        handler,\r\n                        context = this,\r\n                        sections = [];\r\n\r\n                    if (options.sections instanceof Array) {\r\n                        sections = sections.concat(options.sections);\r\n                    }\r\n\r\n                    if (sections.length) {\r\n                        modulePath += (sections.join(this.getDefaultSeparator()) + this.getDefaultSeparator());\r\n                        id = options.id;\r\n\r\n                        if (options.type !== View.prototype.TYPE.WINDOW) {\r\n                            app.shelter.show('正在加载页面，请稍候…');\r\n                            require([getTextURL(modulePath + this.getDefaultMVVMConfName(), options.server)], function (mvvmConf) {\r\n                                try {\r\n                                    var error;\r\n\r\n                                    if (!mvvmConf) {\r\n                                        app.alert('系统错误 0x05：获取页面失败！', app.alert.ERROR, '0x05');\r\n                                    } else {\r\n                                        mvvmConf = JSON.parse(mvvmConf);\r\n\r\n                                        if ((error = validateModule(mvvmConf)).length) {\r\n                                            app.alert(error, app.alert.ERROR);\r\n                                        } else {\r\n                                            if (result = context.tab.open(options)) {\r\n\r\n                                                domID = result.domID;\r\n                                                $renderTo = result.$renderTo;\r\n                                                type = result.type;\r\n                                                context.pages[domID]= options;\r\n                                                try {\r\n                                                    handler = new context.Model({\r\n                                                        conf: mvvmConf,\r\n                                                        path: modulePath,\r\n                                                        $renderTo: $renderTo,\r\n                                                        id: id,\r\n                                                        domID: domID,\r\n                                                        controller: context,\r\n                                                        type: type,\r\n                                                        server: options.server,\r\n                                                        option:options\r\n                                                    },context);\r\n                                                } catch (e) {\r\n                                                    error = context.getMVVM404();\r\n\r\n                                                    handler = new context.Model({\r\n                                                        conf: error.conf,\r\n                                                        path: error.path,\r\n                                                        $renderTo: $renderTo,\r\n                                                        id: id,\r\n                                                        domID: domID,\r\n                                                        controller: context,\r\n                                                        type: type,\r\n                                                        errorMsg: e.message,\r\n                                                        server: options.server,\r\n                                                        option:options\r\n                                                    },context);\r\n                                                } finally {\r\n                                                    context.addCacheHandler(handler);\r\n\r\n                                                    //如果是SELF的时候，handler指的是上一次的type，而不是这一次的type\r\n                                                    if (options.type === context.tab.TYPE.SELF) {\r\n                                                        context.tab.setCurrentView(handler.domID);\r\n                                                    } else {\r\n                                                        context.tab.switchView(handler.domID, true);\r\n                                                    }\r\n\r\n	                                                $.when(handler.load()).done(function(){\r\n		                                                app.shelter.hide();\r\n                                                    });\r\n                                                }\r\n                                            } else {\r\n                                                app.shelter.hide();\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                } catch (e) {\r\n                                    if (window.aweb.log) {\r\n                                        console.error(e);\r\n                                    }\r\n\r\n                                    if (window.aweb.error) {\r\n                                        app.alert('系统错误 0x04：内容运行报错，详情见控制台！', app.alert.ERROR, '0x04');\r\n                                    }\r\n\r\n                                    app.shelter.hide();\r\n                                }\r\n                            });\r\n                        } else {\r\n                            this.tab.openWindow(options);\r\n                        }\r\n\r\n                    } else {\r\n                        if (window.aweb.error) {\r\n                            app.alert('系统错误 0x01：页面路径为空！', app.alert.ERROR, '0x01');\r\n                        }\r\n\r\n                    }\r\n                },\r\n                pause: function () {\r\n                    var handler = this.getCurrentHandler();\r\n\r\n                    if (handler) {\r\n                        handler.pause();\r\n                    }\r\n                },\r\n                resume: function (domID) {\r\n\r\n                    if (!domID) {\r\n                        debugger;\r\n                    }\r\n                    var\r\n                        handler = this.getCacheHandler(domID);\r\n\r\n                    if (handler) {\r\n                        handler.resume();\r\n                    }\r\n                },\r\n                unload: function (domID, keepDom) {\r\n\r\n                    var handler = domID ? this.getCacheHandler(domID) : this.getCurrentHandler();\r\n\r\n                    if (handler) {\r\n                        handler.unload(keepDom);\r\n\r\n                        this.removeCacheHandler(handler.domID);\r\n                    }\r\n                },\r\n\r\n                open: function (options) {\r\n                    if (options.status) {\r\n\r\n                        app.domain.exports('page', options.content);\r\n\r\n                        options.sections = options.page.split(\"#\");\r\n\r\n                        this.load(options);\r\n\r\n                    } else if (options.errorMsg) {\r\n                        app.alert(options.errorMsg, app.alert.ERROR);\r\n                    }\r\n                },\r\n\r\n                getView: function () {\r\n                    return this.tab;\r\n                },\r\n\r\n\r\n                on:function(){\r\n                	this.event.on.apply(this.event,arguments);\r\n                },\r\n	            off:function(){\r\n		            this.event.off.apply(this.event,arguments);\r\n	            },\r\n	            trigger:function(){\r\n		            this.event.trigger.apply(this.event,arguments);\r\n	            }\r\n            };\r\n\r\n            Controller.View = View;\r\n            Controller.Model = Model;\r\n\r\n            return Controller;\r\n        }()",
params:[{name:"option",type:"object",desp:"参数",children:[{name:"View",type:"object",desp:"SPA框架视图实现对象",defaultValue:"app.Controller.View",details:"非必需，SPA框架视图实现对象，至少需要实现open、close、setCurrentView、getCurrentView、removeView、switchView、resumeView这些方法，可以根据实际情况另外实现该方法"},{name:"Model",type:"object",desp:"SPA框架数据模型实现对象",defaultValue:"app.Controller.Model",details:"非必需，SPA框架数据模型实现对象，需要实现load、pause、resume、unload、stepTo、setTimeout、clearTimeout、setInterval、clearInterval、delegateEvents、undelegateEvents，可以根据实际情况另外实现该方法"},{name:"modulesPath",type:"string",desp:"模块路径",defaultValue:"module",details:"非必需，模块相对于WebContent的路径"},{name:"separator",desp:"分割线",type:"string",defaultValue:"/",details:'非必需，模块地址的分割线，加入后台传过来的是error#404，将会被转移成"./module/error/404/"'},{name:"mvvmConfName",type:"string",desp:"配置文件的名词",defaultValue:"mvvm.json",details:"非必需，在每个模块下都有此名的配置文件，用于记录该模块下单页页面js、html资源的路径"},{name:"modulePath404",type:"string",desp:"404页面路径",defaultValue:"module/error/404/",details:"非必需，找不到页面的提示页面路径"},{name:"validateCleanCallback",type:"handler",desp:"清理错误回调函数",defaultValue:null,details:"函数，非必需，说明见app.validate的cleanCallback部分"},{name:"view",desp:"SPA框架视图配置",type:"object",children:[{name:"isGlobal",type:"boolean",desp:"是否全局使用",defaultValue:false,details:"如果是全局的话，将会使用app.screen.addResizeHandler监听屏幕resize事件，另导航栏可以重置大小"},{name:"ctn",type:"string",desp:"容器的jQuery选择器",details:"必需，表示多标页的容器，建议传入jQuery对象",defaultValue:""},{name:"tabs",type:"string",desp:"多标签导航栏的jQuery选择器",details:"必需，表示多标签导航栏的容器，建议传入jQuery对象",defaultValue:""},{name:"ctt",type:"string",desp:"页面内容的jQuery选择器",details:"必需，表示页面内容的容器，建议传入jQuery对象",defaultValue:""},{name:"contextMenuOption",type:"object",desp:"多标签导航栏的右键配置",details:"非必需,如果为false，则表示没有右键事件；具体例子，请见：app.router.tab.contextMenuOption",defaultValue:""},{name:"contextMenuCallback",type:"object",desp:"多标签导航栏的右键点击回调函数",details:"如果contextMenuOption不为false，则必需，具体例子，请见：app.router.tab.contextMenuCallback",defaultValue:""},{name:"untitled",type:"string",desp:"默认标题",details:"如果传入的标题没有的时候，默认标题",defaultValue:""}],defaultValue:""}],defaultValue:""}],returnValue:{name:"router",type:"object",desp:"路由",children:[{name:"open",type:"object",desp:"打开标签页",details:"该方法挂载到app.open下，底层是调用router.tab.open方法",children:[{name:"option",desp:"配置",type:"object",children:[{name:"status",type:"boolean",desp:"状态是否正常",defaultValue:false,details:"必需"},{name:"content",type:"object",desp:"页面数据",details:"在单页页面中，可以通过auiCtx.pageParams获取页面数据",defaultValue:""},{name:"page",type:"string",desp:"模块路径",defaultValue:"error#404",details:"使用井号#将文件夹进行分割"},{name:"title",type:"string",desp:"标题",details:"可以在初始化Controller时，设置option.view.untitled属性。如果是通过自子页面标题打开，title=undefined，则不会显示标题",defaultValue:""},{name:"type",type:"string",desp:"页面类型",defaultValue:"BLANK",details:"可选值有新标签页BLANK、子标签页SUB、当前标签页SELF、新窗口WINDOW"},{name:"id",type:"string",desp:"页面的ID标识",defaultValue:"BLANK",details:"此ID与单页页面中的handler.id相同"},{name:"hasFooter",type:"boolean",desp:"是否由底部按钮",defaultValue:true,details:"如果是通过子页面打开，可以设置子页面是否由底部footer按钮"},{name:"height",type:"string",desp:"子页面高度",defaultValue:"80%",details:"如果是通过子页面打开，可以设置子页面的高度"},{name:"width",type:"string",desp:"子页面宽度",defaultValue:"80%",details:"如果是通过子页面打开，可以设置子页面的宽度"},{name:"fullscreen",type:"boolean",desp:"是否全屏",defaultValue:false,details:"是否使用全屏打开"},{name:"displayNav",type:"boolean",desp:"显示标签导航栏",defaultValue:true,details:"是否显示标签导航栏"},{desp:"项目地址",defaultValue:"",neccesary:false,details:"如果打开多个项目时，需要配置",name:"server",type:"string"}],details:"",defaultValue:""}],defaultValue:""},{name:"tab",type:"object",desp:"视图实例",children:[{name:"close",desp:"关闭标签页",details:"该方法挂载到app.close下,底层是调用app.router.tab.close方法",hasReturn:false,params:[{name:"domID",type:"string",desp:"页面数据模型的唯一ID",defaultValue:"app.router.getCurrentHandler().domID",details:"非必需，可以在单页页面中通过handler.domID获取，默认值为当前标签页"},{name:"_doNotResume",type:"boolean",desp:"不调用上个页面的恢复动作",defaultValue:false,details:"非必需，需要关闭多个页面的时候，可以将这个配置项加了优化性能，但可能会导致页面混乱，慎用"}],type:"string",defaultValue:""}],details:"",defaultValue:""}],details:"",defaultValue:""},hasReturn:true,require:true,details:"",_belongTo:"AWEB 核心框架",edition:{universal:"app.Controller=function () {\r\n            'use strict';\r\n\r\n            var getTextURL = function (mvvmConfPath, server) {\r\n                    return \"text!./\" + (server || '') + mvvmConfPath + \"?timestamp=\" + new Date().getTime();\r\n                },\r\n                getJavascriptURL = function (mvvmConfPath, server) {\r\n                    return (server || '') + mvvmConfPath + \"?timestamp=\" + new Date().getTime();\r\n                },\r\n                validateModule = function (module) {\r\n                    var error = [],\r\n                        flows = module.flows,\r\n                        views = module.views,\r\n                        i, flow;\r\n\r\n                    if (!views) {\r\n                        error.push(\"views必需定义！\");\r\n                    }\r\n\r\n                    if (flows && flows.length) {\r\n                        for (i = -1; flow = flows[++i];) {\r\n                            if (!flow.id) {\r\n                                error.push(\"flows中位置为\" + i + \"的流程需包含关联view的id！\");\r\n                            } else {\r\n                                if (views && !views[flow.id]) {\r\n                                    error.push(\"flows中位置为\" + i + \"的流程id关联的view未在views中定义！\");\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        error.push(\"flows必需为长度大于0的数组！\");\r\n                    }\r\n\r\n                    return error;\r\n                };\r\n\r\n            var View = function (options, controller) {\r\n                    var _default = this._default,\r\n                        context = this,\r\n                        $left, $right,\r\n                        $contextMenu,\r\n                        $tabCtn,\r\n\r\n                        queryString, windowId, windowOptions;\r\n\r\n                    $.extend(true, context, _default, options);\r\n\r\n                    context.controller = controller;\r\n\r\n                    context.$ctn = $(context.ctn).addClass('hidden');\r\n                    context.$contextMenu = $contextMenu = $(context.contextMenuTemp);\r\n                    context.$ctn.prepend($contextMenu);\r\n\r\n                    context.$tabs = $(context.tabs, context.$ctn);\r\n                    context.$left = $left = $(context.leftBtnTemp);\r\n                    context.$right = $right = $(context.rightBtnTemp);\r\n\r\n                    context.$moveBtns = context.$left.add(context.$right);\r\n\r\n\r\n                    context.$tabs.wrap(context.tabCtnTemp);\r\n\r\n                    context.$tabCtn = $tabCtn = context.$tabs.parent();\r\n                    $tabCtn.prepend($left);\r\n                    $tabCtn.append($right);\r\n\r\n                    context.$ctt = $(context.ctt, context.$ctn);\r\n\r\n\r\n                    context.$tabs.on({\r\n                        'click.view': function (e) {\r\n                            var $target = $(e.target || window.event.srcElement),\r\n                                $item = $target.closest('[data-dom-id]'),\r\n                                domID = $item.attr('data-dom-id');\r\n\r\n                            if (domID) {\r\n                                if ($target.attr('data-role') === 'close') {\r\n                                    context.close(domID);\r\n                                } else {\r\n                                    context.switchView(domID);\r\n                                }\r\n\r\n                                return false;\r\n                            }\r\n\r\n                        }\r\n                    });\r\n                    if (context.contextMenuOption) {\r\n                        context.$tabs.on({\r\n                            'contextmenu.view': function (e) {\r\n                                var $li = $(e.target || event.srcElement).closest('[data-dom-id]'),\r\n                                    $tabs = $li.parent(),\r\n                                    $contextMenu = context.$contextMenu,\r\n\r\n                                    contextMenuOption = context.contextMenuOption,\r\n                                    contextMenuCallback = context.contextMenuCallback,\r\n                                    html = '',\r\n                                    lineTemp,\r\n                                    index, menuList, menu, length;\r\n\r\n                                if ($li.length) {\r\n                                    length = $tabs.children().length;\r\n                                    lineTemp = contextMenuOption.lineTemp;\r\n                                    index = $li.index();\r\n\r\n                                    if ($li.hasClass('active')) {\r\n                                        menuList = [].concat(contextMenuOption.CURRENT).reverse();\r\n                                    } else {\r\n                                        switch (index) {\r\n                                            case 0:\r\n                                                if (length === 1) {\r\n                                                    menuList = contextMenuOption.ONLY;\r\n                                                } else {\r\n                                                    menuList = contextMenuOption.FIRST;\r\n                                                }\r\n                                                break;\r\n                                            case length - 1:\r\n                                                menuList = contextMenuOption.LAST;\r\n                                                break;\r\n                                            default:\r\n                                                menuList = contextMenuOption._DEFAULT;\r\n                                        }\r\n\r\n                                        menuList = ([].concat(menuList)).reverse();\r\n                                    }\r\n\r\n\r\n                                    for (length = menuList.length;\r\n                                         (menu = contextMenuOption[menuList[--length]]);) {\r\n                                        html += lineTemp\r\n                                            .replace('_action_', menu.action)\r\n                                            .replace('_filter_', menu.filter)\r\n                                            .replace('_name_', menu.name);\r\n                                    }\r\n\r\n                                    $contextMenu\r\n                                        .empty().append(html.replace(/_index_/g, index))\r\n                                        .css(app.position(e, $(window), $contextMenu), -15, 0).removeClass('hide')\r\n                                        .off('.viewContextMenu')\r\n                                        .one({\r\n                                            'click.viewContextMenu': function (e) {\r\n                                                var $target = $(e.target || event.srcElement),\r\n                                                    action = $target.attr('data-action');\r\n\r\n                                                if (action && action !== \"undefined\") {\r\n                                                    contextMenuCallback.doAction.call(context, $li, action);\r\n                                                } else {\r\n                                                    contextMenuCallback.closeTab.call(context, $target.attr('data-filter'));\r\n                                                }\r\n\r\n                                                $contextMenu.addClass('hide');\r\n                                            },\r\n                                            'mouseleave.viewContextMenu': function () {\r\n                                                $contextMenu.addClass('hide');\r\n                                            }\r\n                                        });\r\n\r\n                                    $tabs.off('.viewContextMenu').one('mouseleave.viewContextMenu', function (e) {\r\n                                        if (!$(e.relatedTarget).closest('ul').hasClass('aweb-tab-content-menu')) {\r\n                                            $contextMenu.addClass('hide');\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                return false;\r\n                            }\r\n                        });\r\n                    }\r\n                    context.$moveBtns.on({\r\n                        'click.view': function () {\r\n                            context.focusTab(undefined, $(this));\r\n                        }\r\n                    });\r\n\r\n                    app.screen.addResizeHandler({\r\n                        uid: app.getUID(),\r\n                        isGlobal: options.isGlobal,\r\n                        timeout: 500,\r\n                        callback: function () {\r\n                            context.focusTab(context.$tabs.children('.active'));\r\n                        }\r\n                    });\r\n\r\n                    queryString = app.getQueryStringMap();\r\n\r\n                    if ((windowId = queryString[this.windowKey]) && (windowOptions = app.getData(windowId))) {\r\n                        windowOptions = JSON.parse(windowOptions);\r\n                        windowOptions.type = this.TYPE.BLANK;\r\n\r\n                        this.controller.open(windowOptions);\r\n                    }\r\n                },\r\n\r\n                Model = function (options,controller) {\r\n\r\n                    $.extend(true, this, options, {\r\n                        currentStep: -1,\r\n                        intervals: {},\r\n                        timeouts: {},\r\n                        _data: {\r\n                            scope: {}\r\n                        }\r\n                    });\r\n\r\n	                this.controller = controller;\r\n\r\n                    this.uid = this.pageId = this.cacheId = this.domID;\r\n                },\r\n\r\n                Controller = function (options) {\r\n                    var context = this,\r\n                        _default = this._default,\r\n                        eventController;\r\n\r\n                    $.extend(true, this, _default, options);\r\n\r\n                    options.view.controller = this;\r\n\r\n                    this.context = this;\r\n                    this.event=app.dispatcher();\r\n                    this.Model = this.Model || Model;\r\n                    this.tab = new (options.View || View)(options.view, this);\r\n                    this.pages = {};\r\n\r\n                };\r\n\r\n            View.prototype = {\r\n                version: 'AWOS 4.4_20171127',\r\n                constructor: View,\r\n                _default: {\r\n                    ctn: '[data-role=container]',\r\n\r\n                    tabs: '#tabs',\r\n\r\n                    ctt: '#spa-page-main',\r\n\r\n                    count: {},\r\n                    stack: [],\r\n\r\n                    contextMenuTemp: '<ul class=\"aweb-tab-content-menu hide\"></ul>',\r\n                    tabCtnTemp: '<div class=\"aweb-tabs-container\"></div>',\r\n                    tabTemp: '<li class=\"active\" data-dom-id=\"_domID_\" data-tab-id=\"_id_\" data-href=\"_href_\" title=\"_title_\"><a>_title_</a>_button_</li>',\r\n                    leftBtnTemp: '<button type=\"button\" title=\"左移标签\" class=\"btn aweb-tabs-left hidden\" data-role=\"left\"><i class=\"fa fa-chevron-left\"></i>',\r\n                    rightBtnTemp: '<button type=\"button\" title=\"右移标签\" class=\"btn aweb-tabs-right hidden\" data-role=\"right\"><i class=\"fa fa-chevron-right\"></i></button>',\r\n                    closeButtonTemp: '<button type=\"button\" data-role=\"close\" class=\"close\">&times;</button>',\r\n                    untitled: '未定义',\r\n\r\n                    cttTemp: '<div id=\"_domID_\" />',\r\n\r\n                    ctnFullClassName: 'aweb-spa-ctn-full',\r\n                    cttFullClassName: 'aweb-spa-ctt-full',\r\n\r\n                    hideNavClass: 'hide',\r\n\r\n                    pathKeyInURL: 'page',\r\n                    fullscreenKeyInURL: 'fullscreen',\r\n                    displayNavKeyInURL: 'displayNav',\r\n\r\n                    windowKey: 'windowId',\r\n\r\n                    toUpdateTitle: true\r\n                },\r\n\r\n                TYPE: {\r\n                    BLANK: 'BLANK',\r\n                    SUB: 'SUB',\r\n                    SELF: 'SELF',\r\n                    WINDOW: 'WINDOW',\r\n                    POPOVER: 'POPOVER'\r\n                },\r\n                popOption: {\r\n                    popSwitch: false\r\n                },\r\n\r\n                open: function (options) {\r\n                    var TYPE = this.TYPE,\r\n\r\n                        ret = false,\r\n                        title = options.title || this.untitled,\r\n                        id = options.id,\r\n                        fixed = options.fixed,\r\n                        domID,\r\n                        href = $.camelCase(options.sections.join('-')),\r\n\r\n                        handler,\r\n\r\n                        $tabs = this.$tabs.children(),\r\n                        $tab, $renderTo;\r\n\r\n\r\n                    if (!this.stack.length && options.type === TYPE.SELF) {\r\n                        options.type = TYPE.BLANK;\r\n                    }\r\n\r\n\r\n                    if (!options.type || options.type === TYPE.BLANK) {\r\n                        $tab = id ? $tabs.filter('[data-tab-id=\"' + id + '\"][data-href=\"' + href + '\"]') : $tabs.filter('[data-href=\"' + href + '\"]');\r\n\r\n                        if ($tab.length) {\r\n                            domID = $tab.attr('data-dom-id');\r\n\r\n                            this.switchView(domID, !$tab.length);\r\n                        } else {\r\n                            if (this.stack.length > 1 && (handler = this.controller.getCacheHandler(this.stack[this.stack.length - 1])) && (handler.type === TYPE.SUB || handler.type === TYPE.POPOVER)) {\r\n\r\n                                switch (handler.type) {\r\n                                    case TYPE.SUB:\r\n                                        app.alert('系统错误 0x01：子页面下不能打开新页面！', app.alert.ERROR, '0x01');\r\n                                        break;\r\n                                    case TYPE.POPOVER:\r\n                                        app.alert('系统错误 0x01：气泡页面下不能打开新页面！', app.alert.ERROR, '0x01');\r\n                                        break;\r\n                                }\r\n                            } else {\r\n                                domID = this.getUID(id || href);\r\n\r\n                                this.$tabs.append(this.tabTemp.replace(/_domID_/, domID).replace(/_id_/, id).replace(/_href_/, href)\r\n                                    .replace(/_title_/g, title)\r\n                                    .replace(/_button_/, fixed ? '':this.closeButtonTemp)\r\n                                );\r\n\r\n                                $renderTo = $(this.cttTemp.replace(/_domID_/, domID));\r\n                                this.$ctt.append($renderTo);\r\n\r\n                                ret = {\r\n                                    domID: domID,\r\n                                    $renderTo: $renderTo,\r\n                                    type: TYPE.BLANK\r\n                                };\r\n                            }\r\n                        }\r\n                    } else {\r\n                        switch (options.type) {\r\n                            case TYPE.SELF:\r\n                                //暂时阻止气泡页面下自身打开页面\r\n                                if (this.stack.length > 1 && (handler = this.controller.getCacheHandler(this.stack[this.stack.length - 1])) && (handler.type === TYPE.POPOVER)) {\r\n                                    app.alert('系统错误 0x01：气泡页面下不能打开自身页面！', app.alert.ERROR, '0x01');\r\n                                } else {\r\n                                    handler = this.controller.getCurrentHandler();\r\n\r\n                                    this.controller.unload(handler.domID, true);\r\n\r\n                                    domID = this.getUID(id || href);\r\n\r\n                                    $renderTo = handler.$renderTo = this.updateTitleAndID(handler.type, handler.domID, domID, title, id, href, handler.$renderTo);\r\n\r\n                                    ret = {\r\n                                        $renderTo: handler.$renderTo,\r\n                                        domID: domID,\r\n                                        type: handler.type\r\n                                    };\r\n                                }\r\n\r\n\r\n                                break;\r\n                            case TYPE.SUB:\r\n\r\n                                if (this.stack.length > 1 && (handler = this.controller.getCacheHandler(this.stack[this.stack.length - 1])) && (handler.type === TYPE.POPOVER)) {\r\n                                    app.alert('系统错误 0x01：气泡页面下不能打开子页面！', app.alert.ERROR, '0x01');\r\n                                } else {\r\n                                    domID = this.getUID(id || href);\r\n\r\n                                    $renderTo = $(this.cttTemp.replace(/_domID_/, domID));\r\n\r\n                                    ret = {\r\n                                        $renderTo: $renderTo,\r\n                                        domID: domID,\r\n                                        type: TYPE.SUB\r\n                                    };\r\n\r\n                                    app.modal({\r\n                                        title: title,\r\n                                        content: '',\r\n                                        btnConfirm: options.btnConfirm || '关闭',\r\n                                        btnCancel: options.btnCancel || '取消',\r\n                                        init: function (controller) {\r\n                                            var $body = $(this),\r\n                                                $close = $('<button title=\"关闭子页面\" type=\"button\" class=\"close alert-close\">&times;</button>');\r\n\r\n                                            $body.prev().prepend($close);\r\n                                            $body.append($renderTo);\r\n\r\n                                            $close.one('click', function () {\r\n                                                controller.unload();\r\n\r\n                                                $(this).closest('.modal').modal('hide');\r\n\r\n                                                controller.tab.resumeView();\r\n                                            });\r\n                                        },\r\n                                        confirmHandler: function (controller) {\r\n                                            controller.unload();\r\n\r\n                                            $(this).closest('.modal').modal('hide');\r\n\r\n                                            controller.tab.resumeView();\r\n                                        },\r\n                                        cancelHandler: function (controller) {\r\n                                            controller.unload();\r\n\r\n                                            $(this).closest('.modal').modal('hide');\r\n\r\n                                            controller.tab.resumeView();\r\n\r\n                                        },\r\n                                        width: options.width,\r\n                                        height: options.height,\r\n                                        args: [this.controller],\r\n                                        isLargeModal: true,\r\n                                        isDialog: true,\r\n                                        backdrop: 'static',\r\n                                        noFooter: !options.hasFooter,\r\n                                        noHeader: !options.title\r\n                                    });\r\n                                }\r\n\r\n                                break;\r\n                            case TYPE.POPOVER:\r\n\r\n                                if (this.stack.length > 1 && (handler = this.controller.getCacheHandler(this.stack[this.stack.length - 1])) && (handler.type === TYPE.POPOVER)) {\r\n                                    app.alert('系统错误 0x01：气泡页面下不能打开新气泡页面！', app.alert.ERROR, '0x01');\r\n\r\n                                } else {\r\n                                    domID = this.getUID(id || href);\r\n\r\n                                    $renderTo = $(this.cttTemp.replace(/_domID_/, domID));\r\n\r\n                                    ret = {\r\n                                        $renderTo: $renderTo,\r\n                                        domID: domID,\r\n                                        type: TYPE.POPOVER\r\n                                    };\r\n\r\n\r\n                                  /*  //需要阻止第二次点击的时候仍然进行 popover 动作\r\n                                    if (this.popOption.popSwitch) {\r\n                                        this.popOption.popSwitch = !this.popOption.popSwitch;\r\n\r\n                                    } else {*/\r\n                                        app.popover({\r\n                                            $elem: options.$elem,\r\n                                            title: title,\r\n                                            content: '',\r\n                                            placement: 'auto left',\r\n                                            init: function (popIns, controller) {\r\n                                                var $body = $(this).find('.aweb-popover-content');\r\n\r\n                                                $body.append($renderTo);\r\n\r\n\r\n                                            },\r\n                                            confirmHandler: function (popIns, controller, popOption) {\r\n\r\n                                                if (!popIns.popInstance.inState.click) {\r\n                                                    popOption.popSwitch = !popOption.popSwitch;\r\n                                                }\r\n                                                controller.unload();\r\n                                                controller.tab.resumeView();\r\n                                            },\r\n\r\n                                            width: options.width,\r\n                                            height: options.height,\r\n                                            args: [this.controller, this.popOption]\r\n                                        });\r\n                                  /*  }*/\r\n                                }\r\n\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    if (typeof options.fullscreen === 'boolean') {\r\n                        this.fullscreen(options.fullscreen);\r\n                    }\r\n\r\n                    if (typeof options.displayNav === 'boolean') {\r\n                        this.displayNav(options.displayNav);\r\n                    }\r\n\r\n                    return ret;\r\n                },\r\n                openWindow: function (options) {\r\n	                var optionStr = JSON.stringify(options || {}),\r\n		                windowId = app.getUID(),\r\n		                location = window.location || document.location,\r\n		                url = (location.origin || '') + location.pathname,\r\n		                a = document.createElement(\"a\");\r\n\r\n	                app.setData(windowId, optionStr);\r\n\r\n	                window.open(url + '?' + app.getNewQueryStringURL({\r\n		                windowId: windowId\r\n	                }));\r\n                },\r\n                close: function (domID, _doNotResume) {\r\n                    var handler,\r\n                        controller = this.controller,\r\n                        currentViewID = this.getCurrentView();\r\n\r\n                    handler = controller.getCacheHandler(domID) || controller.getCurrentHandler();\r\n                    domID = domID || currentViewID;\r\n\r\n                    if (handler) {\r\n                        if (handler.type === this.TYPE.SUB) {\r\n                            controller.unload(domID, true);\r\n\r\n                            handler.$renderTo.closest('.modal').modal('hide');\r\n                        } else {\r\n                            controller.unload(domID);\r\n\r\n                            this.$tabs.children('[data-dom-id=\"' + domID + '\"]').remove();\r\n                            this.$ctt.children('#' + domID).remove();\r\n                        }\r\n\r\n                        if (!_doNotResume && domID === currentViewID) {\r\n                            this.resumeView();\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n\r\n                getUID: function (domID) {\r\n\r\n                    if (this.count[domID]) {\r\n                        domID += (++this.count[domID]);\r\n                    } else {\r\n                        this.count[domID] = 1;\r\n                    }\r\n                    return domID;\r\n                },\r\n                updateTitleAndID: function (type, oldID, newID, title, id, href, $renderTo) {\r\n                    var TYPE = this.TYPE;\r\n\r\n                    title = title || this.untitled;\r\n\r\n                    switch (type) {\r\n                        case TYPE.SUB:\r\n                            $renderTo.closest('.modal').children('.modal-header').children(':not(button)').text(title);\r\n                            break;\r\n                        case TYPE.POPOVER:\r\n                            $renderTo.closest('.aweb-popover').children('.aweb-popover-header').children('.aweb-popover-title').text(title);\r\n                            break;\r\n                        default:\r\n                            this.$tabs\r\n                                .children('[data-dom-id=\"' + oldID + '\"]')\r\n                                .attr({\r\n                                    title: title,\r\n                                    'data-dom-id': newID,\r\n                                    'data-tab-id': id,\r\n                                    'data-href': href\r\n                                })\r\n                                .children('a').text(title);\r\n                            break;\r\n                    }\r\n\r\n                    return $renderTo.attr('id', newID);\r\n                },\r\n                setTitle: function (uid, newTitle) {\r\n                    var TYPE = this.TYPE,\r\n                        model = this.controller.getCacheHandler(uid),\r\n                        $view;\r\n\r\n                    if (model && ($view = model.$renderTo)) {\r\n                        newTitle = newTitle || this.untitled;\r\n\r\n                        switch (model.type) {\r\n                            case TYPE.SUB:\r\n                                $view.closest('.modal').children('.modal-header').children(':not(button)').text(newTitle);\r\n                                break;\r\n                            default:\r\n                                this.$tabs\r\n                                    .children('[data-dom-id=\"' + uid + '\"]')\r\n                                    .attr({\r\n                                        title: newTitle\r\n                                    })\r\n                                    .children('a').text(newTitle);\r\n                                break;\r\n                        }\r\n                    }\r\n                },\r\n\r\n                setCurrentView: function (domID) {\r\n                    if (domID) {\r\n                        var stack = [],\r\n                            _stack = this.stack,\r\n                            i, id;\r\n\r\n                        for (i = _stack.length; id = _stack[--i];) {\r\n                            if (domID !== id) {\r\n                                stack.push(id);\r\n                            }\r\n                        }\r\n                        this.stack = stack.reverse();\r\n                        this.stack.push(domID);\r\n\r\n                        this.$ctn.removeClass('hidden');\r\n                    }\r\n                },\r\n                getCurrentView: function () {\r\n                    //字符串化\r\n	                return this.stack[this.stack.length - 1] + '';\r\n                },\r\n                removeView: function (domID) {\r\n                    if (domID) {\r\n                        var stack = [],\r\n                            _stack = this.stack,\r\n                            i, id;\r\n\r\n                        for (i = _stack.length; id = _stack[--i];) {\r\n                            if (domID !== id) {\r\n                                stack.push(id);\r\n                            }\r\n                        }\r\n                        this.stack = stack.reverse();\r\n\r\n                        if (!stack.length) {\r\n                            this.$ctn.addClass('hidden');\r\n                            this.fullscreen(false);\r\n                            this.displayNav(true);\r\n                        }\r\n                    }\r\n                },\r\n\r\n\r\n                switchView: function (domID, isLoad) {\r\n                    var\r\n\r\n                        lastDomID = this.getCurrentView(),\r\n                        $tab, $ctt, $page,\r\n                        model;\r\n\r\n                    if (isLoad || lastDomID !== domID) {\r\n\r\n\r\n                        model = this.controller.getCacheHandler(domID);\r\n\r\n                        if (model) {\r\n                            this.controller.pause();\r\n\r\n                            if ((model.type !== this.TYPE.SUB) && (model.type !== this.TYPE.POPOVER)) {\r\n                                $tab = this.$tabs.children()\r\n                                    .removeClass('active')\r\n                                    .filter('[data-dom-id=\"' + domID + '\"]').addClass('active');\r\n\r\n                                $ctt = this.$ctt;\r\n\r\n                                $page = $ctt.children('#' + lastDomID);\r\n                                $page.attr('data-scroll-top', $page.parent().scrollTop()).addClass('hide');\r\n\r\n\r\n                                $page = $ctt.children('#' + domID);\r\n                                $page.removeClass('hide');\r\n                                $page.parent().scrollTop($page.attr('data-scroll-top') || 0);\r\n                            } else {\r\n                                $ctt = this.$ctt;\r\n                                $page = $ctt.children('#' + lastDomID);\r\n                                $page.attr('data-scroll-top', $page.parent().scrollTop());\r\n\r\n                                $page = model.$renderTo;\r\n                                $page.removeClass('hide');\r\n                            }\r\n\r\n\r\n                            !isLoad && this.controller.resume(domID);\r\n\r\n                            this.setCurrentView(domID);\r\n\r\n                            this.focusTab($tab);\r\n                        }\r\n\r\n\r\n                    }\r\n                },\r\n                resumeView: function () {\r\n                    var TYPE = this.TYPE,\r\n                        lastDomID = this.getCurrentView(),\r\n                        handler = this.controller.getCurrentHandler(),\r\n                        domID,\r\n                        $tab, $ctt, $page, model;\r\n\r\n                    if (handler) {\r\n                        domID = handler.domID;\r\n                        model = this.controller.getCacheHandler(domID);\r\n\r\n                        if ((model.type !== this.TYPE.SUB) && (model.type !== this.TYPE.POPOVER)) {\r\n                            $tab = this.$tabs.children()\r\n                                .removeClass('active')\r\n                                .filter('[data-dom-id=\"' + domID + '\"]').addClass('active');\r\n\r\n                            $ctt = this.$ctt;\r\n\r\n\r\n                            $page = $ctt.children('#' + lastDomID);\r\n                            $page.attr('data-scroll-top', $page.parent().scrollTop()).addClass('hide');\r\n\r\n                            $page = $ctt.children('#' + domID);\r\n                            $page.removeClass('hide');\r\n                            $page.parent().scrollTop($page.attr('data-scroll-top') || 0);\r\n                        }\r\n                        this.controller.resume(domID);\r\n\r\n                        this.focusTab($tab);\r\n                    }\r\n                },\r\n                focusTab: (function () {\r\n                    var _focusTab = function ($tab, $btn) {\r\n                            var widths = 0,\r\n                                totalWidths = 0,\r\n\r\n                                $tabCtn = this.$tabCtn,\r\n                                $tabs = this.$tabs,\r\n                                $lis = $tabs.children($tab ? ':lt(' + ($tab.index() + 1) + ')' : undefined),\r\n                                $tabBtn = $btn || this.$left,\r\n                                marginLeft,\r\n\r\n                                tabsContainerWidth = $tabCtn.innerWidth() - $tabBtn.outerWidth() * 4.2,\r\n                                tabsOffsetLeft = parseInt($tabs.css('left'), 10);\r\n\r\n\r\n                            $lis.each(function (index, elem) {\r\n                                widths += $(elem).outerWidth();\r\n                            });\r\n\r\n                            if (!$tab) {\r\n                                totalWidths = widths;\r\n                            } else {\r\n                                $tabs.children().each(function (index, elem) {\r\n                                    totalWidths += $(elem).outerWidth();\r\n                                });\r\n                            }\r\n\r\n                            this.$moveBtns[totalWidths < tabsContainerWidth ? 'addClass' : 'removeClass']('hidden');\r\n\r\n\r\n                            if ($btn) {\r\n                                if ($btn.attr('data-role') === 'left') {\r\n                                    tabsOffsetLeft += tabsContainerWidth;\r\n                                } else {\r\n                                    tabsOffsetLeft -= tabsContainerWidth;\r\n                                }\r\n                            } else {\r\n                                tabsOffsetLeft = tabsContainerWidth - widths;\r\n                            }\r\n\r\n                            if (tabsContainerWidth - widths > tabsOffsetLeft) {\r\n\r\n                                tabsOffsetLeft = tabsContainerWidth - widths;\r\n                            } else if (tabsOffsetLeft > 0) {\r\n                                marginLeft = totalWidths < tabsContainerWidth ? 0 : $tabBtn.outerWidth();\r\n\r\n                                tabsOffsetLeft = tabsOffsetLeft > marginLeft ? marginLeft : tabsOffsetLeft;\r\n                            }\r\n\r\n                            $tabs.animate({\r\n                                'left': tabsOffsetLeft + 'px'\r\n                            }, 500);\r\n                        },\r\n                        focusTabHandler = null;\r\n\r\n                    return function ($tab, $btn) {\r\n                        var context = this;\r\n                        if (focusTabHandler) {\r\n                            clearTimeout(focusTabHandler);\r\n                            focusTabHandler = null;\r\n                        }\r\n\r\n                        focusTabHandler = setTimeout(function () {\r\n                            _focusTab.call(context, $tab, $btn);\r\n                        }, 200);\r\n                    }\r\n                }()),\r\n\r\n                fullscreen: function (fullscreen) {\r\n                    this.$ctn[fullscreen ? 'addClass' : 'removeClass'](this.ctnFullClassName);\r\n\r\n                    app.shelter[fullscreen ? 'upperZIndex' : 'lowerZIndex']();\r\n\r\n                    this.focusTab();\r\n                },\r\n                isFullScreen: function () {\r\n                    return this.$ctn.hasClass(this.ctnFullClassName);\r\n                },\r\n                displayNav: function (show) {\r\n                    this.$tabCtn[show ? 'removeClass' : 'addClass'](this.hideNavClass);\r\n                    this.$ctt[show ? 'removeClass' : 'addClass'](this.cttFullClassName);\r\n\r\n                    this.focusTab();\r\n                },\r\n                isDisplayNav: function () {\r\n                    return !this.$tabCtn.hasClass(this.hideNavClass);\r\n                }\r\n            };\r\n\r\n            Model.prototype = {\r\n                version: 'AWOS 4.4_20171127',\r\n                constructor: Model,\r\n\r\n                load: function () {\r\n                    return this.stepTo(0);\r\n                },\r\n                pause: function () {\r\n                    var data = this._data;\r\n\r\n                    try {\r\n                        if (data && data.bootstrap && data.bootstrap.pause) {\r\n\r\n	                        this.controller.trigger(this.controller.STATUS.BEFORE_PAUSE,this);\r\n\r\n                            data.bootstrap.pause.call(this, data.$el, data.scope, this);\r\n\r\n	                        this.controller.trigger(this.controller.STATUS.AFTER_PAUSE,this);\r\n                        }\r\n                    } catch (e) {\r\n                        if (window.aweb.error) {\r\n                            app.alert(e.message, app.alert.ERROR);\r\n                        }\r\n                        if (window.aweb.log) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n\r\n                    this.stopAsyncEvent();\r\n\r\n                    return this;\r\n                },\r\n                resume: function () {\r\n                    var data = this._data;\r\n\r\n                    try {\r\n                        if (data && data.bootstrap && data.bootstrap.resume) {\r\n	                        this.controller.trigger(this.controller.STATUS.BEFORE_RESUME,this);\r\n\r\n                            data.bootstrap.resume.call(this, data.$el, data.scope, this);\r\n\r\n	                        this.controller.trigger(this.controller.STATUS.AFTER_RESUME,this);\r\n                        }\r\n                    } catch (e) {\r\n\r\n                        if (window.aweb.error) {\r\n                            app.alert(e.message, app.alert.ERROR);\r\n                        }\r\n                        if (window.aweb.log) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n\r\n                    this.startAsyncEvent();\r\n\r\n                    return this;\r\n                },\r\n                unload: function (keepDom) {\r\n                    if (this.currentStep !== -1) {\r\n                        var data = this._data;\r\n\r\n                        try {\r\n                            if (data && data.bootstrap && data.bootstrap.unload) {\r\n	                            this.controller.trigger(this.controller.STATUS.BEFORE_UNLOAD,this);\r\n\r\n                                data.bootstrap.unload.call(this, data.$el, data.scope, this);\r\n\r\n	                            this.controller.trigger(this.controller.STATUS.AFTER_UNLOAD,this);\r\n                            }\r\n                        } catch (e) {\r\n                            if (window.aweb.error) {\r\n                                app.alert(e.message, app.alert.ERROR);\r\n                            }\r\n                            if (window.aweb.log) {\r\n                                console.error(e);\r\n                            }\r\n                        } finally {\r\n                            this.undelegateEvents();\r\n                            this.stopAsyncEvent(true);\r\n\r\n                            if (!keepDom) {\r\n                                data.$el.remove();\r\n                                delete this._data.$el;\r\n\r\n                                if (window.$AW) {\r\n                                    delete window.$AW._css[this.domID];\r\n                                }\r\n                            } else {\r\n                                data.$el.empty();\r\n                            }\r\n\r\n                            delete this.timeouts;\r\n                            delete this.intervals;\r\n\r\n\r\n                            this.timeouts = {};\r\n                            this.intervals = {};\r\n                        }\r\n                    }\r\n\r\n                    return this;\r\n                },\r\n\r\n                stepTo: function (step) {\r\n                    var\r\n                        handler = this,\r\n                        cache = handler._data && handler._data.scope,\r\n                        module = handler.conf,\r\n                        modulePath = handler.path,\r\n                        oFlow = module.flows[step],\r\n                        oView = module.views[oFlow.id],\r\n	                    dtd = $.Deferred();\r\n\r\n                    //防止刷新时，pageParams不一致\r\n                    if (cache && !$.isEmptyObject(cache)) {\r\n                        app.domain.exports('page', cache);\r\n                    }\r\n\r\n                    this.unload(true);\r\n\r\n                    require([getTextURL(modulePath + oView.template, handler.server), getJavascriptURL(modulePath + oView.js, handler.server)],\r\n                        function (template, bootstrap) {\r\n                            var data = handler._data,\r\n                                $div = $('<div/>'),\r\n                                $el;\r\n\r\n\r\n                            handler.$renderTo.empty().append($div);\r\n                            template && $div.append(template);\r\n                            $el = data.$el = handler.$renderTo;\r\n\r\n                            data.bootstrap = bootstrap;\r\n\r\n                            try {\r\n                                if (data && data.bootstrap && data.bootstrap.load) {\r\n                                    bootstrap.load.call(handler, $el, data.scope, handler);\r\n                                }\r\n\r\n                                handler.currentStep = step;\r\n\r\n                                handler.controller.trigger(handler.controller.STATUS.AFTER_LOAD,handler);\r\n\r\n                                if (window.aweb.log) {\r\n                                    console.log(new Date().toTimeString() + '：加载' + handler.path + '完毕，唯一ID（domID）：' + handler.domID + '，页面ID（id）：' + handler.id + '，当前步数（currentStep）：' + step + '');\r\n                                }\r\n                            } catch (e) {\r\n                                if (window.aweb.error) {\r\n                                    app.alert(e.message, app.alert.ERROR);\r\n                                }\r\n                                if (window.aweb.log) {\r\n                                    console.error(e);\r\n                                }\r\n                            }finally {\r\n	                            dtd.resolve();\r\n                            }\r\n                        });\r\n\r\n	                return dtd.promise();\r\n                },\r\n\r\n                setTimeout: function (option) {\r\n                    var handler = this;\r\n\r\n                    if (option.immediate) {\r\n                        option.callback ? option.callback() : option.func();\r\n                    }\r\n\r\n                    option.clock = option.clock || 0;\r\n                    option.uniqueId = option.uniqueId || app.getUID();\r\n                    option.windowId = window.setTimeout(function () {\r\n                        option.callback ? option.callback() : option.func();\r\n\r\n                        handler.removeAsyncEvent(handler.timeouts, option.uniqueId);\r\n                    }, option.clock);\r\n\r\n                    handler.timeouts[option.uniqueId] = option;\r\n\r\n                    return option.uniqueId;\r\n                },\r\n                clearTimeout: function (uniqueId) {\r\n                    var e = this.timeouts[uniqueId];\r\n\r\n                    if (e) {\r\n                        window.clearTimeout(e.windowId);\r\n                        this.removeAsyncEvent(this.timeouts, e.uniqueId);\r\n                    }\r\n                },\r\n                setInterval: function (option) {\r\n                    var handler = this;\r\n\r\n                    if (option.immediate) {\r\n                        option.callback ? option.callback() : option.func();\r\n                    }\r\n\r\n                    option.clock = option.clock || 0;\r\n                    option.uniqueId = option.uniqueId || app.getUID();\r\n                    option.windowId = window.setInterval(option.times ? function () {\r\n                        if (option.times) {\r\n                            option.times--;\r\n                            option.callback ? option.callback() : option.func();\r\n                        } else {\r\n                            handler.removeAsyncEvent(handler.timeouts, option.uniqueId);\r\n                        }\r\n                    } : (option.callback || option.func), option.clock);\r\n\r\n                    handler.intervals[option.uniqueId] = option;\r\n\r\n                    return option.uniqueId;\r\n                },\r\n                clearInterval: function (uniqueId) {\r\n                    var e = this.intervals[uniqueId];\r\n\r\n                    if (e) {\r\n                        window.clearInterval(e.windowId);\r\n                        this.removeAsyncEvent(this.intervals, e.uniqueId);\r\n                    }\r\n                },\r\n                updateInterval: function (uniqueId, option) {\r\n                    var handler = this,\r\n                        e = handler.intervals[uniqueId];\r\n\r\n                    if (e) {\r\n                        this.clearInterval(e.uniqueId);\r\n\r\n                        return this.setInterval($.extend(true, e, option));\r\n                    }\r\n                },\r\n                startAsyncEvent: function () {\r\n                    var i, map, item,\r\n                        handler = this;\r\n\r\n                    map = this.intervals;\r\n                    for (i in map) {\r\n                        if ((item = map[i]) && item.isPause) {\r\n\r\n                            item.windowId = window.setInterval(item.times ? (function (item, handler) {\r\n                                return function () {\r\n                                    if (item.times) {\r\n                                        item.times--;\r\n                                        item.callback ? item.callback() : item.func();\r\n                                    } else {\r\n                                        handler.removeAsyncEvent(handler.timeouts, item.uniqueId);\r\n                                    }\r\n                                };\r\n                            }(item, handler)) : (item.callback || item.func), item.clock);\r\n                        }\r\n                    }\r\n\r\n                    map = this.timeouts;\r\n                    for (i in map) {\r\n                        if ((item = map[i]) && item.isPause) {\r\n                            item.windowId = window.setTimeout((function (item, handler) {\r\n                                return function () {\r\n                                    item.callback ? item.callback() : item.func();\r\n\r\n                                    handler.removeAsyncEvent(handler.timeouts, item.uniqueId);\r\n                                }\r\n                            }(item, handler)), item.clock);\r\n                        }\r\n                    }\r\n\r\n                    i = null, item = null, map = null;\r\n                },\r\n                stopAsyncEvent: function (isUnload) {\r\n                    var i, map, item;\r\n\r\n                    map = this.intervals;\r\n                    for (i in map) {\r\n                        if ((item = map[i]) && (isUnload || item.isPause)) {\r\n                            window.clearInterval(map[i].windowId);\r\n                        }\r\n                    }\r\n\r\n                    map = this.timeouts;\r\n                    for (i in map) {\r\n                        if ((item = map[i]) && (isUnload || item.isPause)) {\r\n                            window.clearTimeout(map[i].windowId);\r\n                        }\r\n                    }\r\n                },\r\n                removeAsyncEvent: function (arr, uniqueId) {\r\n                    if (arr[uniqueId]) {\r\n                        arr[uniqueId] = null;\r\n                        delete arr[uniqueId];\r\n                    }\r\n                },\r\n\r\n\r\n                delegateEvents: function (events) {\r\n                    var context = this,\r\n                        $el = context._data.$el || context.$renderTo,\r\n                        method, match, eventName, selector, $selector, key, touchName,\r\n                        map = {},\r\n                        intercept,\r\n                        $ = jQuery;\r\n\r\n                    this.undelegateEvents();\r\n                    for (key in events) {\r\n                        if (events.hasOwnProperty(key)) {\r\n                            method = events[key];\r\n\r\n                            if (!this.isFunction(method)) method = this[events[key]];\r\n\r\n                            if (!method) continue;\r\n\r\n                            match = key.match(this.delegateEventSplitter);\r\n\r\n                            eventName = match[1];\r\n                            selector = match[2];\r\n\r\n                            eventName += '.previewEvents';\r\n                            if (selector === '') {\r\n                                $el.on(eventName, method);\r\n                            } else {\r\n                                $selector = $(selector, $el);\r\n\r\n\r\n                                if ($selector.length) {\r\n                                    // (touchName = eventName.split(\".\")[0]) && touchType[touchName] && $selector.addClass(\"waves-effect\");\r\n                                    $selector\r\n                                        .on(eventName, method)\r\n                                        .attr('data-aweb-event', true);\r\n                                }\r\n\r\n                                if (!map[eventName]) {\r\n                                    map[eventName] = {};\r\n                                    $el.on(eventName, {\r\n                                        eventName: eventName\r\n                                    }, function (e) {\r\n                                        var $e = $(e.target || window.event.srcElement),\r\n                                            $selector,\r\n                                            selector, items = map[e.data.eventName];\r\n\r\n                                        for (selector in items) {\r\n                                            if (items.hasOwnProperty(selector)) {\r\n                                                $selector = $e.closest($(selector, $el));\r\n\r\n                                                if ($selector.attr('data-aweb-event')) {\r\n                                                    break;\r\n                                                } else if ($selector.length) {\r\n                                                    return items[selector].apply($e[0], arguments);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                map[eventName][selector] = method;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                    if (window.aweb && window.aweb.headless && window.aweb.headless.on) {\r\n                        intercept = function (e) {\r\n                            var $target = $(e.target || event.srcElement);\r\n\r\n                            console.log(new Date().toString() + ':' + context.path + '触发了' + e.type + '，元素是:' + $target);\r\n                        };\r\n                        $el.on({\r\n                            'click.debug': intercept,\r\n                            'focus.debug': intercept,\r\n                            'keydown.debug': intercept\r\n                        });\r\n                    }\r\n                },\r\n                undelegateEvents: function () {\r\n                    this._data.$el && this._data.$el.off();\r\n                },\r\n                isFunction: function (obj) {\r\n                    return ((typeof obj === 'function') || false);\r\n                },\r\n                delegateEventSplitter: /^(\\S+)\\s*(.*)$/,\r\n\r\n                getController: function () {\r\n                    return this.controller;\r\n                }\r\n            };\r\n\r\n            Controller.prototype = {\r\n                version: 'AWOS 4.4_20171127',\r\n                constructor: Controller,\r\n                _default: {\r\n                    conf: {},\r\n                    cache: {},\r\n                    modulesPath: \"module\",\r\n                    separator: \"/\",\r\n                    mvvmConfName: \"mvvm.json\",\r\n                    modulePath404: \"module/error/404/\"\r\n                },\r\n\r\n	            STATUS: {\r\n		            AFTER_LOAD: 'afterLoad',\r\n		            BEFORE_PAUSE: 'beforePause',\r\n		            AFTER_PAUSE: 'afterPause',\r\n		            BEFORE_RESUME: 'beforeResume',\r\n		            AFTER_RESUME: 'afterResume',\r\n		            BEFORE_UNLOAD: 'beforeUnload',\r\n		            AFTER_UNLOAD: 'afterUnload'\r\n	            },\r\n\r\n                getDefaultModulesPath: function () {\r\n                    return this.modulesPath;\r\n                },\r\n                getDefaultMVVMConfName: function () {\r\n                    return this.mvvmConfName;\r\n                },\r\n                getDefaultSeparator: function () {\r\n                    return this.separator;\r\n                },\r\n                getCurrentHandler: function () {\r\n                    return this.cache[this.tab.getCurrentView()];\r\n                },\r\n\r\n                getMVVM404: function () {\r\n                    return {\r\n                        path: this.modulePath404,\r\n                        conf: this.conf[this.modulePath404]\r\n                    };\r\n                },\r\n\r\n                getCacheHandler: function (domID) {\r\n                    return this.cache[domID];\r\n                },\r\n                addCacheHandler: function (handler) {\r\n                    this.cache[handler.domID] = handler;\r\n                },\r\n                removeCacheHandler: function (domID) {\r\n                    if (this.cache[domID]) {\r\n                        delete this.cache[domID];\r\n\r\n                        this.tab.removeView(domID);\r\n                    }\r\n                },\r\n\r\n                load: function (options) {\r\n                    var modulePath = this.getDefaultModulesPath() + this.getDefaultSeparator(),\r\n                        $renderTo,\r\n                        id, domID,\r\n                        result, type,\r\n                        handler,\r\n                        context = this,\r\n                        sections = [];\r\n\r\n                    if (options.sections instanceof Array) {\r\n                        sections = sections.concat(options.sections);\r\n                    }\r\n\r\n                    if (sections.length) {\r\n                        modulePath += (sections.join(this.getDefaultSeparator()) + this.getDefaultSeparator());\r\n                        id = options.id;\r\n\r\n                        if (options.type !== View.prototype.TYPE.WINDOW) {\r\n                            app.shelter.show('正在加载页面，请稍候…');\r\n                            require([getTextURL(modulePath + this.getDefaultMVVMConfName(), options.server)], function (mvvmConf) {\r\n                                try {\r\n                                    var error;\r\n\r\n                                    if (!mvvmConf) {\r\n                                        app.alert('系统错误 0x05：获取页面失败！', app.alert.ERROR, '0x05');\r\n                                    } else {\r\n                                        mvvmConf = JSON.parse(mvvmConf);\r\n\r\n                                        if ((error = validateModule(mvvmConf)).length) {\r\n                                            app.alert(error, app.alert.ERROR);\r\n                                        } else {\r\n                                            if (result = context.tab.open(options)) {\r\n\r\n                                                domID = result.domID;\r\n                                                $renderTo = result.$renderTo;\r\n                                                type = result.type;\r\n                                                context.pages[domID]= options;\r\n                                                try {\r\n                                                    handler = new context.Model({\r\n                                                        conf: mvvmConf,\r\n                                                        path: modulePath,\r\n                                                        $renderTo: $renderTo,\r\n                                                        id: id,\r\n                                                        domID: domID,\r\n                                                        controller: context,\r\n                                                        type: type,\r\n                                                        server: options.server,\r\n                                                        option:options\r\n                                                    },context);\r\n                                                } catch (e) {\r\n                                                    error = context.getMVVM404();\r\n\r\n                                                    handler = new context.Model({\r\n                                                        conf: error.conf,\r\n                                                        path: error.path,\r\n                                                        $renderTo: $renderTo,\r\n                                                        id: id,\r\n                                                        domID: domID,\r\n                                                        controller: context,\r\n                                                        type: type,\r\n                                                        errorMsg: e.message,\r\n                                                        server: options.server,\r\n                                                        option:options\r\n                                                    },context);\r\n                                                } finally {\r\n                                                    context.addCacheHandler(handler);\r\n\r\n                                                    //如果是SELF的时候，handler指的是上一次的type，而不是这一次的type\r\n                                                    if (options.type === context.tab.TYPE.SELF) {\r\n                                                        context.tab.setCurrentView(handler.domID);\r\n                                                    } else {\r\n                                                        context.tab.switchView(handler.domID, true);\r\n                                                    }\r\n\r\n	                                                $.when(handler.load()).done(function(){\r\n		                                                app.shelter.hide();\r\n                                                    });\r\n                                                }\r\n                                            } else {\r\n                                                app.shelter.hide();\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                } catch (e) {\r\n                                    if (window.aweb.log) {\r\n                                        console.error(e);\r\n                                    }\r\n\r\n                                    if (window.aweb.error) {\r\n                                        app.alert('系统错误 0x04：内容运行报错，详情见控制台！', app.alert.ERROR, '0x04');\r\n                                    }\r\n\r\n                                    app.shelter.hide();\r\n                                }\r\n                            });\r\n                        } else {\r\n                            this.tab.openWindow(options);\r\n                        }\r\n\r\n                    } else {\r\n                        if (window.aweb.error) {\r\n                            app.alert('系统错误 0x01：页面路径为空！', app.alert.ERROR, '0x01');\r\n                        }\r\n\r\n                    }\r\n                },\r\n                pause: function () {\r\n                    var handler = this.getCurrentHandler();\r\n\r\n                    if (handler) {\r\n                        handler.pause();\r\n                    }\r\n                },\r\n                resume: function (domID) {\r\n\r\n                    if (!domID) {\r\n                        debugger;\r\n                    }\r\n                    var\r\n                        handler = this.getCacheHandler(domID);\r\n\r\n                    if (handler) {\r\n                        handler.resume();\r\n                    }\r\n                },\r\n                unload: function (domID, keepDom) {\r\n\r\n                    var handler = domID ? this.getCacheHandler(domID) : this.getCurrentHandler();\r\n\r\n                    if (handler) {\r\n                        handler.unload(keepDom);\r\n\r\n                        this.removeCacheHandler(handler.domID);\r\n                    }\r\n                },\r\n\r\n                open: function (options) {\r\n                    if (options.status) {\r\n\r\n                        app.domain.exports('page', options.content);\r\n\r\n                        options.sections = options.page.split(\"#\");\r\n\r\n                        this.load(options);\r\n\r\n                    } else if (options.errorMsg) {\r\n                        app.alert(options.errorMsg, app.alert.ERROR);\r\n                    }\r\n                },\r\n\r\n                getView: function () {\r\n                    return this.tab;\r\n                },\r\n\r\n\r\n                on:function(){\r\n                	this.event.on.apply(this.event,arguments);\r\n                },\r\n	            off:function(){\r\n		            this.event.off.apply(this.event,arguments);\r\n	            },\r\n	            trigger:function(){\r\n		            this.event.trigger.apply(this.event,arguments);\r\n	            }\r\n            };\r\n\r\n            Controller.View = View;\r\n            Controller.Model = Model;\r\n\r\n            return Controller;\r\n        }()"
}}]},{desp:"通信拦截层",children:[{name:"ajax",desp:"异步请求",belongTo:"closure",appJsCode:"app.ajax=function () {\r\n            var _ajax = $.ajax;\r\n\r\n           // $.ajaxSetup({crossDomain: true, xhrFields: {withCredentials: true}});\r\n           // $.support.cors=true;\r\n\r\n            $.ajax = window.auiApp ? function (option) {\r\n                var validateResult,\r\n                    queryString = {},\r\n                    data = {},\r\n                    formData, i, item, items;\r\n\r\n                option = $.extend(true, {\r\n                    type: \"post\",\r\n                    contentType: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                    dataType: \"json\",\r\n                    traditional: true,\r\n                    shelter: false,\r\n                    success: function () {\r\n                    },\r\n                    validate: true\r\n                }, option);\r\n\r\n                //get value and validate\r\n                validateResult = app.validate(option.data, option.validateSuccessCallback, option.validateErrorCallback, option.validateCleanCallback, option.validateContinue, option.validate);\r\n\r\n\r\n                option.data = validateResult.data;\r\n\r\n                if ($.isArray(option.data)) {\r\n                    for (items = option.data, i = items.length; item = items[--i];) {\r\n                        if (item.queryString) {\r\n                            queryString[item.name] = item.value;\r\n                        } else {\r\n                            data[item.name] = item.value;\r\n                        }\r\n                    }\r\n\r\n                    option.data = data;\r\n\r\n                    if (!$.isEmptyObject(queryString)) {\r\n                        option.url += '?' + $.param(queryString);\r\n                    }\r\n                }\r\n\r\n                if (option.ajaxProcessData === false) {\r\n                    try {\r\n                        data = option.data;\r\n                        formData = new FormData();\r\n\r\n                        for (i in data) {\r\n                            if (data.hasOwnProperty(i)) {\r\n                                formData.append(i, data[i]);\r\n                            }\r\n                        }\r\n\r\n                        option.data = formData;\r\n                        option.processData = false;\r\n                        option.contentType = false;\r\n                    } catch (e) {\r\n                        if (window.aweb.error) {\r\n                            app.alert('系统错误 0x03：网络请求失败！', app.alert.ERROR, '0x03');\r\n                        }\r\n                        if (window.aweb.log) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n\r\n                } else if (option.contentType.indexOf('application/json') !== -1) {\r\n                    option.data = JSON.stringify(option.data);\r\n                }\r\n\r\n\r\n                //exec ajax\r\n\r\n                if (validateResult.result) {\r\n                    console && console.log(validateResult.result);\r\n                } else {\r\n                    console.table(validateResult.data);\r\n                }\r\n\r\n                if (option.ajaxNoBlobData === false) {\r\n                    app.alert('模拟下载文件…', app.alert.SUCCESS);\r\n                } else {\r\n                    requestAnimationFrame(function () {\r\n                        option.success({\r\n                            status: true,\r\n                            content: {\r\n                                result: 'auiAjaxTest'\r\n                            }\r\n                        });\r\n\r\n                        if ($.isFunction(option.complete)) {\r\n                            option.complete({}, '', '', '');\r\n                        }\r\n                    });\r\n                }\r\n            } : function (option) {\r\n                var validateResult, url,\r\n                    _error, _success,\r\n\r\n                    queryString = {},\r\n                    urlExternal = [],\r\n                    urlDivider,\r\n\r\n                    data = {},\r\n                    formData,\r\n\r\n                    i, item, items,\r\n                    html,\r\n\r\n                    $iframe, $form,\r\n\r\n	                ctoken, handler, server;\r\n\r\n\r\n                if (!(option && (url = option.url) && !!~url.indexOf('##'))) {\r\n                    option = $.extend(true, {\r\n                        type: \"post\",\r\n                        contentType: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                        dataType: \"json\",\r\n                        traditional: true,\r\n                        shelter: false,\r\n                        urlDivider: '\\/',\r\n                        success: function () {\r\n                        }\r\n                    }, option);\r\n\r\n                    urlDivider = option.urlDivider;\r\n\r\n                    //get value and validate\r\n                    validateResult = app.validate(option.data, option.validateSuccessCallback, option.validateErrorCallback, option.validateCleanCallback, option.validateContinue, option.validate);\r\n\r\n                    if (validateResult.result) {\r\n                        option.data = validateResult.data;\r\n\r\n                        //自定义属性\r\n                        //shelter\r\n                        option.timeout = $.isNumeric(option.timeout) ? option.timeout : 30000;\r\n                        if (option.shelter !== false && option.shelter !== 'false') {\r\n                            app.shelter.show(option.shelter === true ? null : option.shelter, option.timeout);\r\n                        }\r\n\r\n                        //process data\r\n                        if ($.isArray(option.data)) {\r\n                            for (items = option.data, i = items.length; item = items[--i];) {\r\n                                if (item.queryString) {\r\n                                    queryString[item.name] = item.value;\r\n                                } else if (item.urlExternal) {\r\n                                    urlExternal.push(item.value);\r\n                                } else {\r\n                                    data[item.name] = item.value;\r\n                                }\r\n                            }\r\n                            option.data = data;\r\n                        }\r\n\r\n                        //添加token\r\n	                    ctoken=app.getData('ctoken')||window.ctoken;\r\n                        if (ctoken) {\r\n                            option.data = (option.data || {});\r\n                            option.data.ctoken = ctoken;\r\n                        }\r\n\r\n                        if (option.ajaxProcessData === false) {\r\n                            try {\r\n                                data = option.data;\r\n                                formData = new FormData();\r\n\r\n                                for (i in data) {\r\n                                    if (data.hasOwnProperty(i)) {\r\n                                        formData.append(i, data[i]);\r\n                                    }\r\n                                }\r\n\r\n                                option.data = formData;\r\n                                option.processData = false;\r\n                                option.contentType = false;\r\n                            } catch (e) {\r\n                                if (window.aweb.error) {\r\n                                    app.alert('系统错误 0x03：请求数据格式有误！', '0x03');\r\n                                }\r\n                                if (window.aweb.log) {\r\n                                    console.error(e);\r\n                                }\r\n                            }\r\n                        } else if (option.contentType.indexOf('application/json') !== -1) {\r\n                            option.data = JSON.stringify(option.data);\r\n                        }\r\n\r\n\r\n                        //deal url\r\n                        if (urlExternal.length) {\r\n                            urlExternal = urlDivider + urlExternal.join(urlDivider);\r\n                            if (url[url.length - 1] === '?') {\r\n                                url[url.length - 1] = '\\/';\r\n                            }\r\n\r\n                            url += urlExternal;\r\n                        }\r\n\r\n                        if (!$.isEmptyObject(queryString)) {\r\n                            url += (url.indexOf('?') !== -1 ? '' : '?') + $.param(queryString);\r\n                        }\r\n\r\n                        if (!option.server) {\r\n                            handler = app.router && app.router.getCurrentHandler();\r\n                            server = handler && handler.server;\r\n\r\n                            if (server) {\r\n                                option.server = server;\r\n                                option.url = server + url;\r\n                            } else {\r\n                                option.url = url;\r\n                            }\r\n                        } else {\r\n                            option.url = url;\r\n                        }\r\n\r\n                        if (option.ajaxNoBlobData === false) {\r\n                            if (option.ajaxProcessData !== false) {\r\n\r\n                                var iframeName=app.getUID();\r\n\r\n                                $iframe = $('<iframe src=\"about:blank\" name=\"'+ iframeName +'\" style=\"display: none\"/>');\r\n                                $form = $('<form/>');\r\n                                html = [];\r\n                                data = option.data;\r\n\r\n                                $form.attr({\r\n                                    method: option.type,\r\n                                    action: option.url,\r\n                                    target:iframeName\r\n                                });\r\n\r\n                                for (i in data) {\r\n                                    if (data.hasOwnProperty(i)) {\r\n                                        if ($.isArray(data[i])) {\r\n                                            for (items = data[i], i = items.length; item = items[--i];) {\r\n                                                html.push('<input  name=\"' + i + '\" value=\"' + item + '\"/>');\r\n                                            }\r\n                                        } else {\r\n                                            html.push('<input  name=\"' + i + '\" value=\"' + data[i] + '\"/>');\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                $form.append(html.join(''));\r\n                                $iframe.appendTo('body');\r\n                                $form.appendTo($iframe);\r\n\r\n                                $form.submit();\r\n\r\n\r\n                                $iframe.on('load',function(e){\r\n	                                var response;\r\n\r\n                                    try{\r\n	                                    response = e.currentTarget.contentWindow.document.body.innerText;\r\n\r\n	                                    response=JSON.parse(response);\r\n                                    }catch(e){\r\n                                        response={\r\n                                            status:false,\r\n                                            errorMsg:e.message,\r\n                                            content:null\r\n                                        };\r\n                                    }\r\n\r\n	                                option.success(response);\r\n\r\n	                                $iframe && $iframe.remove();\r\n                                });\r\n\r\n                                option.shelter && app.shelter.hide();\r\n                            } else {\r\n                                app.alert('系统错误 0x09：不能同时使用传输返回数据文件流！', app.alert.ERROR, '0x09');\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            //success and error\r\n                            //_complete = option.complete;\r\n                            _error = option.error;\r\n                            _success = option.success;\r\n\r\n                            option.success = function (response) {\r\n                                if (option.shelter !== false && option.shelter !== 'false') {\r\n                                    app.shelter.hide();\r\n                                }\r\n\r\n                                if (response) {\r\n                                    if (response.status) {\r\n                                        _success(response);\r\n                                    } else {\r\n                                        switch (response.errorCode) {\r\n                                            case '100001':\r\n                                                app.modal({\r\n                                                    title: '提示框',\r\n                                                    content: \"会话超时，请重新登录\",\r\n                                                    isLargeModal: false,\r\n                                                    confirmHandler: function () {\r\n                                                        window.location.reload();\r\n                                                    },\r\n                                                    cancelHandler: function () {\r\n                                                        window.location.reload();\r\n                                                    }\r\n                                                });\r\n                                                break;\r\n                                            case '100002':\r\n                                                app.alert('系统错误 0x06：' + response.errorMsg || '字段校验失败！', app.alert.ERROR, '0x06');\r\n\r\n	                                            if(aweb && aweb.error) {\r\n		                                            console.log(response.errorMsg);\r\n	                                            }\r\n                                                break;\r\n                                            default:\r\n                                                _success(response);\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    app.alert('系统错误 0x08：后台服务报错！', app.alert.ERROR, '0x08');\r\n                                }\r\n                            };\r\n                            option.error = function (XMLHttpRequest, textStatus, errorThrown) {\r\n                                var oErr;\r\n\r\n                                if (option.shelter !== false && option.shelter !== 'false') {\r\n                                    app.shelter.hide();\r\n                                }\r\n\r\n                                if (option.ajaxNoBlobData !== false && !option.preventError) {\r\n                                    oErr = XMLHttpRequest.response || XMLHttpRequest.responseText;\r\n                                    try {\r\n                                        oErr = eval('(' + oErr + ')');\r\n                                    } catch (e) {\r\n                                        oErr = {\r\n                                            errorMsg: e.message\r\n                                        }\r\n                                    } finally {\r\n                                        app.alert('系统错误 0x08：后台服务报错！', app.alert.ERROR, '0x08');\r\n                                        _error && _error(XMLHttpRequest, textStatus, errorThrown);\r\n\r\n                                        console.error(oErr);\r\n                                    }\r\n                                }\r\n                            };\r\n\r\n                            return _ajax(option);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n            return $.ajax;\r\n        }()",params:[{name:"option",type:"object",desp:"参数对象",children:[{name:"id",type:"string",desp:"ID",keepType:true,noCompile:true,hidden:true,defaultValue:"%%_INDEX%%",formatter:"replace"},{name:"desp",type:"string",desp:"描述",noCompile:true,keepType:true,formatter:"replace",defaultValue:"自定义事件%%_INDEX%%"},{name:"async",type:"boolean",desp:"异步调用",defaultValue:true},{name:"cache",type:"boolean",desp:"使用数据缓存",defaultValue:true},{name:"url",type:"string",desp:"URL",formatter:"replace",defaultValue:"##%%_INDEX%%-OVERVIEW_URL##",keepType:true,details:"字符串，必需，提交到后台的地址"},{name:"type",type:"string",desp:"传参方式",defaultValue:"POST",keepType:true,details:"字符串，必需，传参方式"},{name:"contentType",type:"string",desp:"传输内容类型",defaultValue:"application/x-www-form-urlencoded;charset=utf-8"},{name:"dataType",type:"string",desp:"返回内容类型",defaultValue:"json"},{name:"traditional",type:"boolean",desp:"使用传统的方式来序列化数据",defaultValue:true},{name:"data",type:"array",desp:"传输数据",details:"传输数据，非必需，提交到后台的数据",defaultValue:""},{name:"jsonp",type:"string",desp:"jsonp请求回调函数名",defaultValue:""},{name:"jsonpCallback",type:"handler",desp:"jsonp请求回调函数",defaultValue:""},{name:"traditional",type:"boolean",desp:"使用传统方式传输数据",defaultValue:true},{name:"username",type:"string",desp:"HTTP 访问认证请求的用户名",defaultValue:""},{name:"password",type:"string",desp:"HTTP 访问认证请求的密码",defaultValue:""},{name:"shelter",type:"string",desp:"遮罩",details:"布尔型或字符串，非必需，当值为false | undefined | null时，不显示遮罩；当为true时，显示遮罩；当为字符串时，显示遮罩和该字符串",defaultValue:""},{name:"validate",type:"boolean",desp:"是否校验",details:"布尔型，非必需，表示是否需要校验",defaultValue:""},{name:"validateSuccessCallback",type:"handler",desp:"校验成功函数",defaultValue:null,details:"函数，非必需，说明见app.validate的successCallback部分"},{name:"validateErrorCallback",type:"handler",desp:"校验失败函数",defaultValue:null,details:"函数，非必需，说明见app.validate的errorCallback部分"},{name:"validateCleanCallback",type:"handler",desp:"清理错误回调函数",defaultValue:null,details:"函数，非必需，说明见app.validate的cleanCallback部分"},{name:"validateContinue",desp:"校验失败后是否继续校验",type:"boolean",defaultValue:true,details:"布尔型，非必需，说明见app.validate的isContitnue部分"},{name:"timeout",domSelector:"ajaxTimeout",type:"number",defaultValue:6e4,desp:"超时时间（ms）",details:"异步请求超时时间，单位毫秒（ms）"},{name:"noAgreeBusData",domSelector:"noAgreeBusData",type:"boolean",defaultValue:true,desp:"非AgreeBus传输协议",details:"默认使用通用传输协议，若关闭该项则使用abusParams:序列化字符串"},{name:"ajaxProcessData",domSelector:"ajaxProcessData",type:"boolean",defaultValue:true,desp:"使用字节流传输数据",details:"默认使用字节流传输数据，如果使用二进制流传输数据，需要上传文件时，应该关闭该项"},{name:"ajaxNoBlobData",domSelector:"ajaxNoBlobData",type:"boolean",defaultValue:true,desp:"使用字节流返回数据",details:"默认使用字节流返回数据，如果返回为文件流（二进制流），应该关闭该项"},{name:"urlDivider",domSelector:"urlDivider",type:"string",defaultValue:"/",desp:"传输参数作为请求路径数据时的分隔符",details:"发起请求时，当传输参数作为路径的一部分时的分隔符"},{name:"beforeSend",type:"handler",desp:"发送请求前回调",defaultValue:"function(XHR){}",details:"函数，非必需",params:[{name:"XHR",type:"object",desp:"XMLHttpRequest 对象"}]},{name:"success",type:"function",desp:"成功回调",defaultValue:"function(response){}",params:[{name:"response",type:"object",desp:"返回对象"}]},{name:"error",type:"function",desp:"失败回调",defaultValue:"function(XHR, textStatus, errorThrown){}",params:[{name:"XHR",type:"object",desp:"XMLHttpRequest 对象"},{name:"textStatus",type:"string",desp:"状态"},{name:"errorThrown",type:"object",desp:"错误对象"}]},{name:"complete",type:"function",desp:"完成回调",defaultValue:"function(XHR, textStatus){}",params:[{name:"XHR",type:"object",desp:"XMLHttpRequest 对象"},{name:"textStatus",type:"string",desp:"状态"}]}],defaultValue:""}],require:{universal:true,mobile:true,agreeBus:true},details:"",hasReturn:false,returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"通信拦截层",edition:{universal:"app.ajax=function () {\r\n            var _ajax = $.ajax;\r\n\r\n           // $.ajaxSetup({crossDomain: true, xhrFields: {withCredentials: true}});\r\n           // $.support.cors=true;\r\n\r\n            $.ajax = window.auiApp ? function (option) {\r\n                var validateResult,\r\n                    queryString = {},\r\n                    data = {},\r\n                    formData, i, item, items;\r\n\r\n                option = $.extend(true, {\r\n                    type: \"post\",\r\n                    contentType: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                    dataType: \"json\",\r\n                    traditional: true,\r\n                    shelter: false,\r\n                    success: function () {\r\n                    },\r\n                    validate: true\r\n                }, option);\r\n\r\n                //get value and validate\r\n                validateResult = app.validate(option.data, option.validateSuccessCallback, option.validateErrorCallback, option.validateCleanCallback, option.validateContinue, option.validate);\r\n\r\n\r\n                option.data = validateResult.data;\r\n\r\n                if ($.isArray(option.data)) {\r\n                    for (items = option.data, i = items.length; item = items[--i];) {\r\n                        if (item.queryString) {\r\n                            queryString[item.name] = item.value;\r\n                        } else {\r\n                            data[item.name] = item.value;\r\n                        }\r\n                    }\r\n\r\n                    option.data = data;\r\n\r\n                    if (!$.isEmptyObject(queryString)) {\r\n                        option.url += '?' + $.param(queryString);\r\n                    }\r\n                }\r\n\r\n                if (option.ajaxProcessData === false) {\r\n                    try {\r\n                        data = option.data;\r\n                        formData = new FormData();\r\n\r\n                        for (i in data) {\r\n                            if (data.hasOwnProperty(i)) {\r\n                                formData.append(i, data[i]);\r\n                            }\r\n                        }\r\n\r\n                        option.data = formData;\r\n                        option.processData = false;\r\n                        option.contentType = false;\r\n                    } catch (e) {\r\n                        if (window.aweb.error) {\r\n                            app.alert('系统错误 0x03：网络请求失败！', app.alert.ERROR, '0x03');\r\n                        }\r\n                        if (window.aweb.log) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n\r\n                } else if (option.contentType.indexOf('application/json') !== -1) {\r\n                    option.data = JSON.stringify(option.data);\r\n                }\r\n\r\n\r\n                //exec ajax\r\n\r\n                if (validateResult.result) {\r\n                    console && console.log(validateResult.result);\r\n                } else {\r\n                    console.table(validateResult.data);\r\n                }\r\n\r\n                if (option.ajaxNoBlobData === false) {\r\n                    app.alert('模拟下载文件…', app.alert.SUCCESS);\r\n                } else {\r\n                    requestAnimationFrame(function () {\r\n                        option.success({\r\n                            status: true,\r\n                            content: {\r\n                                result: 'auiAjaxTest'\r\n                            }\r\n                        });\r\n\r\n                        if ($.isFunction(option.complete)) {\r\n                            option.complete({}, '', '', '');\r\n                        }\r\n                    });\r\n                }\r\n            } : function (option) {\r\n                var validateResult, url,\r\n                    _error, _success,\r\n\r\n                    queryString = {},\r\n                    urlExternal = [],\r\n                    urlDivider,\r\n\r\n                    data = {},\r\n                    formData,\r\n\r\n                    i, item, items,\r\n                    html,\r\n\r\n                    $iframe, $form,\r\n\r\n	                ctoken, handler, server;\r\n\r\n\r\n                if (!(option && (url = option.url) && !!~url.indexOf('##'))) {\r\n                    option = $.extend(true, {\r\n                        type: \"post\",\r\n                        contentType: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n                        dataType: \"json\",\r\n                        traditional: true,\r\n                        shelter: false,\r\n                        urlDivider: '\\/',\r\n                        success: function () {\r\n                        }\r\n                    }, option);\r\n\r\n                    urlDivider = option.urlDivider;\r\n\r\n                    //get value and validate\r\n                    validateResult = app.validate(option.data, option.validateSuccessCallback, option.validateErrorCallback, option.validateCleanCallback, option.validateContinue, option.validate);\r\n\r\n                    if (validateResult.result) {\r\n                        option.data = validateResult.data;\r\n\r\n                        //自定义属性\r\n                        //shelter\r\n                        option.timeout = $.isNumeric(option.timeout) ? option.timeout : 30000;\r\n                        if (option.shelter !== false && option.shelter !== 'false') {\r\n                            app.shelter.show(option.shelter === true ? null : option.shelter, option.timeout);\r\n                        }\r\n\r\n                        //process data\r\n                        if ($.isArray(option.data)) {\r\n                            for (items = option.data, i = items.length; item = items[--i];) {\r\n                                if (item.queryString) {\r\n                                    queryString[item.name] = item.value;\r\n                                } else if (item.urlExternal) {\r\n                                    urlExternal.push(item.value);\r\n                                } else {\r\n                                    data[item.name] = item.value;\r\n                                }\r\n                            }\r\n                            option.data = data;\r\n                        }\r\n\r\n                        //添加token\r\n	                    ctoken=app.getData('ctoken')||window.ctoken;\r\n                        if (ctoken) {\r\n                            option.data = (option.data || {});\r\n                            option.data.ctoken = ctoken;\r\n                        }\r\n\r\n                        if (option.ajaxProcessData === false) {\r\n                            try {\r\n                                data = option.data;\r\n                                formData = new FormData();\r\n\r\n                                for (i in data) {\r\n                                    if (data.hasOwnProperty(i)) {\r\n                                        formData.append(i, data[i]);\r\n                                    }\r\n                                }\r\n\r\n                                option.data = formData;\r\n                                option.processData = false;\r\n                                option.contentType = false;\r\n                            } catch (e) {\r\n                                if (window.aweb.error) {\r\n                                    app.alert('系统错误 0x03：请求数据格式有误！', '0x03');\r\n                                }\r\n                                if (window.aweb.log) {\r\n                                    console.error(e);\r\n                                }\r\n                            }\r\n                        } else if (option.contentType.indexOf('application/json') !== -1) {\r\n                            option.data = JSON.stringify(option.data);\r\n                        }\r\n\r\n\r\n                        //deal url\r\n                        if (urlExternal.length) {\r\n                            urlExternal = urlDivider + urlExternal.join(urlDivider);\r\n                            if (url[url.length - 1] === '?') {\r\n                                url[url.length - 1] = '\\/';\r\n                            }\r\n\r\n                            url += urlExternal;\r\n                        }\r\n\r\n                        if (!$.isEmptyObject(queryString)) {\r\n                            url += (url.indexOf('?') !== -1 ? '' : '?') + $.param(queryString);\r\n                        }\r\n\r\n                        if (!option.server) {\r\n                            handler = app.router && app.router.getCurrentHandler();\r\n                            server = handler && handler.server;\r\n\r\n                            if (server) {\r\n                                option.server = server;\r\n                                option.url = server + url;\r\n                            } else {\r\n                                option.url = url;\r\n                            }\r\n                        } else {\r\n                            option.url = url;\r\n                        }\r\n\r\n                        if (option.ajaxNoBlobData === false) {\r\n                            if (option.ajaxProcessData !== false) {\r\n\r\n                                var iframeName=app.getUID();\r\n\r\n                                $iframe = $('<iframe src=\"about:blank\" name=\"'+ iframeName +'\" style=\"display: none\"/>');\r\n                                $form = $('<form/>');\r\n                                html = [];\r\n                                data = option.data;\r\n\r\n                                $form.attr({\r\n                                    method: option.type,\r\n                                    action: option.url,\r\n                                    target:iframeName\r\n                                });\r\n\r\n                                for (i in data) {\r\n                                    if (data.hasOwnProperty(i)) {\r\n                                        if ($.isArray(data[i])) {\r\n                                            for (items = data[i], i = items.length; item = items[--i];) {\r\n                                                html.push('<input  name=\"' + i + '\" value=\"' + item + '\"/>');\r\n                                            }\r\n                                        } else {\r\n                                            html.push('<input  name=\"' + i + '\" value=\"' + data[i] + '\"/>');\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                $form.append(html.join(''));\r\n                                $iframe.appendTo('body');\r\n                                $form.appendTo($iframe);\r\n\r\n                                $form.submit();\r\n\r\n\r\n                                $iframe.on('load',function(e){\r\n	                                var response;\r\n\r\n                                    try{\r\n	                                    response = e.currentTarget.contentWindow.document.body.innerText;\r\n\r\n	                                    response=JSON.parse(response);\r\n                                    }catch(e){\r\n                                        response={\r\n                                            status:false,\r\n                                            errorMsg:e.message,\r\n                                            content:null\r\n                                        };\r\n                                    }\r\n\r\n	                                option.success(response);\r\n\r\n	                                $iframe && $iframe.remove();\r\n                                });\r\n\r\n                                option.shelter && app.shelter.hide();\r\n                            } else {\r\n                                app.alert('系统错误 0x09：不能同时使用传输返回数据文件流！', app.alert.ERROR, '0x09');\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            //success and error\r\n                            //_complete = option.complete;\r\n                            _error = option.error;\r\n                            _success = option.success;\r\n\r\n                            option.success = function (response) {\r\n                                if (option.shelter !== false && option.shelter !== 'false') {\r\n                                    app.shelter.hide();\r\n                                }\r\n\r\n                                if (response) {\r\n                                    if (response.status) {\r\n                                        _success(response);\r\n                                    } else {\r\n                                        switch (response.errorCode) {\r\n                                            case '100001':\r\n                                                app.modal({\r\n                                                    title: '提示框',\r\n                                                    content: \"会话超时，请重新登录\",\r\n                                                    isLargeModal: false,\r\n                                                    confirmHandler: function () {\r\n                                                        window.location.reload();\r\n                                                    },\r\n                                                    cancelHandler: function () {\r\n                                                        window.location.reload();\r\n                                                    }\r\n                                                });\r\n                                                break;\r\n                                            case '100002':\r\n                                                app.alert('系统错误 0x06：' + response.errorMsg || '字段校验失败！', app.alert.ERROR, '0x06');\r\n\r\n	                                            if(aweb && aweb.error) {\r\n		                                            console.log(response.errorMsg);\r\n	                                            }\r\n                                                break;\r\n                                            default:\r\n                                                _success(response);\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    app.alert('系统错误 0x08：后台服务报错！', app.alert.ERROR, '0x08');\r\n                                }\r\n                            };\r\n                            option.error = function (XMLHttpRequest, textStatus, errorThrown) {\r\n                                var oErr;\r\n\r\n                                if (option.shelter !== false && option.shelter !== 'false') {\r\n                                    app.shelter.hide();\r\n                                }\r\n\r\n                                if (option.ajaxNoBlobData !== false && !option.preventError) {\r\n                                    oErr = XMLHttpRequest.response || XMLHttpRequest.responseText;\r\n                                    try {\r\n                                        oErr = eval('(' + oErr + ')');\r\n                                    } catch (e) {\r\n                                        oErr = {\r\n                                            errorMsg: e.message\r\n                                        }\r\n                                    } finally {\r\n                                        app.alert('系统错误 0x08：后台服务报错！', app.alert.ERROR, '0x08');\r\n                                        _error && _error(XMLHttpRequest, textStatus, errorThrown);\r\n\r\n                                        console.error(oErr);\r\n                                    }\r\n                                }\r\n                            };\r\n\r\n                            return _ajax(option);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n            return $.ajax;\r\n        }()"
}}]},{desp:"便捷操作",children:[{name:"alert",desp:"提示框",belongTo:"closure",params:[{name:"message",type:"string",desp:"提示语句",details:"可以使HTML代码，消息内容，必需",defaultValue:""},{name:"alertType",type:"string_select",desp:"提示类型",details:'有“_DEFAULT"(默认),"SUCCESS"(成功),"ERROR"(错误),"WARNING"(警告),"MESSAGE"(信息)五种类型，使用时许引用app.alert.showType',defaultValue:""},{name:"alertID",type:"string",desp:"提示语句ID",details:"提示语句ID，假如在消息队列中存在相同的ID，则不再重复提示",defaultValue:""}],hasReturn:false,appJsCode:"app.alert=function () {\r\n	        //变量定义\r\n	        var SHOW_TYPE ={\r\n                    SUCCESS: 'success',\r\n                    success: 'fa fa-check-circle alert-success ',\r\n                    _DEFAULT: 'info',\r\n                    info: 'fa fa-info-circle alert-info',\r\n                    ERROR: 'error',\r\n                    error: 'fa fa-warning alert-pink',\r\n                    WARNING: 'warning',\r\n                    warning: 'fa fa-info-circle alert-warning',\r\n                    PINK: 'pink',\r\n                    pink: 'alert-pink',\r\n                    MESSAGE: 'message'\r\n                },\r\n\r\n		        alertCtnTemp = '<ul id=\"alertList\" data-role=\"alertList\" class=\"alert-list unstyled\" style=\"z-index: 8;\"></ul>',\r\n		        alertCttTemp = '<li data-alert-id=\"_id_\"><i class=\"iconfont icon-topbar-close alert-btn\" title=\"关闭\" data-role=\"close\"></i><i class=\"fa fa-angle-down alert-btn\" data-role=\"more\" title=\"更多\"></i><i class=\"alert-icon _showType_\"></i><div class=\"alert-content\" title=\"_title_\">_content_</div></li>',\r\n\r\n\r\n		        alertQueueLength = Math.max(Math.ceil($(window).height() / 100), 3),\r\n		        alertQueue = [],\r\n                alertList=[],\r\n		        type,event,\r\n		        stopClose=false,\r\n\r\n		        $alert = $('#alertList'),\r\n\r\n\r\n		        messageDialog = function () {\r\n			        var queue = [],\r\n				        clickHandler = function () {\r\n					        var msg, result = true;\r\n					        queue.shift();\r\n\r\n					        if (queue.length) {\r\n						        msg = queue[0];\r\n						        while (queue.length && !msg) {\r\n							        queue.shift();\r\n							        msg = queue[0];\r\n						        }\r\n						        if (msg) {\r\n							        $(this).find('[data-role=message]').empty().append(msg.toString().replace(/\\n/g, '<br/>'));\r\n							        result = false;\r\n						        }\r\n					        }\r\n					        return result;\r\n				        };\r\n\r\n			        return function (msg) {\r\n				        var modal;\r\n\r\n				        queue.push(msg);\r\n\r\n				        if (queue.length === 1 && (msg = queue[0])) {\r\n\r\n					        modal = app.modal || window.app && window.app.modal || function (option) {\r\n						        app.alert(option.content);\r\n						        clickHandler();\r\n					        };\r\n\r\n					        modal({\r\n						        title: '信息提示',\r\n						        btnCancel: '关闭',\r\n						        confirmHandler: clickHandler,\r\n						        cancelHandler: clickHandler,\r\n						        content: '<div class=\"aui-ide-modal-content\"><i class=\"iconfont icon-round_warming\"></i><p data-role=\"message\">' + msg.toString().replace(/\\n/g, '<br/>') + '</p></div>',\r\n						        isDialog: true,\r\n						        isLargeModal: false,\r\n						        init: function () {\r\n							        var $body = $(this);\r\n							        setTimeout(function () {\r\n								        $body.prev().find('.close').off().remove();\r\n							        }, 100);\r\n						        }\r\n					        });\r\n\r\n				        }\r\n			        }\r\n		        }(),\r\n\r\n		        addToQueue = function (args) {\r\n			        var i, item, id,\r\n				        result = false;\r\n\r\n			        if (id = args[2]) {\r\n				        for (i = -1; item = alertQueue[++i];) {\r\n					        if (result = (item[2] === id)) {\r\n						        break;\r\n					        }\r\n				        }\r\n			        }\r\n\r\n			        if (!result) {\r\n				        alertQueue.push(args);\r\n			        }\r\n		        },\r\n		        delFormQueue = function () {\r\n			        return alertQueue.shift();\r\n		        },\r\n		        execAlert = function (msg, type, id) {\r\n			        var $item = null,\r\n                        args;\r\n\r\n			        //校验样式在_showType中\r\n			        type = type || SHOW_TYPE._DEFAULT;\r\n\r\n			        if (type === SHOW_TYPE.MESSAGE) {\r\n				        messageDialog(msg+'');\r\n				        console.info(msg);\r\n			        } else {\r\n\r\n\r\n				        msg+='';\r\n\r\n\r\n\r\n				        if ($alert.children().length < alertQueueLength) {\r\n\r\n					        if (!id || !$alert.children('[data-alert-id=\"' + id + '\"]').length) {\r\n\r\n					            //使获取提示框列表时,1键的类型不会被替换成样式名\r\n					            args = JSON.parse(JSON.stringify(arguments));\r\n                                //使获取提示框列表时，即使2键的值为undefined，也不会被忽略\r\n					            if(!args[2]){\r\n                                    args[2] = 'undefined';\r\n                                }\r\n                                alertList.push(args);\r\n\r\n                                type =SHOW_TYPE[type]||SHOW_TYPE.info;\r\n\r\n						        $item = $alert\r\n							        .append(alertCttTemp.replace(/_id_/, id).replace(/_showType_/, type).replace(/_content_/, msg).replace(/_title_/,msg))\r\n							        .children(':last');\r\n\r\n						        $item.attr('title',$item.text());\r\n\r\n						        // //出现\r\n						        setTimeout(function () {\r\n							        $item.addClass('out');\r\n						        }, 50 + Math.random() * 50);\r\n						        // //隐藏\r\n\r\n						       setTimeout(function () {\r\n							        if(!stopClose){\r\n								        $item.removeClass('out');\r\n								        execNextAlert($item);\r\n							        }\r\n						        }, 10000 + Math.random() * 1000);\r\n					        }\r\n				        } else {\r\n					        addToQueue(arguments);\r\n				        }\r\n			        }\r\n		        },\r\n		        execNextAlert = function ($lastElem) {\r\n			        setTimeout(function () {\r\n				        if ($lastElem) {\r\n					        $lastElem.remove();\r\n					        $lastElem = null;\r\n                            alertList.shift();\r\n				        }\r\n				        if (alertQueue.length) {\r\n					        execAlert.apply(this, delFormQueue());\r\n				        }\r\n			        }, 500);\r\n		        },\r\n		        alertFunc = function (msg, showType, id) {\r\n                    event && event.trigger('alert.app',arguments);\r\n			        if (msg instanceof Array) {\r\n				        for (var i = -1, alt; alt = msg[++i];) {\r\n					        if (alt instanceof Array) {\r\n						        execAlert(alt[0], alt[1], alt[2]);\r\n\r\n					        } else {\r\n						        execAlert(alt, showType, id);\r\n					        }\r\n				        }\r\n			        } else {\r\n				        execAlert(msg, showType, id);\r\n			        }\r\n		        };\r\n\r\n\r\n\r\n\r\n	        //初始化数据\r\n	        if (!$alert.length) {\r\n		        $alert = $(alertCtnTemp);\r\n		        $alert.appendTo('body');\r\n	        }\r\n\r\n	        for (type in SHOW_TYPE) {\r\n		        if (SHOW_TYPE.hasOwnProperty(type)) {\r\n			        alertFunc[type] = SHOW_TYPE[type];\r\n		        }\r\n	        }\r\n\r\n\r\n\r\n            alertFunc.closeAll = function(){\r\n                alertQueue = [];\r\n                alertList = [];\r\n                $alert.empty();\r\n            };\r\n\r\n            alertFunc.close = function(option){\r\n                var id ,item,len;\r\n                if(!(option instanceof Object)){\r\n                    console.error('入参必须为对象');\r\n                    return\r\n                }\r\n\r\n                id = option.id;\r\n\r\n                if(id){\r\n                    for(len=alertQueue.length;item=alertQueue[--len];){\r\n                        if((item.length && ~ Array.prototype.indexOf.call(item,id))||item){\r\n                            alertQueue.splice(len,1);\r\n                            break;\r\n                        }\r\n                    }\r\n                    if($alert.children('[data-alert-id='+id+']').length){\r\n                        $('[data-alert-id='+id+']',$alert).remove();\r\n\r\n                    }\r\n                }else{\r\n                    console.error(\"id的值不能为'undefined'\");\r\n                }\r\n            };\r\n\r\n            alertFunc.getAlertList = function(){\r\n                return alertList.concat(alertQueue);\r\n            };\r\n\r\n            alertFunc.listener = function(callback){\r\n                !event && (event = app.dispatcher());\r\n                event.on('alert.app',function(){\r\n                    callback && callback(arguments[1])\r\n                })\r\n            };\r\n\r\n	        //override alert\r\n	        window.alert = messageDialog;\r\n\r\n	        /*监听绑定*/\r\n	        //关闭按钮\r\n	        $alert.off().on('click', function (e) {\r\n		        var $e=$(e.target || window.event.srcElement),\r\n			        $ctt,\r\n			        role=$e.attr('data-role');\r\n\r\n		        switch (role){\r\n			        case 'close':\r\n				        $e.parent().removeClass('out');\r\n\r\n				        execNextAlert($e.parent());\r\n\r\n				        stopClose=false;\r\n				        break;\r\n			        case 'more':\r\n				        $ctt=$e.siblings('.alert-content');\r\n\r\n				        if($e.hasClass('more')){\r\n					        stopClose=false;\r\n					        $ctt.removeClass('more');\r\n				        }else{\r\n					        stopClose=true;\r\n					        $ctt.addClass('more');\r\n				        }\r\n				        $e.toggleClass('more');\r\n\r\n				        break;\r\n		        }\r\n	        });\r\n\r\n	        /*详情请见api部分*/\r\n	        return alertFunc;\r\n	    }()",require:true,details:"",returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.alert=function () {\r\n	        //变量定义\r\n	        var SHOW_TYPE ={\r\n                    SUCCESS: 'success',\r\n                    success: 'fa fa-check-circle alert-success ',\r\n                    _DEFAULT: 'info',\r\n                    info: 'fa fa-info-circle alert-info',\r\n                    ERROR: 'error',\r\n                    error: 'fa fa-warning alert-pink',\r\n                    WARNING: 'warning',\r\n                    warning: 'fa fa-info-circle alert-warning',\r\n                    PINK: 'pink',\r\n                    pink: 'alert-pink',\r\n                    MESSAGE: 'message'\r\n                },\r\n\r\n		        alertCtnTemp = '<ul id=\"alertList\" data-role=\"alertList\" class=\"alert-list unstyled\" style=\"z-index: 8;\"></ul>',\r\n		        alertCttTemp = '<li data-alert-id=\"_id_\"><i class=\"iconfont icon-topbar-close alert-btn\" title=\"关闭\" data-role=\"close\"></i><i class=\"fa fa-angle-down alert-btn\" data-role=\"more\" title=\"更多\"></i><i class=\"alert-icon _showType_\"></i><div class=\"alert-content\" title=\"_title_\">_content_</div></li>',\r\n\r\n\r\n		        alertQueueLength = Math.max(Math.ceil($(window).height() / 100), 3),\r\n		        alertQueue = [],\r\n                alertList=[],\r\n		        type,event,\r\n		        stopClose=false,\r\n\r\n		        $alert = $('#alertList'),\r\n\r\n\r\n		        messageDialog = function () {\r\n			        var queue = [],\r\n				        clickHandler = function () {\r\n					        var msg, result = true;\r\n					        queue.shift();\r\n\r\n					        if (queue.length) {\r\n						        msg = queue[0];\r\n						        while (queue.length && !msg) {\r\n							        queue.shift();\r\n							        msg = queue[0];\r\n						        }\r\n						        if (msg) {\r\n							        $(this).find('[data-role=message]').empty().append(msg.toString().replace(/\\n/g, '<br/>'));\r\n							        result = false;\r\n						        }\r\n					        }\r\n					        return result;\r\n				        };\r\n\r\n			        return function (msg) {\r\n				        var modal;\r\n\r\n				        queue.push(msg);\r\n\r\n				        if (queue.length === 1 && (msg = queue[0])) {\r\n\r\n					        modal = app.modal || window.app && window.app.modal || function (option) {\r\n						        app.alert(option.content);\r\n						        clickHandler();\r\n					        };\r\n\r\n					        modal({\r\n						        title: '信息提示',\r\n						        btnCancel: '关闭',\r\n						        confirmHandler: clickHandler,\r\n						        cancelHandler: clickHandler,\r\n						        content: '<div class=\"aui-ide-modal-content\"><i class=\"iconfont icon-round_warming\"></i><p data-role=\"message\">' + msg.toString().replace(/\\n/g, '<br/>') + '</p></div>',\r\n						        isDialog: true,\r\n						        isLargeModal: false,\r\n						        init: function () {\r\n							        var $body = $(this);\r\n							        setTimeout(function () {\r\n								        $body.prev().find('.close').off().remove();\r\n							        }, 100);\r\n						        }\r\n					        });\r\n\r\n				        }\r\n			        }\r\n		        }(),\r\n\r\n		        addToQueue = function (args) {\r\n			        var i, item, id,\r\n				        result = false;\r\n\r\n			        if (id = args[2]) {\r\n				        for (i = -1; item = alertQueue[++i];) {\r\n					        if (result = (item[2] === id)) {\r\n						        break;\r\n					        }\r\n				        }\r\n			        }\r\n\r\n			        if (!result) {\r\n				        alertQueue.push(args);\r\n			        }\r\n		        },\r\n		        delFormQueue = function () {\r\n			        return alertQueue.shift();\r\n		        },\r\n		        execAlert = function (msg, type, id) {\r\n			        var $item = null,\r\n                        args;\r\n\r\n			        //校验样式在_showType中\r\n			        type = type || SHOW_TYPE._DEFAULT;\r\n\r\n			        if (type === SHOW_TYPE.MESSAGE) {\r\n				        messageDialog(msg+'');\r\n				        console.info(msg);\r\n			        } else {\r\n\r\n\r\n				        msg+='';\r\n\r\n\r\n\r\n				        if ($alert.children().length < alertQueueLength) {\r\n\r\n					        if (!id || !$alert.children('[data-alert-id=\"' + id + '\"]').length) {\r\n\r\n					            //使获取提示框列表时,1键的类型不会被替换成样式名\r\n					            args = JSON.parse(JSON.stringify(arguments));\r\n                                //使获取提示框列表时，即使2键的值为undefined，也不会被忽略\r\n					            if(!args[2]){\r\n                                    args[2] = 'undefined';\r\n                                }\r\n                                alertList.push(args);\r\n\r\n                                type =SHOW_TYPE[type]||SHOW_TYPE.info;\r\n\r\n						        $item = $alert\r\n							        .append(alertCttTemp.replace(/_id_/, id).replace(/_showType_/, type).replace(/_content_/, msg).replace(/_title_/,msg))\r\n							        .children(':last');\r\n\r\n						        $item.attr('title',$item.text());\r\n\r\n						        // //出现\r\n						        setTimeout(function () {\r\n							        $item.addClass('out');\r\n						        }, 50 + Math.random() * 50);\r\n						        // //隐藏\r\n\r\n						       setTimeout(function () {\r\n							        if(!stopClose){\r\n								        $item.removeClass('out');\r\n								        execNextAlert($item);\r\n							        }\r\n						        }, 10000 + Math.random() * 1000);\r\n					        }\r\n				        } else {\r\n					        addToQueue(arguments);\r\n				        }\r\n			        }\r\n		        },\r\n		        execNextAlert = function ($lastElem) {\r\n			        setTimeout(function () {\r\n				        if ($lastElem) {\r\n					        $lastElem.remove();\r\n					        $lastElem = null;\r\n                            alertList.shift();\r\n				        }\r\n				        if (alertQueue.length) {\r\n					        execAlert.apply(this, delFormQueue());\r\n				        }\r\n			        }, 500);\r\n		        },\r\n		        alertFunc = function (msg, showType, id) {\r\n                    event && event.trigger('alert.app',arguments);\r\n			        if (msg instanceof Array) {\r\n				        for (var i = -1, alt; alt = msg[++i];) {\r\n					        if (alt instanceof Array) {\r\n						        execAlert(alt[0], alt[1], alt[2]);\r\n\r\n					        } else {\r\n						        execAlert(alt, showType, id);\r\n					        }\r\n				        }\r\n			        } else {\r\n				        execAlert(msg, showType, id);\r\n			        }\r\n		        };\r\n\r\n\r\n\r\n\r\n	        //初始化数据\r\n	        if (!$alert.length) {\r\n		        $alert = $(alertCtnTemp);\r\n		        $alert.appendTo('body');\r\n	        }\r\n\r\n	        for (type in SHOW_TYPE) {\r\n		        if (SHOW_TYPE.hasOwnProperty(type)) {\r\n			        alertFunc[type] = SHOW_TYPE[type];\r\n		        }\r\n	        }\r\n\r\n\r\n\r\n            alertFunc.closeAll = function(){\r\n                alertQueue = [];\r\n                alertList = [];\r\n                $alert.empty();\r\n            };\r\n\r\n            alertFunc.close = function(option){\r\n                var id ,item,len;\r\n                if(!(option instanceof Object)){\r\n                    console.error('入参必须为对象');\r\n                    return\r\n                }\r\n\r\n                id = option.id;\r\n\r\n                if(id){\r\n                    for(len=alertQueue.length;item=alertQueue[--len];){\r\n                        if((item.length && ~ Array.prototype.indexOf.call(item,id))||item){\r\n                            alertQueue.splice(len,1);\r\n                            break;\r\n                        }\r\n                    }\r\n                    if($alert.children('[data-alert-id='+id+']').length){\r\n                        $('[data-alert-id='+id+']',$alert).remove();\r\n\r\n                    }\r\n                }else{\r\n                    console.error(\"id的值不能为'undefined'\");\r\n                }\r\n            };\r\n\r\n            alertFunc.getAlertList = function(){\r\n                return alertList.concat(alertQueue);\r\n            };\r\n\r\n            alertFunc.listener = function(callback){\r\n                !event && (event = app.dispatcher());\r\n                event.on('alert.app',function(){\r\n                    callback && callback(arguments[1])\r\n                })\r\n            };\r\n\r\n	        //override alert\r\n	        window.alert = messageDialog;\r\n\r\n	        /*监听绑定*/\r\n	        //关闭按钮\r\n	        $alert.off().on('click', function (e) {\r\n		        var $e=$(e.target || window.event.srcElement),\r\n			        $ctt,\r\n			        role=$e.attr('data-role');\r\n\r\n		        switch (role){\r\n			        case 'close':\r\n				        $e.parent().removeClass('out');\r\n\r\n				        execNextAlert($e.parent());\r\n\r\n				        stopClose=false;\r\n				        break;\r\n			        case 'more':\r\n				        $ctt=$e.siblings('.alert-content');\r\n\r\n				        if($e.hasClass('more')){\r\n					        stopClose=false;\r\n					        $ctt.removeClass('more');\r\n				        }else{\r\n					        stopClose=true;\r\n					        $ctt.addClass('more');\r\n				        }\r\n				        $e.toggleClass('more');\r\n\r\n				        break;\r\n		        }\r\n	        });\r\n\r\n	        /*详情请见api部分*/\r\n	        return alertFunc;\r\n	    }()"}},{name:"behavior",desp:"行为接口",belongTo:"closure",require:true,params:[{name:"input1",desp:"输入值",details:'输入值一般从组件中获取,比较类型：小于、大于时：数字；等于、不等于时：字符串、数字、对象、数组、null；包含、不包含时：字符串、数组、对象；其中数组的格式为[1,2,3,"a","b","c"]，对象格式为{"a":1,"b":[],"c":"abc"}',type:"string",defaultValue:""},{name:"input2",desp:"比较值",details:'比较类型：小于、大于时：数字；等于、不等于时：字符串、数字、对象、数组、null；包含、不包含时：字符串、数组、对象；其中数组的格式为[1,2,3,"a","b","c"]，对象格式为{"a":1,"b":[],"c":"abc"}',type:"string",defaultValue:""},{desp:"比较条件",name:"condition",details:'比较字段值和输入值返回结果。例如：\n小于：字段值0，比较值1，返回true；\n等于：字段值0，比较值1，返回false；\n不等于：字段值：1，比较值2，返回true；\n包含：字段值"abc"，比较值"startabc"，返回true；\n字段值"a"，比较值[1,2,]，返回true；\n开头：字段值"abc"，比较值"abcd"，返回true；',type:"string",defaultValue:""},{desp:"回调函数",name:"callback",defaultValue:"function(result,input1,input2,condition){}",details:"将比较结果（result）、输入值（input1）、比较值（input2）、比较条件（condition）传个回调函数，进行处理",type:"handler"}],hasReturn:false,appJsCode:"app.behavior=function () {\r\n            var _b = function (input1, input2, condition, callback) {\r\n                var _input2, result;\r\n\r\n                input2 = decodeURIComponent(input2);\r\n                _input2 = input2;\r\n                try {\r\n                    input2 = JSON.parse(input2);\r\n                } catch (e) {\r\n                    input2 = _input2;\r\n                }\r\n\r\n                switch (condition) {\r\n                    case 'lt':\r\n                        result = (input1 < input2);\r\n                        break;\r\n                    case 'eq':\r\n                        result = (input1 === input2);\r\n                        break;\r\n                    case 'gt':\r\n                        result = (input1 > input2);\r\n                        break;\r\n                    case 'not':\r\n                        result = (input1 !== input2);\r\n                        break;\r\n                    case 'includes':\r\n                    case 'notIncludes':\r\n                        if (input2 instanceof Array) {\r\n                            result = ($.inArray(input1, input2) !== -1);\r\n                        } else if (input2 instanceof Object) {\r\n                            result = (input1 in input2);\r\n                        } else {\r\n                            result = input2 && (input2.toString().indexOf(input1) !== -1);\r\n                        }\r\n\r\n                        if (condition === 'notIncludes') {\r\n                            result = !result;\r\n                        }\r\n                        break;\r\n                    case 'startsWith':\r\n                        result = input2 && (input2.toString().indexOf(input1) === 0);\r\n                        break;\r\n                }\r\n\r\n                callback && callback(result, input1, input2, condition);\r\n            };\r\n\r\n            _b.LESS_THAN = 'lt';\r\n            _b.EQUAL = 'eq';\r\n            _b.GREAT_THAN = 'gt';\r\n            _b.NOT = 'not';\r\n            _b.INCLUDES = 'inclues';\r\n            _b.NOT_INCLUDES = 'notInclues';\r\n            _b.STARTS_WITH = 'startsWith';\r\n\r\n            return _b;\r\n        }()",details:"",returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.behavior=function () {\r\n            var _b = function (input1, input2, condition, callback) {\r\n                var _input2, result;\r\n\r\n                input2 = decodeURIComponent(input2);\r\n                _input2 = input2;\r\n                try {\r\n                    input2 = JSON.parse(input2);\r\n                } catch (e) {\r\n                    input2 = _input2;\r\n                }\r\n\r\n                switch (condition) {\r\n                    case 'lt':\r\n                        result = (input1 < input2);\r\n                        break;\r\n                    case 'eq':\r\n                        result = (input1 === input2);\r\n                        break;\r\n                    case 'gt':\r\n                        result = (input1 > input2);\r\n                        break;\r\n                    case 'not':\r\n                        result = (input1 !== input2);\r\n                        break;\r\n                    case 'includes':\r\n                    case 'notIncludes':\r\n                        if (input2 instanceof Array) {\r\n                            result = ($.inArray(input1, input2) !== -1);\r\n                        } else if (input2 instanceof Object) {\r\n                            result = (input1 in input2);\r\n                        } else {\r\n                            result = input2 && (input2.toString().indexOf(input1) !== -1);\r\n                        }\r\n\r\n                        if (condition === 'notIncludes') {\r\n                            result = !result;\r\n                        }\r\n                        break;\r\n                    case 'startsWith':\r\n                        result = input2 && (input2.toString().indexOf(input1) === 0);\r\n                        break;\r\n                }\r\n\r\n                callback && callback(result, input1, input2, condition);\r\n            };\r\n\r\n            _b.LESS_THAN = 'lt';\r\n            _b.EQUAL = 'eq';\r\n            _b.GREAT_THAN = 'gt';\r\n            _b.NOT = 'not';\r\n            _b.INCLUDES = 'inclues';\r\n            _b.NOT_INCLUDES = 'notInclues';\r\n            _b.STARTS_WITH = 'startsWith';\r\n\r\n            return _b;\r\n        }()"}},{name:"deepClone",desp:"深克隆",appJsCode:"app.deepClone=function (obj) {\r\n            function _clone(obj) {\r\n                var newObj;\r\n                if (typeof obj === 'string') {\r\n                    //字符串\r\n                    newObj = '' + obj;\r\n                } else if ($.isArray(obj)) {\r\n                    //数组\r\n                    newObj = $.map(obj, function (elem) {\r\n                        return _clone(elem);\r\n                    });\r\n                } else if (typeof obj === 'object') {\r\n                    //对象\r\n                    newObj = {};\r\n                    for (var name in obj) {\r\n                        if (obj[name] instanceof Function) {\r\n                            newObj[name] = obj[name];\r\n                        } else {\r\n                            newObj[name] = _clone(obj[name]);\r\n                        }\r\n                    }\r\n                } else {\r\n                    newObj = obj;\r\n                }\r\n\r\n                return newObj;\r\n            }\r\n\r\n            return _clone(obj);\r\n        }",require:true,params:[{name:"object",desp:"待克隆对象",type:"object",defaultValue:""}],hasReturn:true,returnValue:{name:"deepClonedObject",type:"object",desp:"深克隆对象",details:"",defaultValue:""},details:"",belongTo:"function",_belongTo:"便捷操作",edition:{universal:"app.deepClone=function (obj) {\r\n            function _clone(obj) {\r\n                var newObj;\r\n                if (typeof obj === 'string') {\r\n                    //字符串\r\n                    newObj = '' + obj;\r\n                } else if ($.isArray(obj)) {\r\n                    //数组\r\n                    newObj = $.map(obj, function (elem) {\r\n                        return _clone(elem);\r\n                    });\r\n                } else if (typeof obj === 'object') {\r\n                    //对象\r\n                    newObj = {};\r\n                    for (var name in obj) {\r\n                        if (obj[name] instanceof Function) {\r\n                            newObj[name] = obj[name];\r\n                        } else {\r\n                            newObj[name] = _clone(obj[name]);\r\n                        }\r\n                    }\r\n                } else {\r\n                    newObj = obj;\r\n                }\r\n\r\n                return newObj;\r\n            }\r\n\r\n            return _clone(obj);\r\n        }"}},{name:"eval",require:true,desp:"将函数字符串转化成可执行函数，并将代码的作用域限定在闭包中",appJsCode:"app.eval=function (str) {\r\n\r\n            var func;\r\n\r\n            eval('func=' + str.replace('_parseFunction_', ''));\r\n\r\n            return func;\r\n        }",hasReturn:true,params:[{name:"functionString",defaultValue:"function(key){console.log(key);}",desp:"JavaScript函数字符串",type:"string"}],returnValue:{name:"func",type:"function",desp:"转义后的代码",details:"",defaultValue:""},details:"",belongTo:"function",_belongTo:"便捷操作",edition:{universal:"app.eval=function (str) {\r\n\r\n            var func;\r\n\r\n            eval('func=' + str.replace('_parseFunction_', ''));\r\n\r\n            return func;\r\n        }"}},{require:true,name:"getUID",desp:"获取唯一的ID",appJsCode:'app.getUID=function () {\r\n            var sId = "",\r\n                i = 24;\r\n            for (; i--;) {\r\n                sId += Math.floor(Math.random() * 16.0).toString(16).toUpperCase();\r\n                if (i == 4) {\r\n                    sId += "-";\r\n                }\r\n            }\r\n            return sId;\r\n        }',hasReturn:true,returnValue:{name:"uid",type:"string",desp:"唯一的ID",defaultValue:"87C0D1E26342B2A334DB-FC8D",details:""},details:"",belongTo:"function",_belongTo:"便捷操作",edition:{universal:'app.getUID=function () {\r\n            var sId = "",\r\n                i = 24;\r\n            for (; i--;) {\r\n                sId += Math.floor(Math.random() * 16.0).toString(16).toUpperCase();\r\n                if (i == 4) {\r\n                    sId += "-";\r\n                }\r\n            }\r\n            return sId;\r\n        }'}},{require:true,name:"stringify",desp:"将JavaScript对象转化成字符串，并将函数、对象序列化",appJsCode:"app.stringify=function (config) {\r\n            function functionStringify(obj) {\r\n                if (obj !== undefined && typeof (obj) === \"object\") {\r\n                    var newObj = (obj instanceof Array) ? [] : {},\r\n                        i = 0;\r\n\r\n                    for (var name in obj) {\r\n                        i++;\r\n                        if (obj[name] instanceof Function) {\r\n                            newObj[name] = '_parseFunction_' + obj[name].toString()\r\n                                .replace(/(\\/\\/[^\\n\\r]+)/g, '') //将行注释都抹掉\r\n                                .replace(/[\\n\\r\\t]/g, '').replace(/(\\s)+/g, ' ')\r\n                                .replace(/\\\\([ntrs\\-\\_])/g, '\\\\\\\\$1')\r\n                                .replace(/(?:\\/{2,}.*?[\\r\\n])|(?:\\/\\*.*?\\*\\/)/g, '');\r\n                            //.replace(/\\+/g, '##plus##');\r\n                        } else {\r\n                            newObj[name] = obj[name] && functionStringify(obj[name]);\r\n                        }\r\n                    }\r\n                    if (!i) {\r\n                        newObj = obj;\r\n                    }\r\n                    return newObj;\r\n                } else {\r\n                    return obj;\r\n                }\r\n            }\r\n\r\n            return config ? JSON.stringify(functionStringify(config)) : '';\r\n        }",params:[{name:"object",desp:"必需，JavaScript对象",type:"object",children:[{name:"key1",desp:"键名1",type:"string",defaultValue:"value1"},{name:"key2",desp:"键名2",type:"boolean",defaultValue:true},{name:"key3",desp:"键名3",type:"array",defaultValue:[]},{name:"key4",desp:"键名4",type:"object",defaultValue:{}}],defaultValue:""}],hasReturn:true,returnValue:{name:"result",type:"string",desp:"将JavaScript对象序列化后的结果",defaultValue:'\'{"key1":"value1","key2":true,"key3":[],"key4":{}}\'',details:""},details:"",belongTo:"function",_belongTo:"便捷操作",edition:{universal:"app.stringify=function (config) {\r\n            function functionStringify(obj) {\r\n                if (obj !== undefined && typeof (obj) === \"object\") {\r\n                    var newObj = (obj instanceof Array) ? [] : {},\r\n                        i = 0;\r\n\r\n                    for (var name in obj) {\r\n                        i++;\r\n                        if (obj[name] instanceof Function) {\r\n                            newObj[name] = '_parseFunction_' + obj[name].toString()\r\n                                .replace(/(\\/\\/[^\\n\\r]+)/g, '') //将行注释都抹掉\r\n                                .replace(/[\\n\\r\\t]/g, '').replace(/(\\s)+/g, ' ')\r\n                                .replace(/\\\\([ntrs\\-\\_])/g, '\\\\\\\\$1')\r\n                                .replace(/(?:\\/{2,}.*?[\\r\\n])|(?:\\/\\*.*?\\*\\/)/g, '');\r\n                            //.replace(/\\+/g, '##plus##');\r\n                        } else {\r\n                            newObj[name] = obj[name] && functionStringify(obj[name]);\r\n                        }\r\n                    }\r\n                    if (!i) {\r\n                        newObj = obj;\r\n                    }\r\n                    return newObj;\r\n                } else {\r\n                    return obj;\r\n                }\r\n            }\r\n\r\n            return config ? JSON.stringify(functionStringify(config)) : '';\r\n        }"
}},{require:true,name:"parseJSObject",desp:"将对象字符串转化成JavaScript对象",appJsCode:"app.parseJSObject=function (JSONString) {\r\n            function parseFunc(obj) {\r\n                for (var name in obj) {\r\n                    if (typeof (obj[name]) === 'string') {\r\n                        if (obj[name].indexOf('_parseObject_') === 0) {\r\n                            obj[name] = JSON.parse(obj[name].replace(/_parseObject_/, ''));\r\n                        } else if (obj[name].indexOf('_parseFunction_') === 0) {\r\n                            obj[name] = eval('(' + obj[name].replace(/_parseFunction_/, '') /*.replace(/##plus##/g, '+')*/ + ')');\r\n                        }\r\n                    } else if (typeof (obj[name]) === 'object') {\r\n                        obj[name] = parseFunc(obj[name]);\r\n                    }\r\n                }\r\n                return obj;\r\n            }\r\n\r\n            return JSONString ? parseFunc(JSON.parse(JSONString)) : null;\r\n        }",params:[{name:"objectString",desp:"JavaScript函数字符串",type:"string",defaultValue:'\'{"key1":"value1","key2":true,"key3":[],"key4":{}}\''}],hasReturn:true,returnValue:{name:"result",type:"object",desp:"将JavaScript对象序列化后的结果",children:[{name:"key1",desp:"键名1",type:"string",defaultValue:"value1",details:""},{name:"key2",desp:"键名2",type:"boolean",defaultValue:true,details:""},{name:"key3",desp:"键名3",type:"array",defaultValue:[],details:""},{name:"key4",desp:"键名4",type:"object",defaultValue:{},details:""}],details:"",defaultValue:""},details:"",belongTo:"function",_belongTo:"便捷操作",edition:{universal:"app.parseJSObject=function (JSONString) {\r\n            function parseFunc(obj) {\r\n                for (var name in obj) {\r\n                    if (typeof (obj[name]) === 'string') {\r\n                        if (obj[name].indexOf('_parseObject_') === 0) {\r\n                            obj[name] = JSON.parse(obj[name].replace(/_parseObject_/, ''));\r\n                        } else if (obj[name].indexOf('_parseFunction_') === 0) {\r\n                            obj[name] = eval('(' + obj[name].replace(/_parseFunction_/, '') /*.replace(/##plus##/g, '+')*/ + ')');\r\n                        }\r\n                    } else if (typeof (obj[name]) === 'object') {\r\n                        obj[name] = parseFunc(obj[name]);\r\n                    }\r\n                }\r\n                return obj;\r\n            }\r\n\r\n            return JSONString ? parseFunc(JSON.parse(JSONString)) : null;\r\n        }"}},{require:true,name:"position",desp:"获取鼠标事件的定位",appJsCode:"app.position=function (event, $container, $content, fixTop, fixLeft) {\r\n            return {\r\n                top: Math.max((($container.height() > $content.height() + event.clientY) ? event.clientY : (event.clientY - $content.height())) - (fixTop || 0), 0),\r\n                left: Math.max((($container.width() > $content.width() + event.clientX) ? event.clientX : (event.clientX - $content.width())) - (fixLeft || 0), 0)\r\n            };\r\n        }",params:[{name:"event",type:"object",desp:"事件对象",details:"事件对象，鼠标监听事件的参数，必需",defaultValue:""},{name:"$container",type:"jQuery",desp:"鼠标容器的JQuery对象",details:"鼠标容器的JQuery对象，必需",defaultValue:""},{name:"$content",type:"jQuery",desp:"鼠标点击的直接容器的jQuery对象",details:"鼠标点击的直接容器的jQuery对象，必需",defaultValue:""},{name:"fixTop",type:"number",desp:"向上修正的数值",details:"数值型，向上修正的数值，缺省值0，非必需",defaultValue:0},{name:"fixLeft",type:"number",desp:"向左修正的数值",details:"数值型，向左修正的数值，缺省值0，非必需",defaultValue:0}],hasReturn:true,returnValue:{name:"pointer",type:"object",desp:"坐标",children:[{name:"top",type:"number",desp:"$content相对于$container顶部的位置",details:"",defaultValue:""},{name:"left",type:"number",desp:"$content相对于$container左侧的位置",details:"",defaultValue:""}],details:"",defaultValue:""},details:"",belongTo:"function",_belongTo:"便捷操作",edition:{universal:"app.position=function (event, $container, $content, fixTop, fixLeft) {\r\n            return {\r\n                top: Math.max((($container.height() > $content.height() + event.clientY) ? event.clientY : (event.clientY - $content.height())) - (fixTop || 0), 0),\r\n                left: Math.max((($container.width() > $content.width() + event.clientX) ? event.clientX : (event.clientX - $content.width())) - (fixLeft || 0), 0)\r\n            };\r\n        }"}},{name:"reset",desp:"重置表单",details:"将表单内的表单元素的值设置为空或清除选中。弃用接口，不建议使用",appJsCode:"app.reset=function ($form,auiCtx) {\r\n            var $inputs = $(\"[id]\",$form),\r\n                i,item,domId,ins,\r\n                variables = auiCtx && auiCtx.variables,\r\n                $item,$checkedItem, $inputItem;\r\n\r\n            if(variables && (i=$inputs.length)){\r\n                for(;item =$inputs[--i];){\r\n                    ins = variables[item.id];\r\n                    if(ins && $.isFunction(ins.resetValue)){\r\n                        ins.resetValue();\r\n                    }\r\n                }\r\n            }else if($inputs.length){\r\n                for(i=-1;item = $inputs[++i];) {\r\n                    $item = $(':input,img,.text-div,.wangEditor-txt', item).not(':button, :submit, :reset,:disabled');\r\n                    $inputItem = $(':input', item).not(':radio,:checkbox');\r\n                    $checkedItem = $(':checked', item).not(':disabled');\r\n\r\n                    $inputItem.length && $inputItem.val('').removeAttr('selected');\r\n                    $checkedItem.length && $checkedItem.removeAttr('checked');\r\n\r\n                }\r\n            }\r\n\r\n        }",hasReturn:false,params:[{name:"$form",type:"jQuery",desp:"表单容器的jQuery对象",details:"必需，表示表单容器的jQuery对象",defaultValue:""},{name:"auiCtx",type:"object",desp:"页面上下文",details:"必需，就填auiCtx这个对象，表示页面的上下文",defaultValue:""}],belongTo:"function",returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.reset=function ($form,auiCtx) {\r\n            var $inputs = $(\"[id]\",$form),\r\n                i,item,domId,ins,\r\n                variables = auiCtx && auiCtx.variables,\r\n                $item,$checkedItem, $inputItem;\r\n\r\n            if(variables && (i=$inputs.length)){\r\n                for(;item =$inputs[--i];){\r\n                    ins = variables[item.id];\r\n                    if(ins && $.isFunction(ins.resetValue)){\r\n                        ins.resetValue();\r\n                    }\r\n                }\r\n            }else if($inputs.length){\r\n                for(i=-1;item = $inputs[++i];) {\r\n                    $item = $(':input,img,.text-div,.wangEditor-txt', item).not(':button, :submit, :reset,:disabled');\r\n                    $inputItem = $(':input', item).not(':radio,:checkbox');\r\n                    $checkedItem = $(':checked', item).not(':disabled');\r\n\r\n                    $inputItem.length && $inputItem.val('').removeAttr('selected');\r\n                    $checkedItem.length && $checkedItem.removeAttr('checked');\r\n\r\n                }\r\n            }\r\n\r\n        }"}},{require:true,name:"screen",desp:"视图监听类",appJsCode:"app.screen=function () {\r\n            var full = {},\r\n                resizeHandlerList = {},\r\n                globalResizeHandlerList = {},\r\n                resizeTimeout;\r\n\r\n            function resize() {\r\n                window.clearTimeout(resizeTimeout);\r\n                resizeTimeout = window.setTimeout(function () {\r\n                    var uid,\r\n                        _app = window.app || app;\r\n                    for (uid in globalResizeHandlerList) {\r\n                        if (globalResizeHandlerList[uid].timeout) {\r\n                            window.setTimeout(globalResizeHandlerList[uid].callback, globalResizeHandlerList[uid].timeout);\r\n                        } else {\r\n                            globalResizeHandlerList[uid].callback && globalResizeHandlerList[uid].callback();\r\n                        }\r\n                    }\r\n\r\n\r\n                    _app.router && _app.router.getCurrentHandler && (uid = _app.router.getCurrentHandler()) && (uid = uid.uid);\r\n\r\n                    if (uid && (uid = resizeHandlerList[uid])) {\r\n                        if (uid.timeout) {\r\n                            window.setTimeout(uid.callback);\r\n                        } else {\r\n                            uid.callback && uid.callback();\r\n                        }\r\n                    }\r\n                    uid = null;\r\n                }, 100);\r\n            }\r\n\r\n            full.addResizeHandler = function (options) {\r\n\r\n                if (options && options.uid && options.callback) {\r\n                    if (options.isGlobal) {\r\n                        globalResizeHandlerList[options.uid] = {\r\n                            callback: options.callback,\r\n                            timeout: options.timeout || 0\r\n                        };\r\n                    } else {\r\n                        resizeHandlerList[options.uid] = {\r\n                            callback: options.callback,\r\n                            timeout: options.timeout || 0\r\n                        };\r\n                    }\r\n                }\r\n            };\r\n            full.removeResizeHandler = function (uid, isGlobal) {\r\n                if (uid) {\r\n                    if (isGlobal) {\r\n                        globalResizeHandlerList[uid] = null;\r\n                        delete globalResizeHandlerList[uid];\r\n                    } else {\r\n                        resizeHandlerList[uid] = null;\r\n                        delete resizeHandlerList[uid];\r\n                    }\r\n                }\r\n            };\r\n            full.triggerResizeHandler = function (uid, isGlobal) {\r\n                if (uid) {\r\n                    if (isGlobal) {\r\n                        if (uid = globalResizeHandlerList[uid]) {\r\n                            uid.callback && uid.callback();\r\n                        }\r\n                    } else if (uid = resizeHandlerList[uid]) {\r\n                        uid.callback && uid.callback();\r\n                    }\r\n                }\r\n            };\r\n\r\n            $(window).resize(resize);\r\n\r\n\r\n            return full;\r\n        }()",belongTo:"class",cInterfaces:[{name:"addResizeHandler",desp:"添加窗口大小变化监听事件",hasReturn:false,params:[{name:"options",desp:"选项",type:"object",children:[{name:"uid",desp:"唯一的id",type:"string",details:"如果可以isGlobal=true，uid可以通过app.getUID()获取，否则则等于某个页面内的handler.domID，必需",overviewType:"default",defaultValue:""},{name:"isGlobal",type:"boolean",desp:"整个页面框架起作用",details:"布尔型，是否是整个页面框架起作用，如果在某个页面起作用的话，则为false，必需",overviewType:"default",defaultValue:""},{name:"timeout",desp:"延迟",type:"number",defaultValue:0,details:"数字型，窗口大小改变之后，延迟多少毫秒执行，缺省值0，即一旦窗口大小改变立即执行，非必需",overviewType:"default"},{name:"callback",desp:"回调函数",type:"handler",details:"函数，窗口大小改变后执行，必需",overviewType:"default",defaultValue:""}],overviewType:"default",defaultValue:""}],details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"triggerResizeHandler",desp:"模拟触发触发窗口大小变化事件",hasReturn:false,params:[{name:"uid",desp:"唯一的id",type:"string",details:"如果可以isGlobal=true，uid可以通过app.getUID()获取，否则则等于某个页面内的handler.domID，必需",overviewType:"default",defaultValue:""},{name:"isGlobal",type:"boolean",desp:"整个页面框架起作用",details:"布尔型，是否是整个页面框架起作用，如果在某个页面起作用的话，则为false，必需",overviewType:"default",defaultValue:""}],details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"removeResizeHandler",desp:"移除窗口大小变化回调",hasReturn:false,params:[{name:"uid",desp:"唯一的id",type:"string",details:"如果可以isGlobal=true，uid可以通过app.getUID()获取，否则则等于某个页面内的handler.domID，必需",overviewType:"default",defaultValue:""},{name:"isGlobal",type:"boolean",desp:"整个页面框架起作用",details:"布尔型，是否是整个页面框架起作用，如果在某个页面起作用的话，则为false，必需",overviewType:"default",defaultValue:""}],details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}}],details:"",hasReturn:false,returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.screen=function () {\r\n            var full = {},\r\n                resizeHandlerList = {},\r\n                globalResizeHandlerList = {},\r\n                resizeTimeout;\r\n\r\n            function resize() {\r\n                window.clearTimeout(resizeTimeout);\r\n                resizeTimeout = window.setTimeout(function () {\r\n                    var uid,\r\n                        _app = window.app || app;\r\n                    for (uid in globalResizeHandlerList) {\r\n                        if (globalResizeHandlerList[uid].timeout) {\r\n                            window.setTimeout(globalResizeHandlerList[uid].callback, globalResizeHandlerList[uid].timeout);\r\n                        } else {\r\n                            globalResizeHandlerList[uid].callback && globalResizeHandlerList[uid].callback();\r\n                        }\r\n                    }\r\n\r\n\r\n                    _app.router && _app.router.getCurrentHandler && (uid = _app.router.getCurrentHandler()) && (uid = uid.uid);\r\n\r\n                    if (uid && (uid = resizeHandlerList[uid])) {\r\n                        if (uid.timeout) {\r\n                            window.setTimeout(uid.callback);\r\n                        } else {\r\n                            uid.callback && uid.callback();\r\n                        }\r\n                    }\r\n                    uid = null;\r\n                }, 100);\r\n            }\r\n\r\n            full.addResizeHandler = function (options) {\r\n\r\n                if (options && options.uid && options.callback) {\r\n                    if (options.isGlobal) {\r\n                        globalResizeHandlerList[options.uid] = {\r\n                            callback: options.callback,\r\n                            timeout: options.timeout || 0\r\n                        };\r\n                    } else {\r\n                        resizeHandlerList[options.uid] = {\r\n                            callback: options.callback,\r\n                            timeout: options.timeout || 0\r\n                        };\r\n                    }\r\n                }\r\n            };\r\n            full.removeResizeHandler = function (uid, isGlobal) {\r\n                if (uid) {\r\n                    if (isGlobal) {\r\n                        globalResizeHandlerList[uid] = null;\r\n                        delete globalResizeHandlerList[uid];\r\n                    } else {\r\n                        resizeHandlerList[uid] = null;\r\n                        delete resizeHandlerList[uid];\r\n                    }\r\n                }\r\n            };\r\n            full.triggerResizeHandler = function (uid, isGlobal) {\r\n                if (uid) {\r\n                    if (isGlobal) {\r\n                        if (uid = globalResizeHandlerList[uid]) {\r\n                            uid.callback && uid.callback();\r\n                        }\r\n                    } else if (uid = resizeHandlerList[uid]) {\r\n                        uid.callback && uid.callback();\r\n                    }\r\n                }\r\n            };\r\n\r\n            $(window).resize(resize);\r\n\r\n\r\n            return full;\r\n        }()"}},{require:true,name:"scrollTop",desp:"滚动至父容器顶部",appJsCode:"app.scrollTop=function ($container, $content, speed, marginTop) {\r\n            var cttOffset = $content.offset(),\r\n                ctnOffset = $container.offset();\r\n            if (ctnOffset && cttOffset) {\r\n                marginTop = marginTop ? parseInt(marginTop) : 0;\r\n                $container.animate({\r\n                    scrollTop: cttOffset.top + $container.scrollTop() - ctnOffset.top - marginTop\r\n                }, speed || 200);\r\n            }\r\n        }",hasReturn:false,params:[{name:"$container",type:"jQuery",desp:"可滚动的容器jQuery对象",details:"可滚动的容器jQuery对象，必需",defaultValue:""},{name:"$content",type:"jQuery",desp:"需要滚动到顶部的jQuery对象",details:"需要滚动到顶部的jQuery对象，必需；其中$content必需在$container内",defaultValue:""},{name:"speed",type:"number",desp:"滚动速度",details:"滚动速度，单位毫秒，缺省值200，非必需",defaultValue:200},{name:"marginTop",type:"number",desp:"在滚动上还需要移动的高度",details:"数值型，必需大于0，在滚动上，还需要移动的高度，缺省值0，非必需",defaultValue:0}],details:"",belongTo:"function",returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.scrollTop=function ($container, $content, speed, marginTop) {\r\n            var cttOffset = $content.offset(),\r\n                ctnOffset = $container.offset();\r\n            if (ctnOffset && cttOffset) {\r\n                marginTop = marginTop ? parseInt(marginTop) : 0;\r\n                $container.animate({\r\n                    scrollTop: cttOffset.top + $container.scrollTop() - ctnOffset.top - marginTop\r\n                }, speed || 200);\r\n            }\r\n        }"}},{require:true,name:"hsla",desp:"生成随机颜色",appJsCode:"app.hsla=function () {\r\n            var css = function (opt, random) {\r\n                var $elem = $('<div>'),\r\n                    targetCSS = 'background-color',\r\n                    css;\r\n\r\n                opt = $.extend(opt, this.defaltOptions);\r\n\r\n                $elem.css(targetCSS, 'hsl(' + [(random ? Math.floor(Math.random() * 361) : opt.h), opt.s, opt.l].join(',') + ')');\r\n\r\n                css = $elem.css(targetCSS).toString();\r\n\r\n                if (jQuery.support.opacity) {\r\n                    return css.replace('rgb', 'rgba').replace(')', ',' + opt.a + ')');\r\n                }\r\n                return css;\r\n            };\r\n            css._default = {\r\n                h: Math.floor(Math.random() * 361),\r\n                s: '50%',\r\n                l: '50%',\r\n                a: 1\r\n            };\r\n\r\n            return css;\r\n        }()",belongTo:"closure",params:[{name:"option",type:"object",desp:"选项",children:[{name:"h",type:"number",desp:"颜色值",details:"整型，非必需，表示需要生成颜色的值，范围为[0,360),如果isRandom=true,则h不需要填，填了也不会生效",defaultValue:""},{name:"s",type:"string",desp:"颜色对比度",details:"百分比，字符串型，必需，表示需要生成颜色的对比度，范围为[0,100%)",defaultValue:""},{name:"l",type:"string",desp:"颜色亮度",details:"百分比，字符串型，必需，表示需要生成颜色的亮度，范围为[0,100%)",defaultValue:""},{name:"a",type:"number",desp:"颜色透明度",details:"数值型，必需，表示需要生成颜色的透明度，范围为[0,1]",defaultValue:""}],defaultValue:""},{name:"isRandom",type:"boolean",desp:"需要随机生成颜色的值",details:"布尔型，option.h存在则非必需，否则必需。表示需要随机生成颜色的值",defaultValue:""}],hasReturn:true,returnValue:{name:"color",type:"string",desp:"返回颜色",details:"在现代浏览器下，返回rgba(red,green.blur,alpha)格式的颜色；在IE8或以下，则返回rgb(red,green,blue)",defaultValue:""},details:"",_belongTo:"便捷操作",edition:{universal:"app.hsla=function () {\r\n            var css = function (opt, random) {\r\n                var $elem = $('<div>'),\r\n                    targetCSS = 'background-color',\r\n                    css;\r\n\r\n                opt = $.extend(opt, this.defaltOptions);\r\n\r\n                $elem.css(targetCSS, 'hsl(' + [(random ? Math.floor(Math.random() * 361) : opt.h), opt.s, opt.l].join(',') + ')');\r\n\r\n                css = $elem.css(targetCSS).toString();\r\n\r\n                if (jQuery.support.opacity) {\r\n                    return css.replace('rgb', 'rgba').replace(')', ',' + opt.a + ')');\r\n                }\r\n                return css;\r\n            };\r\n            css._default = {\r\n                h: Math.floor(Math.random() * 361),\r\n                s: '50%',\r\n                l: '50%',\r\n                a: 1\r\n            };\r\n\r\n            return css;\r\n        }()"}},{require:true,name:"shelter",desp:"遮罩",details:"实现遮罩的显示和隐藏,用于禁止在获取后台数据或加载数据等短时间内用户的操作",belongTo:"class",cInterfaces:[{name:"show",desp:"显示遮罩",details:"显示遮罩，显示超时时间为60秒",hasReturn:false,params:[{name:"tips",type:"string",desp:"提示语句",details:"遮罩显示的内容，非必需",overviewType:"default",defaultValue:""},{name:"timeout",type:"number",desp:"超时时间",details:"遮罩超时时间，缺省值60000ms，即60s。遮罩超过60s则报错超时错误并隐藏遮罩。非必需",defaultValue:6e4,overviewType:"default"},{name:"immediate",type:"boolean",desp:"是否立刻执行",details:"是否立即显示遮罩，缺省值220ms后显示。非必需",overviewType:"default",defaultValue:""}],returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"hide",desp:"隐藏最顶部的遮罩",hasReturn:false,details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"hideAll",desp:"隐藏所有遮罩，不推荐使用",hasReturn:false,details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"lowerZIndex",desp:"恢复遮罩层z-index",hasReturn:false,details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"upperZIndex",desp:"提升遮罩层z-index",hasReturn:false,params:[{name:"alertZIndex",desp:"提示栏z-index",type:"string",details:"提升提示栏的z-index，缺省值1052。为false时，表示不设置",defaultValue:1052,overviewType:"default"},{name:"maskZIndex",desp:"遮罩层的z-index",type:"string",details:"提升遮罩层的z-index，缺省值4。右侧边栏的z-index为1062",defaultValue:4,overviewType:"default"},{name:"alertTop",desp:"提示栏的top",type:"string",details:"设置提示栏的top，缺省值auto。为false时，表示不设置",defaultValue:"auto",overviewType:"default"}],details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}}],appJsCode:"app.shelter=function () {\r\n            var Shelter = function () {\r\n                var context = this;\r\n\r\n                context.maskList = [];\r\n                context.zIndexList = [];\r\n                context._zIndexList = [];\r\n\r\n\r\n                context.$mask = $(context.MASK_TEMP);\r\n                context.$shelter = $(context.SHELTER_TEMP);\r\n                context.$title = context.$shelter.children('.maskTitle');\r\n                context.$alert = $('#alertList');\r\n\r\n\r\n                $('body')\r\n                    .append(context.$mask)\r\n                    .append(context.$shelter);\r\n\r\n                context.timeoutHandler = null;\r\n\r\n\r\n                //绑定监听\r\n                $(window).on({\r\n                    'keyup.shelter': function (e) {\r\n                        var key = e.which || window.event.keyCode;\r\n                        //如果key为27 遮罩消失\r\n                        if (key === 27) {\r\n                            context.hideAll();\r\n                        }\r\n                    },\r\n                    'error.shelter': function (e) {\r\n                        context.hideAll();\r\n                    }\r\n                });\r\n            };\r\n\r\n\r\n            Shelter.prototype = {\r\n\r\n\r\n                SHELTER_TEMP: '<div id=\"shelter\" class=\"mask hide\"><div class=\"maskTitle\"></div><div class=\"maskPic\"></div></div>',\r\n                MASK_TEMP: '<div id=\"mask\" class=\"hide\"/>',\r\n\r\n                ALERT_INDEX: 15000,\r\n                ALERT_TOP: 5,\r\n\r\n                MASK_INDEX: 1052,\r\n\r\n                DEFAULT_TITLE: '请稍后…',\r\n                DEFAULT_TIMEOUT: 60000,\r\n\r\n\r\n                show: function (title, timeout) {\r\n\r\n                    this.maskList.push(arguments);\r\n                    this._upper(true, this.ALERT_INDEX + 1);\r\n\r\n                    this._showShelter(title, timeout);\r\n                },\r\n                hide: function () {\r\n                    this._hide();\r\n                },\r\n                hideAll: function () {\r\n                    this.maskList = [];\r\n                    this._zIndexList = [];\r\n                    this._lower(true);\r\n                    this._display(false);\r\n                },\r\n\r\n\r\n                upperZIndex: function (alertZIndex, maskZIndex, alertTop) {\r\n                    this._upper(false, alertZIndex, maskZIndex, alertTop);\r\n                },\r\n                lowerZIndex: function () {\r\n                    this._lower();\r\n                },\r\n                _showShelter: function (title, timeout) {\r\n                    var context = this;\r\n\r\n                    this._setTitle(title);\r\n                    this._display(true);\r\n\r\n                    try {\r\n                        timeout = parseInt(timeout, 10) || this.DEFAULT_TIMEOUT;\r\n                    } catch (e) {\r\n                        timeout = this.DEFAULT_TIMEOUT;\r\n                    } finally {\r\n\r\n                        clearTimeout(this.timeoutHandler);\r\n\r\n\r\n                        this.timeoutHandler = setTimeout(function () {\r\n                            context._hide();\r\n                        }, timeout);\r\n                    }\r\n                },\r\n                _hide: function () {\r\n                    var maskList = this.maskList,\r\n                        args;\r\n\r\n                    maskList.pop();\r\n                    this._lower(true);\r\n\r\n                    if (maskList.length) {\r\n                        args = maskList[maskList.length - 1];\r\n\r\n                        this._showShelter.apply(this, args);\r\n                    } else {\r\n                        this._display(false);\r\n                    }\r\n                },\r\n                _setTitle: function (title) {\r\n                    this.$title\r\n                        .empty()\r\n                        .append(title || this.DEFAULT_TITLE);\r\n                },\r\n                _display: function (display) {\r\n\r\n                    if (!!display) {\r\n                        this.$shelter.removeClass('hide');\r\n                    } else {\r\n                        this.$shelter.addClass('hide');\r\n                    }\r\n\r\n                },\r\n                _upper: function (inner, alertZIndex, maskZIndex, alertTop) {\r\n                    var $mask = inner ? this.$shelter : this.$mask,\r\n                        $alert = this.$alert,\r\n                        zIndexList = inner ? this._zIndexList : this.zIndexList;\r\n\r\n                    alertZIndex = alertZIndex === false ? '' : (alertZIndex && parseInt(alertZIndex, 10) || this.ALERT_INDEX);\r\n                    maskZIndex = maskZIndex && parseInt(maskZIndex, 10) || this.MASK_INDEX;\r\n\r\n                    //备份上次的zIndex\r\n                    zIndexList.push({\r\n                        alertZIndex: this.ALERT_INDEX,\r\n                        maskZIndex: $mask.css('zIndex')\r\n                    });\r\n\r\n                    if (maskZIndex !== -1) {\r\n                        $mask\r\n                            .addClass('mask')\r\n                            .css({\r\n                                'z-index': maskZIndex\r\n                            });\r\n                    }\r\n                    $alert.css({\r\n                        'z-index': alertZIndex,\r\n                        'top': alertTop === false ? '' : (alertTop || this.ALERT_TOP)\r\n                    });\r\n                },\r\n                _lower: function (inner) {\r\n                    //恢复上次的zIndex\r\n                    var $mask = inner ? this.$shelter : this.$mask,\r\n                        $alert = this.$alert,\r\n                        zIndexList = inner ? this._zIndexList : this.zIndexList,\r\n                        lastZIndex = zIndexList.length ? zIndexList.pop() : {\r\n                            maskZIndex: this.MASK_INDEX,\r\n                            alertZIndex: this.ALERT_INDEX\r\n                        };\r\n\r\n                    if (!parseInt(lastZIndex.maskZIndex, 10)) { //如果上一次没有遮罩的话，则将mask移除\r\n                        $mask.removeClass('mask');\r\n                        $alert.css('top', '');\r\n                    }\r\n                    $mask.css('z-index', lastZIndex.maskZIndex || '');\r\n                    $alert.css('z-index', lastZIndex.alertZIndex || '');\r\n                }\r\n\r\n            };\r\n\r\n            return new Shelter();\r\n        }()",hasReturn:false,returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.shelter=function () {\r\n            var Shelter = function () {\r\n                var context = this;\r\n\r\n                context.maskList = [];\r\n                context.zIndexList = [];\r\n                context._zIndexList = [];\r\n\r\n\r\n                context.$mask = $(context.MASK_TEMP);\r\n                context.$shelter = $(context.SHELTER_TEMP);\r\n                context.$title = context.$shelter.children('.maskTitle');\r\n                context.$alert = $('#alertList');\r\n\r\n\r\n                $('body')\r\n                    .append(context.$mask)\r\n                    .append(context.$shelter);\r\n\r\n                context.timeoutHandler = null;\r\n\r\n\r\n                //绑定监听\r\n                $(window).on({\r\n                    'keyup.shelter': function (e) {\r\n                        var key = e.which || window.event.keyCode;\r\n                        //如果key为27 遮罩消失\r\n                        if (key === 27) {\r\n                            context.hideAll();\r\n                        }\r\n                    },\r\n                    'error.shelter': function (e) {\r\n                        context.hideAll();\r\n                    }\r\n                });\r\n            };\r\n\r\n\r\n            Shelter.prototype = {\r\n\r\n\r\n                SHELTER_TEMP: '<div id=\"shelter\" class=\"mask hide\"><div class=\"maskTitle\"></div><div class=\"maskPic\"></div></div>',\r\n                MASK_TEMP: '<div id=\"mask\" class=\"hide\"/>',\r\n\r\n                ALERT_INDEX: 15000,\r\n                ALERT_TOP: 5,\r\n\r\n                MASK_INDEX: 1052,\r\n\r\n                DEFAULT_TITLE: '请稍后…',\r\n                DEFAULT_TIMEOUT: 60000,\r\n\r\n\r\n                show: function (title, timeout) {\r\n\r\n                    this.maskList.push(arguments);\r\n                    this._upper(true, this.ALERT_INDEX + 1);\r\n\r\n                    this._showShelter(title, timeout);\r\n                },\r\n                hide: function () {\r\n                    this._hide();\r\n                },\r\n                hideAll: function () {\r\n                    this.maskList = [];\r\n                    this._zIndexList = [];\r\n                    this._lower(true);\r\n                    this._display(false);\r\n                },\r\n\r\n\r\n                upperZIndex: function (alertZIndex, maskZIndex, alertTop) {\r\n                    this._upper(false, alertZIndex, maskZIndex, alertTop);\r\n                },\r\n                lowerZIndex: function () {\r\n                    this._lower();\r\n                },\r\n                _showShelter: function (title, timeout) {\r\n                    var context = this;\r\n\r\n                    this._setTitle(title);\r\n                    this._display(true);\r\n\r\n                    try {\r\n                        timeout = parseInt(timeout, 10) || this.DEFAULT_TIMEOUT;\r\n                    } catch (e) {\r\n                        timeout = this.DEFAULT_TIMEOUT;\r\n                    } finally {\r\n\r\n                        clearTimeout(this.timeoutHandler);\r\n\r\n\r\n                        this.timeoutHandler = setTimeout(function () {\r\n                            context._hide();\r\n                        }, timeout);\r\n                    }\r\n                },\r\n                _hide: function () {\r\n                    var maskList = this.maskList,\r\n                        args;\r\n\r\n                    maskList.pop();\r\n                    this._lower(true);\r\n\r\n                    if (maskList.length) {\r\n                        args = maskList[maskList.length - 1];\r\n\r\n                        this._showShelter.apply(this, args);\r\n                    } else {\r\n                        this._display(false);\r\n                    }\r\n                },\r\n                _setTitle: function (title) {\r\n                    this.$title\r\n                        .empty()\r\n                        .append(title || this.DEFAULT_TITLE);\r\n                },\r\n                _display: function (display) {\r\n\r\n                    if (!!display) {\r\n                        this.$shelter.removeClass('hide');\r\n                    } else {\r\n                        this.$shelter.addClass('hide');\r\n                    }\r\n\r\n                },\r\n                _upper: function (inner, alertZIndex, maskZIndex, alertTop) {\r\n                    var $mask = inner ? this.$shelter : this.$mask,\r\n                        $alert = this.$alert,\r\n                        zIndexList = inner ? this._zIndexList : this.zIndexList;\r\n\r\n                    alertZIndex = alertZIndex === false ? '' : (alertZIndex && parseInt(alertZIndex, 10) || this.ALERT_INDEX);\r\n                    maskZIndex = maskZIndex && parseInt(maskZIndex, 10) || this.MASK_INDEX;\r\n\r\n                    //备份上次的zIndex\r\n                    zIndexList.push({\r\n                        alertZIndex: this.ALERT_INDEX,\r\n                        maskZIndex: $mask.css('zIndex')\r\n                    });\r\n\r\n                    if (maskZIndex !== -1) {\r\n                        $mask\r\n                            .addClass('mask')\r\n                            .css({\r\n                                'z-index': maskZIndex\r\n                            });\r\n                    }\r\n                    $alert.css({\r\n                        'z-index': alertZIndex,\r\n                        'top': alertTop === false ? '' : (alertTop || this.ALERT_TOP)\r\n                    });\r\n                },\r\n                _lower: function (inner) {\r\n                    //恢复上次的zIndex\r\n                    var $mask = inner ? this.$shelter : this.$mask,\r\n                        $alert = this.$alert,\r\n                        zIndexList = inner ? this._zIndexList : this.zIndexList,\r\n                        lastZIndex = zIndexList.length ? zIndexList.pop() : {\r\n                            maskZIndex: this.MASK_INDEX,\r\n                            alertZIndex: this.ALERT_INDEX\r\n                        };\r\n\r\n                    if (!parseInt(lastZIndex.maskZIndex, 10)) { //如果上一次没有遮罩的话，则将mask移除\r\n                        $mask.removeClass('mask');\r\n                        $alert.css('top', '');\r\n                    }\r\n                    $mask.css('z-index', lastZIndex.maskZIndex || '');\r\n                    $alert.css('z-index', lastZIndex.alertZIndex || '');\r\n                }\r\n\r\n            };\r\n\r\n            return new Shelter();\r\n        }()"
}},{require:true,name:"collapse",desp:"折叠菜单功能",belongTo:"closure",appJsCode:"app.collapse=function () {\r\n            //collapse\r\n            if (!($ && $.fn && $.fn.collapse)) {\r\n                !function ($) {\r\n\r\n                    \"use strict\"; // jshint ;_;\r\n\r\n\r\n                    /* COLLAPSE PUBLIC CLASS DEFINITION\r\n						 * ================================ */\r\n\r\n                    var Collapse = function (element, options) {\r\n                        this.$element = $(element);\r\n                        this.options = $.extend({}, $.fn.collapse.defaults, options);\r\n\r\n                        if (this.options.parent) {\r\n                            this.$parent = $(this.options.parent)\r\n                        } else {\r\n                            var parentID = this.$element.attr('data-parent');\r\n\r\n                            if (parentID) {\r\n                                this.$parent = this.$element.closest(parentID);\r\n\r\n                                if (!this.$parent.length) {\r\n                                    this.$parent = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.options.toggle && this.toggle()\r\n                    };\r\n\r\n                    Collapse.prototype = {\r\n\r\n                        constructor: Collapse\r\n\r\n                        ,\r\n                        dimension: function () {\r\n                            var hasWidth = this.$element.hasClass('width');\r\n                            return hasWidth ? 'width' : 'height'\r\n                        }\r\n\r\n                        ,\r\n                        show: function () {\r\n                            var dimension, scroll, actives, hasData;\r\n\r\n                            if (this.transitioning || this.$element.hasClass('in')) return;\r\n\r\n                            dimension = this.dimension();\r\n                            scroll = $.camelCase(['scroll', dimension].join('-'));\r\n\r\n                            //lijiancheng@cfischina.com\r\n                            //2015/08/11 9:54\r\n                            //如果是asideMenu则不会自动收起\r\n                            if (this.$parent && !this.$parent.hasClass('aui-aside-menu-ctn')) {\r\n                                actives = this.$parent && this.$parent.find('.aui-accordion-group > .in');\r\n                                if (actives && actives.length) {\r\n                                    hasData = actives.data('collapse');\r\n                                    if (hasData && hasData.transitioning) return;\r\n                                    actives.collapse('hide');\r\n                                    actives.prev().children('a').addClass('collapsed');\r\n                                    hasData || actives.data('collapse', null)\r\n                                }\r\n                            }\r\n\r\n\r\n                            this.$element[dimension](0);\r\n                            this.transition('addClass', $.Event('show'), 'shown');\r\n                            $.support.transition && this.$element[dimension](this.$element[0][scroll])\r\n                        }\r\n\r\n                        ,\r\n                        hide: function () {\r\n                            var dimension;\r\n                            if (this.transitioning || !this.$element.hasClass('in')) return;\r\n                            dimension = this.dimension();\r\n                            this.reset(this.$element[dimension]());\r\n                            this.transition('removeClass', $.Event('hide'), 'hidden');\r\n                            this.$element[dimension](0)\r\n                        }\r\n\r\n                        ,\r\n                        reset: function (size) {\r\n                            var dimension = this.dimension();\r\n\r\n                            this.$element\r\n                                .removeClass('collapse')[dimension](size || 'auto')[0].offsetWidth;\r\n\r\n                            this.$element[size !== null ? 'addClass' : 'removeClass']('collapse');\r\n\r\n                            // lijiancheng@cfischina.com\r\n                            // 2015/08/03 16:29\r\n                            // 展开手风琴时滚动到当前部位\r\n                            var $aside;\r\n                            if (($aside = this.$element.closest('#auiAside')).length) {\r\n                                $aside = $aside.find('.aside-menu:first');\r\n                                app && app.scrollTop($aside, this.$element, 500, this.$element.prev().height());\r\n                            }\r\n\r\n                            return this\r\n                        }\r\n\r\n                        ,\r\n                        transition: function (method, startEvent, completeEvent) {\r\n                            var that = this,\r\n                                complete = function () {\r\n                                    if (startEvent.type == 'show') that.reset();\r\n                                    that.transitioning = 0;\r\n                                    that.$element.trigger(completeEvent)\r\n                                };\r\n\r\n                            this.$element.trigger(startEvent);\r\n\r\n                            if (startEvent.isDefaultPrevented()) return;\r\n\r\n                            this.transitioning = 1;\r\n\r\n                            this.$element[method]('in');\r\n\r\n                            $.support.transition && this.$element.hasClass('collapse') ?\r\n                                this.$element.one($.support.transition.end, complete) :\r\n                                complete()\r\n                        }\r\n\r\n                        ,\r\n                        toggle: function () {\r\n                            this[this.$element.hasClass('in') ? 'hide' : 'show']()\r\n                        }\r\n\r\n                    };\r\n\r\n\r\n                    /* COLLAPSE PLUGIN DEFINITION\r\n						 * ========================== */\r\n\r\n                    var old = $.fn.collapse;\r\n\r\n                    $.fn.collapse = function (option) {\r\n                        return this.each(function () {\r\n                            var $this = $(this),\r\n                                data = $this.data('collapse'),\r\n                                options = $.extend({}, $.fn.collapse.defaults, $this.data(), typeof option == 'object' && option);\r\n                            if (!data) $this.data('collapse', (data = new Collapse(this, options)));\r\n                            if (typeof option == 'string') data[option]()\r\n                        })\r\n                    };\r\n\r\n                    $.fn.collapse.defaults = {\r\n                        toggle: true\r\n                    };\r\n\r\n                    $.fn.collapse.Constructor = Collapse;\r\n\r\n\r\n                    /* COLLAPSE NO CONFLICT\r\n						 * ==================== */\r\n\r\n                    $.fn.collapse.noConflict = function () {\r\n                        $.fn.collapse = old;\r\n                        return this\r\n                    };\r\n\r\n\r\n                    /* COLLAPSE DATA-API\r\n						 * ================= */\r\n\r\n                    $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {\r\n                        var $this = $(this),\r\n                            href, target = $this.attr('data-target') ||\r\n                            e.preventDefault() ||\r\n                            (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') //strip for ie7\r\n                            ,\r\n                            option = $(target).data('collapse') ? 'toggle' : $this.data();\r\n                        $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed');\r\n                        $(target).collapse(option)\r\n                    })\r\n\r\n                }(window.jQuery);\r\n            }\r\n        }()",hasReturn:false,details:"",returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.collapse=function () {\r\n            //collapse\r\n            if (!($ && $.fn && $.fn.collapse)) {\r\n                !function ($) {\r\n\r\n                    \"use strict\"; // jshint ;_;\r\n\r\n\r\n                    /* COLLAPSE PUBLIC CLASS DEFINITION\r\n						 * ================================ */\r\n\r\n                    var Collapse = function (element, options) {\r\n                        this.$element = $(element);\r\n                        this.options = $.extend({}, $.fn.collapse.defaults, options);\r\n\r\n                        if (this.options.parent) {\r\n                            this.$parent = $(this.options.parent)\r\n                        } else {\r\n                            var parentID = this.$element.attr('data-parent');\r\n\r\n                            if (parentID) {\r\n                                this.$parent = this.$element.closest(parentID);\r\n\r\n                                if (!this.$parent.length) {\r\n                                    this.$parent = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.options.toggle && this.toggle()\r\n                    };\r\n\r\n                    Collapse.prototype = {\r\n\r\n                        constructor: Collapse\r\n\r\n                        ,\r\n                        dimension: function () {\r\n                            var hasWidth = this.$element.hasClass('width');\r\n                            return hasWidth ? 'width' : 'height'\r\n                        }\r\n\r\n                        ,\r\n                        show: function () {\r\n                            var dimension, scroll, actives, hasData;\r\n\r\n                            if (this.transitioning || this.$element.hasClass('in')) return;\r\n\r\n                            dimension = this.dimension();\r\n                            scroll = $.camelCase(['scroll', dimension].join('-'));\r\n\r\n                            //lijiancheng@cfischina.com\r\n                            //2015/08/11 9:54\r\n                            //如果是asideMenu则不会自动收起\r\n                            if (this.$parent && !this.$parent.hasClass('aui-aside-menu-ctn')) {\r\n                                actives = this.$parent && this.$parent.find('.aui-accordion-group > .in');\r\n                                if (actives && actives.length) {\r\n                                    hasData = actives.data('collapse');\r\n                                    if (hasData && hasData.transitioning) return;\r\n                                    actives.collapse('hide');\r\n                                    actives.prev().children('a').addClass('collapsed');\r\n                                    hasData || actives.data('collapse', null)\r\n                                }\r\n                            }\r\n\r\n\r\n                            this.$element[dimension](0);\r\n                            this.transition('addClass', $.Event('show'), 'shown');\r\n                            $.support.transition && this.$element[dimension](this.$element[0][scroll])\r\n                        }\r\n\r\n                        ,\r\n                        hide: function () {\r\n                            var dimension;\r\n                            if (this.transitioning || !this.$element.hasClass('in')) return;\r\n                            dimension = this.dimension();\r\n                            this.reset(this.$element[dimension]());\r\n                            this.transition('removeClass', $.Event('hide'), 'hidden');\r\n                            this.$element[dimension](0)\r\n                        }\r\n\r\n                        ,\r\n                        reset: function (size) {\r\n                            var dimension = this.dimension();\r\n\r\n                            this.$element\r\n                                .removeClass('collapse')[dimension](size || 'auto')[0].offsetWidth;\r\n\r\n                            this.$element[size !== null ? 'addClass' : 'removeClass']('collapse');\r\n\r\n                            // lijiancheng@cfischina.com\r\n                            // 2015/08/03 16:29\r\n                            // 展开手风琴时滚动到当前部位\r\n                            var $aside;\r\n                            if (($aside = this.$element.closest('#auiAside')).length) {\r\n                                $aside = $aside.find('.aside-menu:first');\r\n                                app && app.scrollTop($aside, this.$element, 500, this.$element.prev().height());\r\n                            }\r\n\r\n                            return this\r\n                        }\r\n\r\n                        ,\r\n                        transition: function (method, startEvent, completeEvent) {\r\n                            var that = this,\r\n                                complete = function () {\r\n                                    if (startEvent.type == 'show') that.reset();\r\n                                    that.transitioning = 0;\r\n                                    that.$element.trigger(completeEvent)\r\n                                };\r\n\r\n                            this.$element.trigger(startEvent);\r\n\r\n                            if (startEvent.isDefaultPrevented()) return;\r\n\r\n                            this.transitioning = 1;\r\n\r\n                            this.$element[method]('in');\r\n\r\n                            $.support.transition && this.$element.hasClass('collapse') ?\r\n                                this.$element.one($.support.transition.end, complete) :\r\n                                complete()\r\n                        }\r\n\r\n                        ,\r\n                        toggle: function () {\r\n                            this[this.$element.hasClass('in') ? 'hide' : 'show']()\r\n                        }\r\n\r\n                    };\r\n\r\n\r\n                    /* COLLAPSE PLUGIN DEFINITION\r\n						 * ========================== */\r\n\r\n                    var old = $.fn.collapse;\r\n\r\n                    $.fn.collapse = function (option) {\r\n                        return this.each(function () {\r\n                            var $this = $(this),\r\n                                data = $this.data('collapse'),\r\n                                options = $.extend({}, $.fn.collapse.defaults, $this.data(), typeof option == 'object' && option);\r\n                            if (!data) $this.data('collapse', (data = new Collapse(this, options)));\r\n                            if (typeof option == 'string') data[option]()\r\n                        })\r\n                    };\r\n\r\n                    $.fn.collapse.defaults = {\r\n                        toggle: true\r\n                    };\r\n\r\n                    $.fn.collapse.Constructor = Collapse;\r\n\r\n\r\n                    /* COLLAPSE NO CONFLICT\r\n						 * ==================== */\r\n\r\n                    $.fn.collapse.noConflict = function () {\r\n                        $.fn.collapse = old;\r\n                        return this\r\n                    };\r\n\r\n\r\n                    /* COLLAPSE DATA-API\r\n						 * ================= */\r\n\r\n                    $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {\r\n                        var $this = $(this),\r\n                            href, target = $this.attr('data-target') ||\r\n                            e.preventDefault() ||\r\n                            (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') //strip for ie7\r\n                            ,\r\n                            option = $(target).data('collapse') ? 'toggle' : $this.data();\r\n                        $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed');\r\n                        $(target).collapse(option)\r\n                    })\r\n\r\n                }(window.jQuery);\r\n            }\r\n        }()"}},{require:true,name:"modal",desp:"弹窗",belongTo:"closure",appJsCode:"app.modal=function () {\r\n            var setModalLgSize, modal;\r\n            !function ($) {\r\n\r\n                \"use strict\"; // jshint ;_;\r\n\r\n\r\n                /* MODAL CLASS DEFINITION\r\n					 * ====================== */\r\n\r\n                var Modal = function (element, options) {\r\n                        this.options = options;\r\n                        this.$element = $(element)\r\n                            .delegate('[data-dismiss=\"modal\"]', 'click.dismiss.modal', $.proxy(this.hide, this));\r\n                        this.options.remote && this.$element.find('.modal-body').load(this.options.remote)\r\n                    },\r\n                    $window = $(window);\r\n\r\n                Modal.prototype = {\r\n\r\n                    constructor: Modal\r\n\r\n                    ,\r\n                    toggle: function () {\r\n                        return this[!this.isShown ? 'show' : 'hide']()\r\n                    }\r\n\r\n                    ,\r\n                    show: function () {\r\n                        //  2015/9/28 14:55 lijiancheng@cfischina.com\r\n                        //  将遮罩层以及提示栏的z-index提高比弹窗（1050）更高的1052，可以让在使用弹窗的同时，正常使用遮罩以及提示栏。\r\n                        app.shelter.upperZIndex();\r\n\r\n                        var that = this,\r\n                            e = $.Event('show'),\r\n\r\n                            options = this.options,\r\n                            $modal = this.$element,\r\n                            modalUUID, resizeHandler,\r\n                            theme;\r\n\r\n                        this.$element.trigger(e);\r\n\r\n                        //  2015/8/24 16:02 lijiancheng@cfischina.com\r\n                        //  修复modal无法显示的问题\r\n                        this.$element.removeClass('hide');\r\n                        // 添加拖拽功能\r\n                        //this.$element.draggable();\r\n                        //  添加resize功能\r\n                        //this.$element.resizable({ handles: \"n, e, s, w\" });\r\n\r\n                        if (this.isShown || e.isDefaultPrevented()) return;\r\n\r\n                        this.isShown = true;\r\n\r\n                        this.escape();\r\n\r\n                        this.backdrop(function () {\r\n                            var transition = $.support.transition && that.$element.hasClass('fade');\r\n\r\n                            if (!that.$element.parent().length) {\r\n                                that.$element.appendTo(document.body); //don't move modals dom position\r\n                            }\r\n\r\n                            that.$element.show();\r\n\r\n                            if (transition) {\r\n                                that.$element[0].offsetWidth; // force reflow\r\n                            }\r\n\r\n                            that.$element\r\n                                .addClass('in')\r\n                                .attr('aria-hidden', false);\r\n\r\n                            that.enforceFocus();\r\n\r\n                            transition ?\r\n                                that.$element.one($.support.transition.end, function () {\r\n                                    that.$element.focus().trigger('shown')\r\n                                }) :\r\n                                that.$element.focus().trigger('shown')\r\n                        });\r\n\r\n                        if (options.noFooter) {\r\n                            $modal.children('.modal-footer').remove();\r\n                        }\r\n\r\n                        if (options.isLargeModal && (options.width || options.height)) {\r\n                            $modal.addClass('modal-lg');\r\n\r\n                            modalUUID = app.getUID();\r\n                            resizeHandler = function () {\r\n                                var modalHeight, modalWidth, windowHeight, windowWidth,\r\n                                    modalCss = {},\r\n                                    modalBodyCss, modalBodyHeight;\r\n\r\n                                if (options.width) {\r\n                                    windowWidth = $window.width();\r\n                                    if (options.width.indexOf('%') !== -1) {\r\n                                        modalWidth = (parseInt(options.width, 10) / 100 || .8) * windowWidth;\r\n                                    } else {\r\n                                        modalWidth = parseInt(options.width, 10) || windowWidth * .8;\r\n                                    }\r\n\r\n                                    modalWidth = Math.min(modalWidth, windowWidth);\r\n                                    modalWidth = Math.max(modalWidth, 0);\r\n\r\n                                    modalCss.width = modalWidth;\r\n\r\n                                    modalCss.left = windowWidth - modalWidth !== 0 ? Math.max(0, (windowWidth - modalWidth) / 2) : 0;\r\n\r\n                                    modalCss.marginLeft = 0;\r\n                                }\r\n\r\n                                if (options.height) {\r\n                                    windowHeight = $window.height();\r\n                                    if (options.height.indexOf('%') !== -1) {\r\n                                        modalHeight = (parseInt(options.height, 10) / 100 || .7) * windowHeight;\r\n                                    } else {\r\n                                        modalHeight = parseInt(options.height, 10) || windowHeight * .7;\r\n                                    }\r\n\r\n                                    modalHeight = Math.min(modalHeight, windowHeight);\r\n                                    modalBodyHeight = modalHeight - $modal.children('.modal-footer').height() * 3 - 10;\r\n\r\n\r\n                                    modalCss.height = modalBodyHeight;\r\n                                    modalCss.marginTop = 0;\r\n\r\n\r\n                                    setTimeout(function () {\r\n                                        $modal.css('top', windowHeight - modalHeight !== 0 ? (windowHeight - modalHeight) / 3 : 0);\r\n                                    }, 300);\r\n\r\n                                    modalBodyCss = {\r\n                                        maxHeight: modalBodyHeight,\r\n                                        minHeight: modalBodyHeight\r\n                                    };\r\n                                }\r\n\r\n                                if (options.noHeader) {\r\n                                    $modal.find('.modal-header>h4').text('');\r\n                                }\r\n\r\n                                if (options.noFooter) {\r\n                                    modalCss.paddingBottom = '.8em';\r\n                                }\r\n\r\n                                $modal.css(modalCss);\r\n                                if (modalBodyCss) {\r\n                                    $modal.children('.modal-body').css(modalBodyCss);\r\n                                }\r\n                            };\r\n\r\n                            $window.on('resize.' + modalUUID, resizeHandler);\r\n                            resizeHandler();\r\n\r\n                            this.uuid = modalUUID;\r\n                            this.resizeHandler = resizeHandler;\r\n                        }\r\n\r\n                        if (theme = window.$AW && window.$AW.ctn && window.$AW.ctn.modalCtn && $AW.ctn.modalCtn.theme) {\r\n                            theme(this.$element);\r\n                        }\r\n                    }\r\n\r\n                    ,\r\n                    hide: function (e) {\r\n                        //  2015/9/28 14:55 lijiancheng@cfischina.com\r\n                        //  将遮罩层以及提示栏的z-index提高比弹窗（1050）更高的1052，可以让在使用弹窗的同时，正常使用遮罩以及提示栏。\r\n                        app.shelter.lowerZIndex();\r\n                        e && e.preventDefault();\r\n\r\n                        var that = this;\r\n\r\n                        this.$element.css({\r\n                            'top': ''\r\n                        });\r\n\r\n                        e = $.Event('hide');\r\n\r\n                        this.$element.trigger(e);\r\n\r\n                        if (this.uuid) {\r\n                            $window.off('resize.' + this.uuid);\r\n                            this.resizeHandler = null;\r\n                        }\r\n\r\n\r\n                        if (!this.isShown || e.isDefaultPrevented()) return;\r\n\r\n                        this.isShown = false;\r\n\r\n                        this.escape();\r\n\r\n                        $(document).off('focusin.modal');\r\n\r\n                        this.$element\r\n                            .removeClass('in')\r\n                            .attr('aria-hidden', true);\r\n\r\n                        $.support.transition && this.$element.hasClass('fade') ?\r\n                            this.hideWithTransition() :\r\n                            this.hideModal()\r\n                    }\r\n\r\n                    ,\r\n                    enforceFocus: function () {\r\n                        // /*\r\n                        //  * lijiancheng@cfischina.com\r\n                        //  * date:2016/1/8 11:45\r\n                        //  * 修复bootstrap的bug，当同时出现两个modal的时候，会出现的死循环问题\r\n                        //  * */\r\n                        // var that = this,count=0;\r\n                        // $(document).on('focusin.modal', function (e) {\r\n                        // 	if (count<10&&that.$element[0] !== e.target && !that.$element.has(e.target).length) {\r\n                        // 		that.$element.focus();\r\n                        // 		count++;\r\n                        // 	}\r\n                        // })\r\n                    }\r\n\r\n                    ,\r\n                    escape: function () {\r\n                        var that = this;\r\n                        if (this.isShown && this.options.keyboard) {\r\n                            this.$element.on('keyup.dismiss.modal', function (e) {\r\n                                e.which == 27 && that.hide()\r\n                            })\r\n                        } else if (!this.isShown) {\r\n                            this.$element.off('keyup.dismiss.modal')\r\n                        }\r\n                    }\r\n\r\n                    ,\r\n                    hideWithTransition: function () {\r\n                        var that = this,\r\n                            timeout = setTimeout(function () {\r\n                                that.$element.off($.support.transition.end);\r\n                                that.hideModal()\r\n                            }, 500);\r\n\r\n                        this.$element.one($.support.transition.end, function () {\r\n                            clearTimeout(timeout);\r\n                            that.hideModal()\r\n                        })\r\n                    }\r\n\r\n                    ,\r\n                    hideModal: function () {\r\n                        var that = this;\r\n                        this.$element.hide();\r\n                        this.backdrop(function () {\r\n                            that.removeBackdrop();\r\n                            that.$element.trigger('hidden')\r\n                        })\r\n                    }\r\n\r\n                    ,\r\n                    removeBackdrop: function () {\r\n                        this.$backdrop && this.$backdrop.remove();\r\n                        this.$backdrop = null\r\n                    }\r\n\r\n                    ,\r\n                    backdrop: function (callback) {\r\n                        var that = this,\r\n                            animate = this.$element.hasClass('fade') ? 'fade' : '';\r\n\r\n                        if (this.isShown && this.options.backdrop) {\r\n                            var doAnimate = $.support.transition && animate;\r\n\r\n                            this.$backdrop = $('<div class=\"modal-backdrop ' + animate + '\" />')\r\n                                .appendTo(document.body);\r\n\r\n                            this.$backdrop.click(\r\n                                this.options.backdrop == 'static' ?\r\n                                    $.proxy(this.$element[0].focus, this.$element[0]) :\r\n                                    $.proxy(this.hide, this)\r\n                            );\r\n\r\n                            if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow\r\n\r\n                            this.$backdrop.addClass('in');\r\n\r\n                            if (!callback) return;\r\n\r\n                            doAnimate ?\r\n                                this.$backdrop.one($.support.transition.end, callback) :\r\n                                callback()\r\n\r\n                        } else if (!this.isShown && this.$backdrop) {\r\n                            this.$backdrop.removeClass('in');\r\n\r\n                            $.support.transition && this.$element.hasClass('fade') ?\r\n                                this.$backdrop.one($.support.transition.end, callback) :\r\n                                callback()\r\n\r\n                        } else if (callback) {\r\n                            callback()\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                /* MODAL PLUGIN DEFINITION\r\n					 * ======================= */\r\n\r\n                var old = $.fn.modal;\r\n\r\n                $.fn.modal = function (option) {\r\n                    return this.each(function () {\r\n                        var $this = $(this),\r\n                            data = $this.data('modal'),\r\n                            options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option);\r\n                        if (!data) $this.data('modal', (data = new Modal(this, options)));\r\n                        if (typeof option == 'string') data[option]();\r\n                        else if (options.show) data.show()\r\n                    })\r\n                };\r\n\r\n                $.fn.modal.defaults = {\r\n                    backdrop: true,\r\n                    keyboard: true,\r\n                    show: true\r\n                };\r\n\r\n                $.fn.modal.Constructor = Modal;\r\n\r\n\r\n                /* MODAL NO CONFLICT\r\n					 * ================= */\r\n\r\n                $.fn.modal.noConflict = function () {\r\n                    $.fn.modal = old;\r\n                    return this\r\n                };\r\n\r\n\r\n                /* MODAL DATA-API\r\n					 * ============== */\r\n\r\n                $(document).on('click.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\r\n                    var $this = $(this),\r\n                        href = $this.attr('href'),\r\n                        $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) //strip for ie7\r\n                        ,\r\n                        option = $target.data('modal') ? 'toggle' : $.extend({\r\n                            remote: !/#/.test(href) && href\r\n                        }, $target.data(), $this.data());\r\n\r\n                    e.preventDefault();\r\n\r\n                    $target\r\n                        .modal(option)\r\n                        .one('hide', function () {\r\n                            $this.focus()\r\n                        })\r\n                })\r\n\r\n            }(window.jQuery);\r\n            modal = function () {\r\n                var $body = $('body');\r\n                var modalFooterTemp =\r\n                    '<div class=\"modal-footer\">' +\r\n                    '<button type=\"button\" data-role=\"confirm\" class=\"btn btn-focus\">_positive_</button>' +\r\n                    '<button type=\"button\" data-role=\"ignore\" class=\"btn btn-custom\">_ignore_</button>' +\r\n                    '<button type=\"button\" data-role=\"cancel\" class=\"btn btn-normal\">_negative_</button>' +\r\n                    '</div>',\r\n                    modalTemp = '<div class=\"modal hide fade\">' +\r\n                        '<div class=\"modal-header\"><h4>_title_</h4></div>' +\r\n                        '<div class=\"modal-body\">_content_</div>' +\r\n                        modalFooterTemp +\r\n                        '</div>';\r\n\r\n                var MODAL_LANG = {\r\n                        TITLE: '弹窗',\r\n                        CONTENT: '弹窗内容'\r\n                    },\r\n                    COMMON_LANG = {\r\n                        CONFIRM: '确定',\r\n                        CANCEL: '取消'\r\n                    },\r\n                    _default = {\r\n                        title: MODAL_LANG.TITLE, //弹窗标题，非必填\r\n                        content: MODAL_LANG.CONTENT, //弹窗内容 当是jquery对象是包裹一层，非必填\r\n                        btnConfirm: COMMON_LANG.CONFIRM, //确定按钮显示内容\r\n                        btnCancel: COMMON_LANG.CANCEL, //取消按钮显示内容\r\n                        btnIgnore: null, //忽略按钮显示内容\r\n                        init: null, //初始化函数\r\n                        confirmHandler: function () {\r\n                        }, //点击确定按钮触发的函数，参数以数组形式写在args那里\r\n                        cancelHandler: function () {\r\n                        }, //点击取消按钮触发函数，参数写在args那里\r\n                        ignoreHandler: null, //点击取消按钮触发函数，参数写在args那里\r\n                        args: [],\r\n                        isLargeModal: true,\r\n                        height: '80%',\r\n                        width: '80%',\r\n                        isDialog: true,\r\n                        backdrop: 'static',\r\n                        noFooter: false,\r\n                        noHeader: false\r\n                    };\r\n\r\n                function modal(options) {\r\n                    var $modal,\r\n                        $header, $close,$full,\r\n                        html, context;\r\n\r\n                    options = $.extend({}, _default, options);\r\n\r\n\r\n                    if ($.isFunction(options.content)) {\r\n                        $modal = options.content();\r\n\r\n                        if (options.reset) {\r\n                            app.reset($modal);\r\n                        }\r\n\r\n                    } else {\r\n                        html = modalTemp.replace(/_title_/, options.title)\r\n                            .replace(/_content_/, $.isFunction(options.content) ? '_content_' : options.content)\r\n                            .replace(/_positive_/, options.btnConfirm)\r\n                            .replace(/_ignore_/, options.btnIgnore)\r\n                            .replace(/_negative_/, options.btnCancel);\r\n\r\n                        $modal = $(html);\r\n\r\n                        if (!options.btnIgnore || !options.ignoreHandler) {\r\n                            $modal.find('[data-role=\"ignore\"]').remove();\r\n                        }\r\n\r\n                        if (options.isLargeModal) $modal.addClass('modal-lg');\r\n                        if (!options.isDialog) $modal.addClass('modal-config-mode');\r\n\r\n                        $modal.appendTo($body);\r\n                    }\r\n\r\n                    $modal.find('[data-role=\"confirm\"]')[options.btnConfirm === false || options.btnConfirm === 'false' ? 'addClass' : 'removeClass']('hide');\r\n                    $modal.find('[data-role=\"cancel\"]')[options.btnCancel === false || options.btnCancel === 'false' ? 'addClass' : 'removeClass']('hide');\r\n\r\n                    context = $modal.children('.modal-body').get(0);\r\n\r\n                    if ($.isFunction(options.init)) {\r\n                        options.init.apply(context, options.args);\r\n                    }\r\n\r\n                    $header = $modal.children('.modal-header');\r\n                    if ($header.length && !$header.find('.close').length) {\r\n                        $close = $('<button title=\"关闭\" type=\"button\" class=\"close alert-close\">&times;</button>');\r\n\r\n                        $header.prepend($close);\r\n\r\n                        $close.on('click.aweb4ModalCtn', function () {\r\n                            var $modal = $(this).parent().parent('.modal');\r\n\r\n                            if ($modal.length) {\r\n                                $modal.modal('hide');\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if(options.isLargeModal && $header.length && !$header.find('.full').length){\r\n                        $full = $('<button title=\"全屏切换\" type=\"button\" class=\"full fa fa-expand\"></button>');\r\n\r\n                        $header.prepend($full);\r\n\r\n                        $full.on('click.aweb4ModalCtn', function () {\r\n                            var $modal = $(this).parent().parent('.modal');\r\n                            if ($modal.length) {\r\n                                $modal.toggleClass('full');\r\n                                $full.toggleClass('fa-compress');\r\n                            }\r\n                        });\r\n\r\n                    }\r\n\r\n                    try {\r\n                        $modal.modal({\r\n                            backdrop: options.backdrop,\r\n                            keyboard: false,\r\n                            show: true,\r\n                            isLargeModal: options.isLargeModal,\r\n                            height: options.height,\r\n                            width: options.width,\r\n                            noFooter: options.noFooter,\r\n                            noHeader: options.noHeader\r\n                        });\r\n                    } catch (e) {\r\n\r\n                    }\r\n\r\n                    if (options.backdrop) {\r\n                        $modal.before('<div class=\"mask\" style=\"z-index:' + (parseInt($modal.css('zIndex') || 1052, 10)) + '\"/>');\r\n                    }\r\n\r\n\r\n                    if (!$modal.attr('data-wrap')) {\r\n                        $modal.one('hidden', function () {\r\n                            if (options.backdrop) {\r\n                                $modal.prev('.modal-backdrop').remove();\r\n                                $modal.prev('.mask').remove();\r\n                            }\r\n\r\n                            $modal\r\n                                .off('click', 'button')\r\n                                .remove();\r\n\r\n                            $modal = null;\r\n                        });\r\n\r\n                        if (!options.noFooter) {\r\n                            $modal.on('click', '.modal-footer>button', function (e) {\r\n                                var _$modal = $(e.target || event.srcElement).closest('.modal');\r\n                                if (_$modal.is($modal)) {\r\n                                    var handler, result;\r\n                                    switch ($(this).attr('data-role')) {\r\n                                        case 'confirm':\r\n                                            handler = options.confirmHandler;\r\n                                            break;\r\n                                        case 'ignore':\r\n                                            handler = options.ignoreHandler;\r\n                                            break;\r\n                                        default:\r\n                                            handler = options.cancelHandler;\r\n                                    }\r\n\r\n                                    result = handler && handler.apply(context, options.args);\r\n\r\n                                    if (result !== false) {\r\n                                        _$modal && _$modal.modal('hide');\r\n                                    }\r\n\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        $modal.one('hidden', function () {\r\n                            if (options.backdrop) {\r\n                                $modal.prev('.mask').remove();\r\n                            }\r\n\r\n                            $modal = null;\r\n                            return false;\r\n                        });\r\n                    }\r\n                }\r\n\r\n\r\n                modal.warp = function ($modalBody, options) {\r\n                    var $modal;\r\n\r\n                    options = $.extend({}, _default, options);\r\n\r\n\r\n                    $modalBody.wrap('<div data-wrap=\"true\" class=\"modal hide fade\" style=\"position: fixed\"></div>');\r\n                    $modal = $modalBody.parent().attr('id', $modalBody.attr('id'));\r\n                    $modal.addClass($modalBody.attr('class'));\r\n                    $modalBody.removeAttr('id class').addClass('modal-body');\r\n                    $modal.prepend('<div class=\"modal-header\"><h4>' + options.title + '</h4></div>');\r\n                    $modal.append(modalFooterTemp.replace(/_positive_/, options.btnConfirm).replace(/_ignore_/, options.btnIgnore).replace(/_negative_/, options.btnCancel));\r\n                    if (!options.btnIgnore) {\r\n                        $modal.find('[data-role=\"ignore\"]').remove();\r\n                    }\r\n\r\n                    $modal.find('[data-role=\"confirm\"]')[options.btnCancel === false || options.btnCancel === 'false' ? 'addClass' : 'removeClass']('hide');\r\n                    $modal.find('[data-role=\"cancel\"]')[options.btnCancel === false || options.btnCancel === 'false' ? 'addClass' : 'removeClass']('hide');\r\n\r\n                    if (options.isLargeModal) $modal.addClass('modal-lg');\r\n\r\n\r\n                    if (!options.isDialog) $modal.addClass('modal-config-mode');\r\n\r\n\r\n                    $modal = null;\r\n                };\r\n                return modal;\r\n            }();\r\n            setModalLgSize = (function () {\r\n                var\r\n                    $modalStyle,\r\n                    $window = $(window),\r\n                    paddingStr = 'padding:45px 0 80px;',\r\n                    headerStr = '.modal-lg>.modal-header{position:absolute;top:0;left:0;right:0;height:21px;overflow:hidden;}',\r\n                    footerStr = '.modal-lg>.modal-footer{position:absolute;bottom:18px;left:0;right:2px;height:32px;overflow:hidden;}';\r\n\r\n\r\n                return function () {\r\n                    var modal = {},\r\n                        modalStyle, modalBodyHeight, maxHeight,\r\n                        windowHeight = $window.height();\r\n                    //定义modal大小\r\n                    modal.h = windowHeight * 0.7;\r\n                    modal.w = $window.width() * 0.8;\r\n                    modal.l = -(modal.w * 0.5);\r\n                    modal.t = -(modal.h * 0.5);\r\n                    modalStyle = 'width:' + modal.w + 'px ;' +\r\n                        'height:' + modal.h + 'px;' +\r\n                        'margin-left:' + modal.l + 'px ;' +\r\n                        'margin-top:' + modal.t + 'px ;' +\r\n                        'left:50%;top:-100%;' +\r\n                        paddingStr;\r\n                    maxHeight = modal.h - 10;\r\n                    modalBodyHeight = 'max-height:' + maxHeight + 'px;min-height:' + maxHeight + 'px;padding:5px;';\r\n\r\n                    if ($modalStyle) {\r\n                        $modalStyle.remove();\r\n                    }\r\n                    $modalStyle = $('<style type=\"text/css\">' + ('.modal-lg.fade{' + modalStyle + '}' + '.modal-lg .modal-body{' + modalBodyHeight + '}' + headerStr + footerStr + '.modal-lg.fade.in{top:' + (windowHeight - modal.h !== 0 ? (windowHeight - modal.h) / 3 : 0) + 'px;}') + '</style>');\r\n\r\n                    $modalStyle.appendTo('body');\r\n                };\r\n            })();\r\n            app.screen.addResizeHandler({\r\n                isGlobal: true,\r\n                callback: setModalLgSize,\r\n                uid: app.getUID()\r\n            });\r\n\r\n            setModalLgSize();\r\n\r\n            return modal;\r\n        }()",
params:[{name:"option",desp:"配置",type:"object",children:[{name:"title",type:"string",desp:"标题",defaultValue:"弹窗",details:"弹窗标题，非必填"},{name:"content",type:"string",desp:"弹窗内容",defaultValue:"弹窗内容",details:"可以是html字符串；或函数，返回内容的jQuery对象"},{name:"btnConfirm",type:"string",desp:"确定按钮显示的内容",defaultValue:"确定",details:"如果填写false，则不会显示确定按钮"},{name:"btnCancel",type:"string",desp:"取消按钮显示的内容",defaultValue:"取消",details:"如果填写false，则不会显示取消按钮"},{name:"btnIgnore",type:"string",desp:"忽略按钮显示的内容",defaultValue:null,details:"如果没有填写忽略按钮的内容，则不会显示忽略按钮"},{name:"init",type:"handler",desp:"初始化函数",defaultValue:"function(){}",details:"打开弹窗时，加载的方法，其中入参为agrs的参数，this指向内容的DOM对象"},{name:"confirmHandler",type:"handler",desp:"确定按钮点击事件",defaultValue:"function(){}",details:"确定按钮点击事件，其中入参为agrs的参数，this指向按钮的DOM对象，当return false时，将不隐藏弹窗"},{name:"cancelHandler",type:"handler",desp:"取消按钮点击事件",defaultValue:"function(){}",details:"取消按钮点击事件，其中入参为agrs的参数，this指向按钮的DOM对象，当return false时，将不隐藏弹窗"},{name:"ignoreHandler",type:"handler",desp:"忽略按钮点击事件",defaultValue:"function(){}",details:"忽略按钮点击事件，其中入参为agrs的参数，this指向按钮的DOM对象，当return false时，将不隐藏弹窗"},{name:"args",type:"array",desp:"入参",defaultValue:[]},{name:"isLargeModal",type:"boolean",desp:"是否为大的弹窗",defaultValue:true},{name:"isDialog",type:"boolean",desp:"是否为对话框",defaultValue:true},{name:"backdrop",type:"string",desp:"遮罩配置",defaultValue:"static",details:'遮罩可选项为true|false|"static"'},{name:"height",type:"string",desp:"高度",defaultValue:"80%",details:"当isLargeModal=true,isDialog=false时，可配置高度"},{name:"width",type:"string",desp:"宽度",defaultValue:"80%",details:"当isLargeModal=true,isDialog=false时，可配置宽度"},{name:"noHeader",type:"boolean",desp:"取消顶部标题",defaultValue:false},{name:"noFooter",type:"boolean",desp:"取消底部按钮",defaultValue:false}],defaultValue:""}],hasReturn:true,returnValue:{name:"warp",type:"object",desp:"包裹成弹窗",details:"将普通容器包括成弹窗",children:[{name:"$modalBody",type:"object",desp:"需要被包括的内容的jQuery对象",details:"",defaultValue:""},{name:"option",desp:"详细配置",type:"object",details:"详细配置与app.modal入参一致",defaultValue:""}],defaultValue:""},details:"",_belongTo:"便捷操作",edition:{universal:"app.modal=function () {\r\n            var setModalLgSize, modal;\r\n            !function ($) {\r\n\r\n                \"use strict\"; // jshint ;_;\r\n\r\n\r\n                /* MODAL CLASS DEFINITION\r\n					 * ====================== */\r\n\r\n                var Modal = function (element, options) {\r\n                        this.options = options;\r\n                        this.$element = $(element)\r\n                            .delegate('[data-dismiss=\"modal\"]', 'click.dismiss.modal', $.proxy(this.hide, this));\r\n                        this.options.remote && this.$element.find('.modal-body').load(this.options.remote)\r\n                    },\r\n                    $window = $(window);\r\n\r\n                Modal.prototype = {\r\n\r\n                    constructor: Modal\r\n\r\n                    ,\r\n                    toggle: function () {\r\n                        return this[!this.isShown ? 'show' : 'hide']()\r\n                    }\r\n\r\n                    ,\r\n                    show: function () {\r\n                        //  2015/9/28 14:55 lijiancheng@cfischina.com\r\n                        //  将遮罩层以及提示栏的z-index提高比弹窗（1050）更高的1052，可以让在使用弹窗的同时，正常使用遮罩以及提示栏。\r\n                        app.shelter.upperZIndex();\r\n\r\n                        var that = this,\r\n                            e = $.Event('show'),\r\n\r\n                            options = this.options,\r\n                            $modal = this.$element,\r\n                            modalUUID, resizeHandler,\r\n                            theme;\r\n\r\n                        this.$element.trigger(e);\r\n\r\n                        //  2015/8/24 16:02 lijiancheng@cfischina.com\r\n                        //  修复modal无法显示的问题\r\n                        this.$element.removeClass('hide');\r\n                        // 添加拖拽功能\r\n                        //this.$element.draggable();\r\n                        //  添加resize功能\r\n                        //this.$element.resizable({ handles: \"n, e, s, w\" });\r\n\r\n                        if (this.isShown || e.isDefaultPrevented()) return;\r\n\r\n                        this.isShown = true;\r\n\r\n                        this.escape();\r\n\r\n                        this.backdrop(function () {\r\n                            var transition = $.support.transition && that.$element.hasClass('fade');\r\n\r\n                            if (!that.$element.parent().length) {\r\n                                that.$element.appendTo(document.body); //don't move modals dom position\r\n                            }\r\n\r\n                            that.$element.show();\r\n\r\n                            if (transition) {\r\n                                that.$element[0].offsetWidth; // force reflow\r\n                            }\r\n\r\n                            that.$element\r\n                                .addClass('in')\r\n                                .attr('aria-hidden', false);\r\n\r\n                            that.enforceFocus();\r\n\r\n                            transition ?\r\n                                that.$element.one($.support.transition.end, function () {\r\n                                    that.$element.focus().trigger('shown')\r\n                                }) :\r\n                                that.$element.focus().trigger('shown')\r\n                        });\r\n\r\n                        if (options.noFooter) {\r\n                            $modal.children('.modal-footer').remove();\r\n                        }\r\n\r\n                        if (options.isLargeModal && (options.width || options.height)) {\r\n                            $modal.addClass('modal-lg');\r\n\r\n                            modalUUID = app.getUID();\r\n                            resizeHandler = function () {\r\n                                var modalHeight, modalWidth, windowHeight, windowWidth,\r\n                                    modalCss = {},\r\n                                    modalBodyCss, modalBodyHeight;\r\n\r\n                                if (options.width) {\r\n                                    windowWidth = $window.width();\r\n                                    if (options.width.indexOf('%') !== -1) {\r\n                                        modalWidth = (parseInt(options.width, 10) / 100 || .8) * windowWidth;\r\n                                    } else {\r\n                                        modalWidth = parseInt(options.width, 10) || windowWidth * .8;\r\n                                    }\r\n\r\n                                    modalWidth = Math.min(modalWidth, windowWidth);\r\n                                    modalWidth = Math.max(modalWidth, 0);\r\n\r\n                                    modalCss.width = modalWidth;\r\n\r\n                                    modalCss.left = windowWidth - modalWidth !== 0 ? Math.max(0, (windowWidth - modalWidth) / 2) : 0;\r\n\r\n                                    modalCss.marginLeft = 0;\r\n                                }\r\n\r\n                                if (options.height) {\r\n                                    windowHeight = $window.height();\r\n                                    if (options.height.indexOf('%') !== -1) {\r\n                                        modalHeight = (parseInt(options.height, 10) / 100 || .7) * windowHeight;\r\n                                    } else {\r\n                                        modalHeight = parseInt(options.height, 10) || windowHeight * .7;\r\n                                    }\r\n\r\n                                    modalHeight = Math.min(modalHeight, windowHeight);\r\n                                    modalBodyHeight = modalHeight - $modal.children('.modal-footer').height() * 3 - 10;\r\n\r\n\r\n                                    modalCss.height = modalBodyHeight;\r\n                                    modalCss.marginTop = 0;\r\n\r\n\r\n                                    setTimeout(function () {\r\n                                        $modal.css('top', windowHeight - modalHeight !== 0 ? (windowHeight - modalHeight) / 3 : 0);\r\n                                    }, 300);\r\n\r\n                                    modalBodyCss = {\r\n                                        maxHeight: modalBodyHeight,\r\n                                        minHeight: modalBodyHeight\r\n                                    };\r\n                                }\r\n\r\n                                if (options.noHeader) {\r\n                                    $modal.find('.modal-header>h4').text('');\r\n                                }\r\n\r\n                                if (options.noFooter) {\r\n                                    modalCss.paddingBottom = '.8em';\r\n                                }\r\n\r\n                                $modal.css(modalCss);\r\n                                if (modalBodyCss) {\r\n                                    $modal.children('.modal-body').css(modalBodyCss);\r\n                                }\r\n                            };\r\n\r\n                            $window.on('resize.' + modalUUID, resizeHandler);\r\n                            resizeHandler();\r\n\r\n                            this.uuid = modalUUID;\r\n                            this.resizeHandler = resizeHandler;\r\n                        }\r\n\r\n                        if (theme = window.$AW && window.$AW.ctn && window.$AW.ctn.modalCtn && $AW.ctn.modalCtn.theme) {\r\n                            theme(this.$element);\r\n                        }\r\n                    }\r\n\r\n                    ,\r\n                    hide: function (e) {\r\n                        //  2015/9/28 14:55 lijiancheng@cfischina.com\r\n                        //  将遮罩层以及提示栏的z-index提高比弹窗（1050）更高的1052，可以让在使用弹窗的同时，正常使用遮罩以及提示栏。\r\n                        app.shelter.lowerZIndex();\r\n                        e && e.preventDefault();\r\n\r\n                        var that = this;\r\n\r\n                        this.$element.css({\r\n                            'top': ''\r\n                        });\r\n\r\n                        e = $.Event('hide');\r\n\r\n                        this.$element.trigger(e);\r\n\r\n                        if (this.uuid) {\r\n                            $window.off('resize.' + this.uuid);\r\n                            this.resizeHandler = null;\r\n                        }\r\n\r\n\r\n                        if (!this.isShown || e.isDefaultPrevented()) return;\r\n\r\n                        this.isShown = false;\r\n\r\n                        this.escape();\r\n\r\n                        $(document).off('focusin.modal');\r\n\r\n                        this.$element\r\n                            .removeClass('in')\r\n                            .attr('aria-hidden', true);\r\n\r\n                        $.support.transition && this.$element.hasClass('fade') ?\r\n                            this.hideWithTransition() :\r\n                            this.hideModal()\r\n                    }\r\n\r\n                    ,\r\n                    enforceFocus: function () {\r\n                        // /*\r\n                        //  * lijiancheng@cfischina.com\r\n                        //  * date:2016/1/8 11:45\r\n                        //  * 修复bootstrap的bug，当同时出现两个modal的时候，会出现的死循环问题\r\n                        //  * */\r\n                        // var that = this,count=0;\r\n                        // $(document).on('focusin.modal', function (e) {\r\n                        // 	if (count<10&&that.$element[0] !== e.target && !that.$element.has(e.target).length) {\r\n                        // 		that.$element.focus();\r\n                        // 		count++;\r\n                        // 	}\r\n                        // })\r\n                    }\r\n\r\n                    ,\r\n                    escape: function () {\r\n                        var that = this;\r\n                        if (this.isShown && this.options.keyboard) {\r\n                            this.$element.on('keyup.dismiss.modal', function (e) {\r\n                                e.which == 27 && that.hide()\r\n                            })\r\n                        } else if (!this.isShown) {\r\n                            this.$element.off('keyup.dismiss.modal')\r\n                        }\r\n                    }\r\n\r\n                    ,\r\n                    hideWithTransition: function () {\r\n                        var that = this,\r\n                            timeout = setTimeout(function () {\r\n                                that.$element.off($.support.transition.end);\r\n                                that.hideModal()\r\n                            }, 500);\r\n\r\n                        this.$element.one($.support.transition.end, function () {\r\n                            clearTimeout(timeout);\r\n                            that.hideModal()\r\n                        })\r\n                    }\r\n\r\n                    ,\r\n                    hideModal: function () {\r\n                        var that = this;\r\n                        this.$element.hide();\r\n                        this.backdrop(function () {\r\n                            that.removeBackdrop();\r\n                            that.$element.trigger('hidden')\r\n                        })\r\n                    }\r\n\r\n                    ,\r\n                    removeBackdrop: function () {\r\n                        this.$backdrop && this.$backdrop.remove();\r\n                        this.$backdrop = null\r\n                    }\r\n\r\n                    ,\r\n                    backdrop: function (callback) {\r\n                        var that = this,\r\n                            animate = this.$element.hasClass('fade') ? 'fade' : '';\r\n\r\n                        if (this.isShown && this.options.backdrop) {\r\n                            var doAnimate = $.support.transition && animate;\r\n\r\n                            this.$backdrop = $('<div class=\"modal-backdrop ' + animate + '\" />')\r\n                                .appendTo(document.body);\r\n\r\n                            this.$backdrop.click(\r\n                                this.options.backdrop == 'static' ?\r\n                                    $.proxy(this.$element[0].focus, this.$element[0]) :\r\n                                    $.proxy(this.hide, this)\r\n                            );\r\n\r\n                            if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow\r\n\r\n                            this.$backdrop.addClass('in');\r\n\r\n                            if (!callback) return;\r\n\r\n                            doAnimate ?\r\n                                this.$backdrop.one($.support.transition.end, callback) :\r\n                                callback()\r\n\r\n                        } else if (!this.isShown && this.$backdrop) {\r\n                            this.$backdrop.removeClass('in');\r\n\r\n                            $.support.transition && this.$element.hasClass('fade') ?\r\n                                this.$backdrop.one($.support.transition.end, callback) :\r\n                                callback()\r\n\r\n                        } else if (callback) {\r\n                            callback()\r\n                        }\r\n                    }\r\n                };\r\n\r\n\r\n                /* MODAL PLUGIN DEFINITION\r\n					 * ======================= */\r\n\r\n                var old = $.fn.modal;\r\n\r\n                $.fn.modal = function (option) {\r\n                    return this.each(function () {\r\n                        var $this = $(this),\r\n                            data = $this.data('modal'),\r\n                            options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option);\r\n                        if (!data) $this.data('modal', (data = new Modal(this, options)));\r\n                        if (typeof option == 'string') data[option]();\r\n                        else if (options.show) data.show()\r\n                    })\r\n                };\r\n\r\n                $.fn.modal.defaults = {\r\n                    backdrop: true,\r\n                    keyboard: true,\r\n                    show: true\r\n                };\r\n\r\n                $.fn.modal.Constructor = Modal;\r\n\r\n\r\n                /* MODAL NO CONFLICT\r\n					 * ================= */\r\n\r\n                $.fn.modal.noConflict = function () {\r\n                    $.fn.modal = old;\r\n                    return this\r\n                };\r\n\r\n\r\n                /* MODAL DATA-API\r\n					 * ============== */\r\n\r\n                $(document).on('click.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\r\n                    var $this = $(this),\r\n                        href = $this.attr('href'),\r\n                        $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) //strip for ie7\r\n                        ,\r\n                        option = $target.data('modal') ? 'toggle' : $.extend({\r\n                            remote: !/#/.test(href) && href\r\n                        }, $target.data(), $this.data());\r\n\r\n                    e.preventDefault();\r\n\r\n                    $target\r\n                        .modal(option)\r\n                        .one('hide', function () {\r\n                            $this.focus()\r\n                        })\r\n                })\r\n\r\n            }(window.jQuery);\r\n            modal = function () {\r\n                var $body = $('body');\r\n                var modalFooterTemp =\r\n                    '<div class=\"modal-footer\">' +\r\n                    '<button type=\"button\" data-role=\"confirm\" class=\"btn btn-focus\">_positive_</button>' +\r\n                    '<button type=\"button\" data-role=\"ignore\" class=\"btn btn-custom\">_ignore_</button>' +\r\n                    '<button type=\"button\" data-role=\"cancel\" class=\"btn btn-normal\">_negative_</button>' +\r\n                    '</div>',\r\n                    modalTemp = '<div class=\"modal hide fade\">' +\r\n                        '<div class=\"modal-header\"><h4>_title_</h4></div>' +\r\n                        '<div class=\"modal-body\">_content_</div>' +\r\n                        modalFooterTemp +\r\n                        '</div>';\r\n\r\n                var MODAL_LANG = {\r\n                        TITLE: '弹窗',\r\n                        CONTENT: '弹窗内容'\r\n                    },\r\n                    COMMON_LANG = {\r\n                        CONFIRM: '确定',\r\n                        CANCEL: '取消'\r\n                    },\r\n                    _default = {\r\n                        title: MODAL_LANG.TITLE, //弹窗标题，非必填\r\n                        content: MODAL_LANG.CONTENT, //弹窗内容 当是jquery对象是包裹一层，非必填\r\n                        btnConfirm: COMMON_LANG.CONFIRM, //确定按钮显示内容\r\n                        btnCancel: COMMON_LANG.CANCEL, //取消按钮显示内容\r\n                        btnIgnore: null, //忽略按钮显示内容\r\n                        init: null, //初始化函数\r\n                        confirmHandler: function () {\r\n                        }, //点击确定按钮触发的函数，参数以数组形式写在args那里\r\n                        cancelHandler: function () {\r\n                        }, //点击取消按钮触发函数，参数写在args那里\r\n                        ignoreHandler: null, //点击取消按钮触发函数，参数写在args那里\r\n                        args: [],\r\n                        isLargeModal: true,\r\n                        height: '80%',\r\n                        width: '80%',\r\n                        isDialog: true,\r\n                        backdrop: 'static',\r\n                        noFooter: false,\r\n                        noHeader: false\r\n                    };\r\n\r\n                function modal(options) {\r\n                    var $modal,\r\n                        $header, $close,$full,\r\n                        html, context;\r\n\r\n                    options = $.extend({}, _default, options);\r\n\r\n\r\n                    if ($.isFunction(options.content)) {\r\n                        $modal = options.content();\r\n\r\n                        if (options.reset) {\r\n                            app.reset($modal);\r\n                        }\r\n\r\n                    } else {\r\n                        html = modalTemp.replace(/_title_/, options.title)\r\n                            .replace(/_content_/, $.isFunction(options.content) ? '_content_' : options.content)\r\n                            .replace(/_positive_/, options.btnConfirm)\r\n                            .replace(/_ignore_/, options.btnIgnore)\r\n                            .replace(/_negative_/, options.btnCancel);\r\n\r\n                        $modal = $(html);\r\n\r\n                        if (!options.btnIgnore || !options.ignoreHandler) {\r\n                            $modal.find('[data-role=\"ignore\"]').remove();\r\n                        }\r\n\r\n                        if (options.isLargeModal) $modal.addClass('modal-lg');\r\n                        if (!options.isDialog) $modal.addClass('modal-config-mode');\r\n\r\n                        $modal.appendTo($body);\r\n                    }\r\n\r\n                    $modal.find('[data-role=\"confirm\"]')[options.btnConfirm === false || options.btnConfirm === 'false' ? 'addClass' : 'removeClass']('hide');\r\n                    $modal.find('[data-role=\"cancel\"]')[options.btnCancel === false || options.btnCancel === 'false' ? 'addClass' : 'removeClass']('hide');\r\n\r\n                    context = $modal.children('.modal-body').get(0);\r\n\r\n                    if ($.isFunction(options.init)) {\r\n                        options.init.apply(context, options.args);\r\n                    }\r\n\r\n                    $header = $modal.children('.modal-header');\r\n                    if ($header.length && !$header.find('.close').length) {\r\n                        $close = $('<button title=\"关闭\" type=\"button\" class=\"close alert-close\">&times;</button>');\r\n\r\n                        $header.prepend($close);\r\n\r\n                        $close.on('click.aweb4ModalCtn', function () {\r\n                            var $modal = $(this).parent().parent('.modal');\r\n\r\n                            if ($modal.length) {\r\n                                $modal.modal('hide');\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if(options.isLargeModal && $header.length && !$header.find('.full').length){\r\n                        $full = $('<button title=\"全屏切换\" type=\"button\" class=\"full fa fa-expand\"></button>');\r\n\r\n                        $header.prepend($full);\r\n\r\n                        $full.on('click.aweb4ModalCtn', function () {\r\n                            var $modal = $(this).parent().parent('.modal');\r\n                            if ($modal.length) {\r\n                                $modal.toggleClass('full');\r\n                                $full.toggleClass('fa-compress');\r\n                            }\r\n                        });\r\n\r\n                    }\r\n\r\n                    try {\r\n                        $modal.modal({\r\n                            backdrop: options.backdrop,\r\n                            keyboard: false,\r\n                            show: true,\r\n                            isLargeModal: options.isLargeModal,\r\n                            height: options.height,\r\n                            width: options.width,\r\n                            noFooter: options.noFooter,\r\n                            noHeader: options.noHeader\r\n                        });\r\n                    } catch (e) {\r\n\r\n                    }\r\n\r\n                    if (options.backdrop) {\r\n                        $modal.before('<div class=\"mask\" style=\"z-index:' + (parseInt($modal.css('zIndex') || 1052, 10)) + '\"/>');\r\n                    }\r\n\r\n\r\n                    if (!$modal.attr('data-wrap')) {\r\n                        $modal.one('hidden', function () {\r\n                            if (options.backdrop) {\r\n                                $modal.prev('.modal-backdrop').remove();\r\n                                $modal.prev('.mask').remove();\r\n                            }\r\n\r\n                            $modal\r\n                                .off('click', 'button')\r\n                                .remove();\r\n\r\n                            $modal = null;\r\n                        });\r\n\r\n                        if (!options.noFooter) {\r\n                            $modal.on('click', '.modal-footer>button', function (e) {\r\n                                var _$modal = $(e.target || event.srcElement).closest('.modal');\r\n                                if (_$modal.is($modal)) {\r\n                                    var handler, result;\r\n                                    switch ($(this).attr('data-role')) {\r\n                                        case 'confirm':\r\n                                            handler = options.confirmHandler;\r\n                                            break;\r\n                                        case 'ignore':\r\n                                            handler = options.ignoreHandler;\r\n                                            break;\r\n                                        default:\r\n                                            handler = options.cancelHandler;\r\n                                    }\r\n\r\n                                    result = handler && handler.apply(context, options.args);\r\n\r\n                                    if (result !== false) {\r\n                                        _$modal && _$modal.modal('hide');\r\n                                    }\r\n\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        $modal.one('hidden', function () {\r\n                            if (options.backdrop) {\r\n                                $modal.prev('.mask').remove();\r\n                            }\r\n\r\n                            $modal = null;\r\n                            return false;\r\n                        });\r\n                    }\r\n                }\r\n\r\n\r\n                modal.warp = function ($modalBody, options) {\r\n                    var $modal;\r\n\r\n                    options = $.extend({}, _default, options);\r\n\r\n\r\n                    $modalBody.wrap('<div data-wrap=\"true\" class=\"modal hide fade\" style=\"position: fixed\"></div>');\r\n                    $modal = $modalBody.parent().attr('id', $modalBody.attr('id'));\r\n                    $modal.addClass($modalBody.attr('class'));\r\n                    $modalBody.removeAttr('id class').addClass('modal-body');\r\n                    $modal.prepend('<div class=\"modal-header\"><h4>' + options.title + '</h4></div>');\r\n                    $modal.append(modalFooterTemp.replace(/_positive_/, options.btnConfirm).replace(/_ignore_/, options.btnIgnore).replace(/_negative_/, options.btnCancel));\r\n                    if (!options.btnIgnore) {\r\n                        $modal.find('[data-role=\"ignore\"]').remove();\r\n                    }\r\n\r\n                    $modal.find('[data-role=\"confirm\"]')[options.btnCancel === false || options.btnCancel === 'false' ? 'addClass' : 'removeClass']('hide');\r\n                    $modal.find('[data-role=\"cancel\"]')[options.btnCancel === false || options.btnCancel === 'false' ? 'addClass' : 'removeClass']('hide');\r\n\r\n                    if (options.isLargeModal) $modal.addClass('modal-lg');\r\n\r\n\r\n                    if (!options.isDialog) $modal.addClass('modal-config-mode');\r\n\r\n\r\n                    $modal = null;\r\n                };\r\n                return modal;\r\n            }();\r\n            setModalLgSize = (function () {\r\n                var\r\n                    $modalStyle,\r\n                    $window = $(window),\r\n                    paddingStr = 'padding:45px 0 80px;',\r\n                    headerStr = '.modal-lg>.modal-header{position:absolute;top:0;left:0;right:0;height:21px;overflow:hidden;}',\r\n                    footerStr = '.modal-lg>.modal-footer{position:absolute;bottom:18px;left:0;right:2px;height:32px;overflow:hidden;}';\r\n\r\n\r\n                return function () {\r\n                    var modal = {},\r\n                        modalStyle, modalBodyHeight, maxHeight,\r\n                        windowHeight = $window.height();\r\n                    //定义modal大小\r\n                    modal.h = windowHeight * 0.7;\r\n                    modal.w = $window.width() * 0.8;\r\n                    modal.l = -(modal.w * 0.5);\r\n                    modal.t = -(modal.h * 0.5);\r\n                    modalStyle = 'width:' + modal.w + 'px ;' +\r\n                        'height:' + modal.h + 'px;' +\r\n                        'margin-left:' + modal.l + 'px ;' +\r\n                        'margin-top:' + modal.t + 'px ;' +\r\n                        'left:50%;top:-100%;' +\r\n                        paddingStr;\r\n                    maxHeight = modal.h - 10;\r\n                    modalBodyHeight = 'max-height:' + maxHeight + 'px;min-height:' + maxHeight + 'px;padding:5px;';\r\n\r\n                    if ($modalStyle) {\r\n                        $modalStyle.remove();\r\n                    }\r\n                    $modalStyle = $('<style type=\"text/css\">' + ('.modal-lg.fade{' + modalStyle + '}' + '.modal-lg .modal-body{' + modalBodyHeight + '}' + headerStr + footerStr + '.modal-lg.fade.in{top:' + (windowHeight - modal.h !== 0 ? (windowHeight - modal.h) / 3 : 0) + 'px;}') + '</style>');\r\n\r\n                    $modalStyle.appendTo('body');\r\n                };\r\n            })();\r\n            app.screen.addResizeHandler({\r\n                isGlobal: true,\r\n                callback: setModalLgSize,\r\n                uid: app.getUID()\r\n            });\r\n\r\n            setModalLgSize();\r\n\r\n            return modal;\r\n        }()"}},{belongTo:"function",details:"该方法挂载到app.open下，底层是调用app.router.open方法",returnValue:{type:"string",name:"",desp:"",details:"",defaultValue:""},name:"open",params:[{name:"option",children:[{details:"必需",name:"status",defaultValue:false,desp:"状态是否正常",type:"boolean"},{details:"在单页页面中，可以通过auiCtx.pageParams获取页面数据",name:"content",desp:"页面数据",type:"object",defaultValue:""},{name:"page",detailse:"使用井号#将文件夹进行分割",defaultValue:"error#404",desp:"模块路径",type:"string"},{name:"title",detailse:"可以在初始化Controller时，设置option.view.untitled属性。如果是通过自子页面标题打开，title=undefined，则不会显示标题",defaultValue:"app.Controller.View.prototype._default.untitled",desp:"标题",type:"string"},{name:"type",detailse:"可选值有新标签页BLANK、子标签页SUB、当前标签页SELF",defaultValue:"BLANK",desp:"页面类型",type:"string"},{name:"id",detailse:"此ID与单页页面中的handler.id相同",defaultValue:"BLANK",desp:"页面的ID标识",type:"string"},{name:"hasFooter",detailse:"如果是通过子页面打开，可以设置子页面是否由底部footer按钮",defaultValue:true,desp:"是否由底部按钮",type:"boolean"},{name:"height",detailse:"如果是通过子页面打开，可以设置子页面的高度",defaultValue:"80%",desp:"子页面高度",type:"string"},{name:"width",detailse:"如果是通过子页面打开，可以设置子页面的宽度",defaultValue:"80%",desp:"子页面宽度",type:"string"}],type:"object",desp:"配置",defaultValue:""}],desp:"打开标签页",hasReturn:false,appJsCode:"",_belongTo:"便捷操作",edition:{universal:""}},{belongTo:"function",details:"该方法挂载到app.close下,底层是调用app.router.tab.close方法",returnValue:{type:"string",name:"",desp:"",details:"",defaultValue:""},name:"close",params:[{details:"非必需，可以在单页页面中通过handler.domID获取，默认值为当前标签页",
name:"domID",defaultValue:"app.router.getCurrentHandler().domID",desp:"页面数据模型的唯一ID",type:"string"}],desp:"关闭标签页",hasReturn:false,appJsCode:"",_belongTo:"便捷操作",edition:{universal:""}},{require:true,name:"select",desp:"选择",hidden:true,appJsCode:"app.select=function (options, undefined) {\r\n            var _default = $.extend(true, {\r\n                    context: undefined,\r\n                    button: undefined,\r\n                    container: undefined,\r\n                    checkbox: 'checkbox',\r\n                    isDataTable: false,\r\n                    isSelectChildren: false, //true,//要配置data-prefix  例如父级的data-prefix=12,那么data-prefix需要等于12[^$]{1,}\r\n                    operationButtons: null\r\n                    /*{\r\n                     list: '#insStartBtn,#insRestartBtn,#insStopBtn,#insDelBtn',\r\n                     status: {\r\n                     'Running': ['#insRestartBtn,#insStopBtn', '#insDelBtn'],//前面单选，后面多选\r\n                     'Stopped': ['#insStartBtn', '#insDelBtn'],\r\n                     '_default': ['', '#insDelBtn']\r\n                     }\r\n                     }*/\r\n                    ,\r\n                    setNodeMethod: function (list, elem) {\r\n                        list[elem.id] = {\r\n                            node: elem,\r\n                            status: $(elem).attr('data-status')\r\n                        };\r\n                        return list;\r\n                    },\r\n                    getIdMethod: function (elem) {\r\n                        return elem.id;\r\n                    },\r\n                    getStatusMethod: null\r\n\r\n                }, options),\r\n                //私有变量\r\n                __list = {},\r\n                __checkboxSelector = _default.checkbox,\r\n                __isDataTable = _default.isDataTable,\r\n                __isBCheckState = _default.bCheckState,\r\n                __isSelectChildren = _default.isSelectChildren,\r\n                __operationButtons = _default.operationButtons,\r\n\r\n                __allCheck = '',\r\n                __allData = _default.allData,\r\n                //私有jQuery变量\r\n                __$context = $(_default.context),\r\n                __$ctn = $(_default.container, __$context),\r\n                __$btn = $(_default.button, __$context),\r\n\r\n\r\n                //私有方法\r\n                _setNode = _default.setNodeMethod,\r\n                _getId = _default.getIdMethod,\r\n                _getStatus = _default.getStatusMethod,\r\n\r\n                _removeNode = function (list, elem) {\r\n                    var id = _getId(elem);\r\n\r\n                    list[id] = null;\r\n                    delete list[id];\r\n                },\r\n\r\n                _selectChangeFunc = function () {\r\n                    // var checked = __$btn[0].checked;\r\n\r\n                    if (__allCheck === 'allcheck') {\r\n\r\n                        $.each(__list, function (index, item) {\r\n                            // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                            $('#' + index, __$ctn).prop('checked', true);\r\n                        })\r\n                    } else if (__allCheck === 'unAllcheck') {\r\n                        _clear();\r\n                    } else {\r\n                        $.each(__list, function (index, item) {\r\n                            // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                            $('#' + index, __$ctn).prop('checked', true);\r\n                        })\r\n                    }\r\n\r\n\r\n                },\r\n                _searchChangeFunc = function () {\r\n                    var i;\r\n                    if (__allCheck === 'allcheck') {\r\n                        if (__allData[0]) {\r\n                            for (i = 0; i < __allData.length; i++) {\r\n                                _setNode(__list, $(__allData[i][0]).children(0)[0])\r\n                            }\r\n                        }\r\n                    }\r\n                    $.each(__list, function (index, item) {\r\n                        // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                        $('#' + index, __$ctn).prop('checked', true);\r\n                    });\r\n                },\r\n                _updateStyle = function () {\r\n                    var $checkbox = $(__checkboxSelector, __$ctn),\r\n                        checkedLength = $checkbox.filter(':checked').length,\r\n                        enableButton, checkLen = 0;\r\n                    if (!__isBCheckState) {\r\n                        //更新全选按钮的样式\r\n                        switch (checkedLength) {\r\n                            case 0:\r\n                                __$btn.prop('indeterminate', false).removeAttr('checked').removeClass('tables-indeterminate');\r\n                                break;\r\n                            case $checkbox.length:\r\n                                __$btn.prop('indeterminate', false).attr('checked', 'checked').removeClass('tables-indeterminate');\r\n                                break;\r\n                            default:\r\n                                __$btn.prop('indeterminate', true).removeAttr('checked').addClass('tables-indeterminate');\r\n                        }\r\n                    } else {\r\n                        //更新全选按钮的样式\r\n\r\n                        $.each(__list, function () {\r\n                            checkLen++;\r\n                        });\r\n\r\n                        switch (checkLen) {\r\n                            case 0:\r\n                                __$btn.prop('indeterminate', false).removeAttr('checked').prop('checked', false).removeClass('tables-indeterminate');\r\n                                break;\r\n                            case __allData.length:\r\n                                __$btn.prop('indeterminate', false).attr('checked', 'checked').prop('checked', true).removeClass('tables-indeterminate');\r\n                                break;\r\n                            default:\r\n\r\n                                __$btn.prop('indeterminate', true).removeAttr('checked').addClass('tables-indeterminate');\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n\r\n                    //更新操作按钮的样式\r\n                    if (__operationButtons && __operationButtons.list && __operationButtons.status) {\r\n                        $(__operationButtons.list, __$context).attr('disabled', 'disabled');\r\n\r\n                        if (checkedLength) {\r\n                            if (enableButton = __operationButtons.status[_getStatus(__list, _default)]) {\r\n                                enableButton = enableButton[checkedLength === 1 ? 0 : 1];\r\n                                if (enableButton) {\r\n                                    $(enableButton, __$context).removeAttr('disabled');\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _children = function (elem, checked) {\r\n                    var $elem = $(elem),\r\n                        execMethod = checked ? 'attr' : 'removeAttr';\r\n\r\n                    if (!checked) $elem.removeAttr('checked');\r\n\r\n                    $('[data-prefix^=\"' + $elem.attr('data-prefix') + '\"]', __$ctn).not($elem)[execMethod]('disabled', 'disabled')[execMethod]('checked', 'checked');\r\n                },\r\n                _clear = function () {\r\n                    __$btn.removeAttr('checked');\r\n                    $(__checkboxSelector, __$context).removeAttr('checked');\r\n\r\n                    for (var p in __list) {\r\n                        __list[p] = null;\r\n                        delete __list[p];\r\n                    }\r\n                    __allCheck = 'unAllcheck';\r\n                    __list = {};\r\n                    _updateStyle();\r\n                };\r\n\r\n\r\n            //默认禁用所有按钮\r\n            if (__operationButtons && __operationButtons.list) {\r\n                $(__operationButtons.list, __$context).attr('disabled', 'disabled');\r\n            }\r\n\r\n            //监听绑定\r\n            //多选按钮的更改事件\r\n            __$btn.off('.appSelect').on('click.appSelect', function () {\r\n                var checked = this.checked,\r\n                    checkedMethod = !checked ? 'removeAttr' : 'attr',\r\n                    execMethod = checked ? _setNode : _removeNode,\r\n                    i;\r\n\r\n                if (__$btn.is(':checkbox') || (__$btn.is(':radio') && !checked)) {\r\n                    //需要选择子集的\r\n                    if (__isSelectChildren) {\r\n                        $(__checkboxSelector, __$ctn)[checkedMethod]('checked', 'checked').each(function () {\r\n                            execMethod(__list, this);\r\n                            _children(this, checked);\r\n                        });\r\n\r\n                    } else { //不需要选择子集的\r\n\r\n                        if (__isBCheckState) {\r\n                            if (__allCheck === 'allcheck') {\r\n                                __allCheck = 'unAllcheck';\r\n\r\n                                $.each(__list, function (index, item) {\r\n                                    // $(\"#\"+$(item.node).attr('id'),__$ctn).removeAttr('checked');\r\n                                    $('#' + index, __$ctn).prop('checked', true);\r\n                                });\r\n\r\n                                _clear();\r\n\r\n\r\n                            } else {\r\n                                __allCheck = 'allcheck';\r\n\r\n                                //数据加载\r\n\r\n                                if (__allData[0]) {\r\n                                    for (i = 0; i < __allData.length; i++) {\r\n                                        _setNode(__list, $(__allData[i][0]).children(0)[0])\r\n                                    }\r\n                                }\r\n                                $.each(__list, function (index, item) {\r\n                                    // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                                    $('#' + index, __$ctn).prop('checked', true);\r\n                                });\r\n\r\n                            }\r\n                        } else {\r\n                            $(__checkboxSelector, __$ctn)[checkedMethod]('checked', 'checked').each(function () {\r\n                                execMethod(__list, this);\r\n                            });\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                _updateStyle();\r\n            });\r\n\r\n            //表格更改事件\r\n            __$ctn.off('.appSelect').on('click.appSelect',function (ev) {\r\n                var e = ev.target || window.event.srcElement,\r\n                    $e = $(e), checkLen = 0, timer = null;\r\n\r\n                if ($e.is(_default.checkbox) && !ev.isTrigger) {\r\n\r\n                    if ($e.is(':radio')) {\r\n                        _clear();\r\n                        $e.attr('checked', true);\r\n                        _setNode(__list, e);\r\n                    } else {\r\n\r\n\r\n                        e.checked ? _setNode(__list, e) : _removeNode(__list, e);\r\n\r\n\r\n                        if (__isBCheckState) {\r\n\r\n                            $.each(__list, function (index, item) {\r\n                                checkLen++;\r\n                                // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                                $('#' + index, __$ctn).prop('checked', true);\r\n                            });\r\n                            if ($.isEmptyObject(__list)) {\r\n                                __allCheck = 'unAllcheck'\r\n                            } else if (checkLen === __allData.length) {\r\n                                __allCheck = 'allcheck';\r\n                            } else {\r\n                                __allCheck = 'indeterminate';\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (__isSelectChildren) {\r\n                        _children(e, e.checked);\r\n                    }\r\n\r\n                    _updateStyle();\r\n                }\r\n            });\r\n\r\n            //如果是dataTable\r\n            if (__isDataTable) {\r\n                //翻页事件重新统计选中实例按钮的样式\r\n                $('.dataTables_paginate', __$context).click(function (e) {\r\n\r\n                    var $e = $(e.target || window.event.srcElement), checked, checkedMethod, item;\r\n                    if (__$btn[0]) {\r\n                        checked = __$btn[0].checked;\r\n                    }\r\n                    checkedMethod = !checked ? 'removeAttr' : 'attr';\r\n\r\n\r\n                    $(\".paginate_button.current\").attr(\"data-dt-idx\");\r\n                    if ($e.hasClass('paginate_button') || $e.parent().hasClass('paginate_button')) {\r\n                        if (!__isBCheckState) {\r\n                            _clear();\r\n                        }\r\n\r\n                        if (__allCheck === \"allcheck\") {\r\n\r\n                            $(__checkboxSelector, __$ctn)[checkedMethod]('checked', 'checked').each(function () {\r\n                                _setNode(__list, this);\r\n                            });\r\n                            $.each(__list, function (index, item) {\r\n                                // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                                $('#' + index, __$ctn).prop('checked', true);\r\n                            });\r\n\r\n                        } else if (__allCheck === \"unAllcheck\") {\r\n                            for (item in __list) {\r\n\r\n                                $(\"#\" + item, __$ctn).removeAttr('checked');\r\n                            }\r\n                            _clear();\r\n                        } else {\r\n                            for (item in __list) {\r\n                                // id = $(item.node).attr('id');\r\n\r\n                                $(\"#\" + item, __$ctn).attr('checked', 'checked').prop('checked', true);\r\n                            }\r\n                            // $.each(__list,function (index,item) {\r\n                            //     id = $(item.node).attr('id');\r\n                            //\r\n                            //     if($(\"#\"+id,__$context).length) {\r\n                            //         $(\"#\" + id, __$context).prop('checked', 'checked');\r\n                            //     }\r\n                            // });\r\n\r\n\r\n                        }\r\n                        _updateStyle();\r\n\r\n                    }\r\n                });\r\n                if (!__isBCheckState) {\r\n                    $('.dataTables_filter', __$context).find(':input').keyup(_clear);\r\n                    $('.dataTables_length', __$context).find('select').change(_clear);\r\n                } else {\r\n                    $('.dataTables_filter', __$context).find(':input').keyup(_searchChangeFunc);\r\n                    $('.dataTables_length', __$context).find('select').change(_selectChangeFunc);\r\n                }\r\n\r\n            }\r\n\r\n\r\n            //返回组件方法\r\n            return {\r\n                //返回节列表的副本\r\n                nodes: function () {\r\n\r\n                    return $.extend(true, {}, __list);\r\n                },\r\n                //选中一些checkbox,传入id组成的list\r\n                check: function (list) {\r\n                    var $e, e, $input = $('<input type = \"checkbox\"/>'), firstPage = 0;\r\n\r\n                    _clear();\r\n                    __allCheck = '';\r\n                    $.each(list, function (index, value) {\r\n\r\n                        $e = $('#' + value, __$ctn);\r\n\r\n                        $input.attr('id', value);\r\n                        firstPage++;\r\n\r\n                        if ($e.length && $e.is(_default.checkbox)) {\r\n                            e = $e[0];\r\n\r\n                            e.checked = true;\r\n\r\n                            if (!$('.dataTables_length', __$context).length || firstPage <= parseInt($('.dataTables_length', __$context).find('select').val())) {\r\n                                _setNode(__list, e);\r\n                            }\r\n\r\n                            if (__isSelectChildren) {\r\n                                _children(e, e.checked);\r\n                            }\r\n                        } else {\r\n                            $input.attr('id', value).attr('checked', 'checked');\r\n                            _setNode(__list, $input[0]);\r\n                            if (__isSelectChildren) {\r\n                                _children(e, e.checked);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    _updateStyle();\r\n                },\r\n                //返回节点ID数组\r\n                list: function (empty) {\r\n\r\n                    var list = [],\r\n                        p;\r\n\r\n                    for (p in __list) {\r\n                        list.push(p);\r\n                    }\r\n\r\n                    _clear();\r\n\r\n                    return list;\r\n                },\r\n                //清除select的状态\r\n                clear: _clear,\r\n                size: function () {\r\n                    var size = 0,\r\n                        p;\r\n\r\n                    for (p in __list) size++;\r\n\r\n                    return size;\r\n                },\r\n                dispose: function () {\r\n                    this.list(true);\r\n                    for (var p in _default) {\r\n                        _default[p] = null;\r\n                        delete _default[p];\r\n                    }\r\n\r\n                    if (__isDataTable) {\r\n                        $('.dataTables_paginate', __$context).off();\r\n                        $('.dataTables_filter', __$context).find(':input').off();\r\n                        $('.dataTables_length', __$context).find('select').off();\r\n                    }\r\n\r\n                    __$btn.off(), __$btn = null;\r\n                    __$ctn.off(), __$ctn = null;\r\n                    __$context = null;\r\n                }\r\n            };\r\n        }",hasReturn:false,details:"该方法用于表格单选、多选",belongTo:"function",returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.select=function (options, undefined) {\r\n            var _default = $.extend(true, {\r\n                    context: undefined,\r\n                    button: undefined,\r\n                    container: undefined,\r\n                    checkbox: 'checkbox',\r\n                    isDataTable: false,\r\n                    isSelectChildren: false, //true,//要配置data-prefix  例如父级的data-prefix=12,那么data-prefix需要等于12[^$]{1,}\r\n                    operationButtons: null\r\n                    /*{\r\n                     list: '#insStartBtn,#insRestartBtn,#insStopBtn,#insDelBtn',\r\n                     status: {\r\n                     'Running': ['#insRestartBtn,#insStopBtn', '#insDelBtn'],//前面单选，后面多选\r\n                     'Stopped': ['#insStartBtn', '#insDelBtn'],\r\n                     '_default': ['', '#insDelBtn']\r\n                     }\r\n                     }*/\r\n                    ,\r\n                    setNodeMethod: function (list, elem) {\r\n                        list[elem.id] = {\r\n                            node: elem,\r\n                            status: $(elem).attr('data-status')\r\n                        };\r\n                        return list;\r\n                    },\r\n                    getIdMethod: function (elem) {\r\n                        return elem.id;\r\n                    },\r\n                    getStatusMethod: null\r\n\r\n                }, options),\r\n                //私有变量\r\n                __list = {},\r\n                __checkboxSelector = _default.checkbox,\r\n                __isDataTable = _default.isDataTable,\r\n                __isBCheckState = _default.bCheckState,\r\n                __isSelectChildren = _default.isSelectChildren,\r\n                __operationButtons = _default.operationButtons,\r\n\r\n                __allCheck = '',\r\n                __allData = _default.allData,\r\n                //私有jQuery变量\r\n                __$context = $(_default.context),\r\n                __$ctn = $(_default.container, __$context),\r\n                __$btn = $(_default.button, __$context),\r\n\r\n\r\n                //私有方法\r\n                _setNode = _default.setNodeMethod,\r\n                _getId = _default.getIdMethod,\r\n                _getStatus = _default.getStatusMethod,\r\n\r\n                _removeNode = function (list, elem) {\r\n                    var id = _getId(elem);\r\n\r\n                    list[id] = null;\r\n                    delete list[id];\r\n                },\r\n\r\n                _selectChangeFunc = function () {\r\n                    // var checked = __$btn[0].checked;\r\n\r\n                    if (__allCheck === 'allcheck') {\r\n\r\n                        $.each(__list, function (index, item) {\r\n                            // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                            $('#' + index, __$ctn).prop('checked', true);\r\n                        })\r\n                    } else if (__allCheck === 'unAllcheck') {\r\n                        _clear();\r\n                    } else {\r\n                        $.each(__list, function (index, item) {\r\n                            // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                            $('#' + index, __$ctn).prop('checked', true);\r\n                        })\r\n                    }\r\n\r\n\r\n                },\r\n                _searchChangeFunc = function () {\r\n                    var i;\r\n                    if (__allCheck === 'allcheck') {\r\n                        if (__allData[0]) {\r\n                            for (i = 0; i < __allData.length; i++) {\r\n                                _setNode(__list, $(__allData[i][0]).children(0)[0])\r\n                            }\r\n                        }\r\n                    }\r\n                    $.each(__list, function (index, item) {\r\n                        // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                        $('#' + index, __$ctn).prop('checked', true);\r\n                    });\r\n                },\r\n                _updateStyle = function () {\r\n                    var $checkbox = $(__checkboxSelector, __$ctn),\r\n                        checkedLength = $checkbox.filter(':checked').length,\r\n                        enableButton, checkLen = 0;\r\n                    if (!__isBCheckState) {\r\n                        //更新全选按钮的样式\r\n                        switch (checkedLength) {\r\n                            case 0:\r\n                                __$btn.prop('indeterminate', false).removeAttr('checked').removeClass('tables-indeterminate');\r\n                                break;\r\n                            case $checkbox.length:\r\n                                __$btn.prop('indeterminate', false).attr('checked', 'checked').removeClass('tables-indeterminate');\r\n                                break;\r\n                            default:\r\n                                __$btn.prop('indeterminate', true).removeAttr('checked').addClass('tables-indeterminate');\r\n                        }\r\n                    } else {\r\n                        //更新全选按钮的样式\r\n\r\n                        $.each(__list, function () {\r\n                            checkLen++;\r\n                        });\r\n\r\n                        switch (checkLen) {\r\n                            case 0:\r\n                                __$btn.prop('indeterminate', false).removeAttr('checked').prop('checked', false).removeClass('tables-indeterminate');\r\n                                break;\r\n                            case __allData.length:\r\n                                __$btn.prop('indeterminate', false).attr('checked', 'checked').prop('checked', true).removeClass('tables-indeterminate');\r\n                                break;\r\n                            default:\r\n\r\n                                __$btn.prop('indeterminate', true).removeAttr('checked').addClass('tables-indeterminate');\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n\r\n                    //更新操作按钮的样式\r\n                    if (__operationButtons && __operationButtons.list && __operationButtons.status) {\r\n                        $(__operationButtons.list, __$context).attr('disabled', 'disabled');\r\n\r\n                        if (checkedLength) {\r\n                            if (enableButton = __operationButtons.status[_getStatus(__list, _default)]) {\r\n                                enableButton = enableButton[checkedLength === 1 ? 0 : 1];\r\n                                if (enableButton) {\r\n                                    $(enableButton, __$context).removeAttr('disabled');\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _children = function (elem, checked) {\r\n                    var $elem = $(elem),\r\n                        execMethod = checked ? 'attr' : 'removeAttr';\r\n\r\n                    if (!checked) $elem.removeAttr('checked');\r\n\r\n                    $('[data-prefix^=\"' + $elem.attr('data-prefix') + '\"]', __$ctn).not($elem)[execMethod]('disabled', 'disabled')[execMethod]('checked', 'checked');\r\n                },\r\n                _clear = function () {\r\n                    __$btn.removeAttr('checked');\r\n                    $(__checkboxSelector, __$context).removeAttr('checked');\r\n\r\n                    for (var p in __list) {\r\n                        __list[p] = null;\r\n                        delete __list[p];\r\n                    }\r\n                    __allCheck = 'unAllcheck';\r\n                    __list = {};\r\n                    _updateStyle();\r\n                };\r\n\r\n\r\n            //默认禁用所有按钮\r\n            if (__operationButtons && __operationButtons.list) {\r\n                $(__operationButtons.list, __$context).attr('disabled', 'disabled');\r\n            }\r\n\r\n            //监听绑定\r\n            //多选按钮的更改事件\r\n            __$btn.off('.appSelect').on('click.appSelect', function () {\r\n                var checked = this.checked,\r\n                    checkedMethod = !checked ? 'removeAttr' : 'attr',\r\n                    execMethod = checked ? _setNode : _removeNode,\r\n                    i;\r\n\r\n                if (__$btn.is(':checkbox') || (__$btn.is(':radio') && !checked)) {\r\n                    //需要选择子集的\r\n                    if (__isSelectChildren) {\r\n                        $(__checkboxSelector, __$ctn)[checkedMethod]('checked', 'checked').each(function () {\r\n                            execMethod(__list, this);\r\n                            _children(this, checked);\r\n                        });\r\n\r\n                    } else { //不需要选择子集的\r\n\r\n                        if (__isBCheckState) {\r\n                            if (__allCheck === 'allcheck') {\r\n                                __allCheck = 'unAllcheck';\r\n\r\n                                $.each(__list, function (index, item) {\r\n                                    // $(\"#\"+$(item.node).attr('id'),__$ctn).removeAttr('checked');\r\n                                    $('#' + index, __$ctn).prop('checked', true);\r\n                                });\r\n\r\n                                _clear();\r\n\r\n\r\n                            } else {\r\n                                __allCheck = 'allcheck';\r\n\r\n                                //数据加载\r\n\r\n                                if (__allData[0]) {\r\n                                    for (i = 0; i < __allData.length; i++) {\r\n                                        _setNode(__list, $(__allData[i][0]).children(0)[0])\r\n                                    }\r\n                                }\r\n                                $.each(__list, function (index, item) {\r\n                                    // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                                    $('#' + index, __$ctn).prop('checked', true);\r\n                                });\r\n\r\n                            }\r\n                        } else {\r\n                            $(__checkboxSelector, __$ctn)[checkedMethod]('checked', 'checked').each(function () {\r\n                                execMethod(__list, this);\r\n                            });\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                _updateStyle();\r\n            });\r\n\r\n            //表格更改事件\r\n            __$ctn.off('.appSelect').on('click.appSelect',function (ev) {\r\n                var e = ev.target || window.event.srcElement,\r\n                    $e = $(e), checkLen = 0, timer = null;\r\n\r\n                if ($e.is(_default.checkbox) && !ev.isTrigger) {\r\n\r\n                    if ($e.is(':radio')) {\r\n                        _clear();\r\n                        $e.attr('checked', true);\r\n                        _setNode(__list, e);\r\n                    } else {\r\n\r\n\r\n                        e.checked ? _setNode(__list, e) : _removeNode(__list, e);\r\n\r\n\r\n                        if (__isBCheckState) {\r\n\r\n                            $.each(__list, function (index, item) {\r\n                                checkLen++;\r\n                                // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                                $('#' + index, __$ctn).prop('checked', true);\r\n                            });\r\n                            if ($.isEmptyObject(__list)) {\r\n                                __allCheck = 'unAllcheck'\r\n                            } else if (checkLen === __allData.length) {\r\n                                __allCheck = 'allcheck';\r\n                            } else {\r\n                                __allCheck = 'indeterminate';\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (__isSelectChildren) {\r\n                        _children(e, e.checked);\r\n                    }\r\n\r\n                    _updateStyle();\r\n                }\r\n            });\r\n\r\n            //如果是dataTable\r\n            if (__isDataTable) {\r\n                //翻页事件重新统计选中实例按钮的样式\r\n                $('.dataTables_paginate', __$context).click(function (e) {\r\n\r\n                    var $e = $(e.target || window.event.srcElement), checked, checkedMethod, item;\r\n                    if (__$btn[0]) {\r\n                        checked = __$btn[0].checked;\r\n                    }\r\n                    checkedMethod = !checked ? 'removeAttr' : 'attr';\r\n\r\n\r\n                    $(\".paginate_button.current\").attr(\"data-dt-idx\");\r\n                    if ($e.hasClass('paginate_button') || $e.parent().hasClass('paginate_button')) {\r\n                        if (!__isBCheckState) {\r\n                            _clear();\r\n                        }\r\n\r\n                        if (__allCheck === \"allcheck\") {\r\n\r\n                            $(__checkboxSelector, __$ctn)[checkedMethod]('checked', 'checked').each(function () {\r\n                                _setNode(__list, this);\r\n                            });\r\n                            $.each(__list, function (index, item) {\r\n                                // $(\"#\"+$(item.node).attr('id'),__$ctn).attr('checked','checked');\r\n                                $('#' + index, __$ctn).prop('checked', true);\r\n                            });\r\n\r\n                        } else if (__allCheck === \"unAllcheck\") {\r\n                            for (item in __list) {\r\n\r\n                                $(\"#\" + item, __$ctn).removeAttr('checked');\r\n                            }\r\n                            _clear();\r\n                        } else {\r\n                            for (item in __list) {\r\n                                // id = $(item.node).attr('id');\r\n\r\n                                $(\"#\" + item, __$ctn).attr('checked', 'checked').prop('checked', true);\r\n                            }\r\n                            // $.each(__list,function (index,item) {\r\n                            //     id = $(item.node).attr('id');\r\n                            //\r\n                            //     if($(\"#\"+id,__$context).length) {\r\n                            //         $(\"#\" + id, __$context).prop('checked', 'checked');\r\n                            //     }\r\n                            // });\r\n\r\n\r\n                        }\r\n                        _updateStyle();\r\n\r\n                    }\r\n                });\r\n                if (!__isBCheckState) {\r\n                    $('.dataTables_filter', __$context).find(':input').keyup(_clear);\r\n                    $('.dataTables_length', __$context).find('select').change(_clear);\r\n                } else {\r\n                    $('.dataTables_filter', __$context).find(':input').keyup(_searchChangeFunc);\r\n                    $('.dataTables_length', __$context).find('select').change(_selectChangeFunc);\r\n                }\r\n\r\n            }\r\n\r\n\r\n            //返回组件方法\r\n            return {\r\n                //返回节列表的副本\r\n                nodes: function () {\r\n\r\n                    return $.extend(true, {}, __list);\r\n                },\r\n                //选中一些checkbox,传入id组成的list\r\n                check: function (list) {\r\n                    var $e, e, $input = $('<input type = \"checkbox\"/>'), firstPage = 0;\r\n\r\n                    _clear();\r\n                    __allCheck = '';\r\n                    $.each(list, function (index, value) {\r\n\r\n                        $e = $('#' + value, __$ctn);\r\n\r\n                        $input.attr('id', value);\r\n                        firstPage++;\r\n\r\n                        if ($e.length && $e.is(_default.checkbox)) {\r\n                            e = $e[0];\r\n\r\n                            e.checked = true;\r\n\r\n                            if (!$('.dataTables_length', __$context).length || firstPage <= parseInt($('.dataTables_length', __$context).find('select').val())) {\r\n                                _setNode(__list, e);\r\n                            }\r\n\r\n                            if (__isSelectChildren) {\r\n                                _children(e, e.checked);\r\n                            }\r\n                        } else {\r\n                            $input.attr('id', value).attr('checked', 'checked');\r\n                            _setNode(__list, $input[0]);\r\n                            if (__isSelectChildren) {\r\n                                _children(e, e.checked);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    _updateStyle();\r\n                },\r\n                //返回节点ID数组\r\n                list: function (empty) {\r\n\r\n                    var list = [],\r\n                        p;\r\n\r\n                    for (p in __list) {\r\n                        list.push(p);\r\n                    }\r\n\r\n                    _clear();\r\n\r\n                    return list;\r\n                },\r\n                //清除select的状态\r\n                clear: _clear,\r\n                size: function () {\r\n                    var size = 0,\r\n                        p;\r\n\r\n                    for (p in __list) size++;\r\n\r\n                    return size;\r\n                },\r\n                dispose: function () {\r\n                    this.list(true);\r\n                    for (var p in _default) {\r\n                        _default[p] = null;\r\n                        delete _default[p];\r\n                    }\r\n\r\n                    if (__isDataTable) {\r\n                        $('.dataTables_paginate', __$context).off();\r\n                        $('.dataTables_filter', __$context).find(':input').off();\r\n                        $('.dataTables_length', __$context).find('select').off();\r\n                    }\r\n\r\n                    __$btn.off(), __$btn = null;\r\n                    __$ctn.off(), __$ctn = null;\r\n                    __$context = null;\r\n                }\r\n            };\r\n        }"
}},{require:true,name:"dispatcher",desp:"事件分发",details:"实现自定义事件",belongTo:"closure",appJsCode:"app.dispatcher=function (timeout) {\r\n\r\n            var Event = function (timeout) {\r\n\r\n                this.timeout = timeout;\r\n                this.cache = {};\r\n                this.delayHandler = {};\r\n            };\r\n\r\n            Event.prototype = {\r\n                constructor: Event,\r\n                //事件监听\r\n                // cache: {},\r\n                // delayHandler: {},\r\n                //timeout:100,\r\n                // $AW.on({\r\n                //  'type1.namespace1.namespace2':callback1,\r\n                //  'type2.namespace1.namespace2':callback2,\r\n                // });\r\n                // $AW.on('type1.namespace1.namespace2,type2.namespace1.namespace2',callback);\r\n                // $AW.on('type1','namespace',callback);\r\n                on: (function () {\r\n\r\n                    var context,\r\n                        method = {\r\n                            '1': function (obj) {\r\n                                var k, v, p;\r\n\r\n                                for (k in obj) {\r\n                                    if (obj.hasOwnProperty(k)) {\r\n                                        v = obj[k];\r\n                                        p = k.split('.');\r\n\r\n                                        method['3'](p[0], p.slice(1, p.length).join('.'), v);\r\n                                    }\r\n                                }\r\n                            },\r\n                            '2': function (type, callback) {\r\n                                var types = type.split(','),\r\n                                    i, p;\r\n\r\n                                for (i = types.length; type = types[--i];) {\r\n\r\n                                    p = type.split('.');\r\n\r\n                                    method['3'](p[0], p.slice(1, p.length).join('.'), callback);\r\n                                }\r\n                            },\r\n                            '3': function (type, namespace, callback) {\r\n                                var event;\r\n\r\n                                event = (context.cache[type] || (context.cache[type] = []));\r\n                                namespace = namespace || '';\r\n\r\n                                if ($.isFunction(callback)) {\r\n                                    event.push({\r\n                                        callback: callback,\r\n                                        namespace: namespace || ''\r\n                                    });\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                    return function () {\r\n                        context = this;\r\n\r\n                        method[arguments.length].apply(this, arguments);\r\n                    };\r\n                }()),\r\n                //$AW.off('type1.namespace1.namespace2,type2.namespace1.namespace2,');\r\n                off: function (type) {\r\n\r\n                    var types,\r\n                        p, i, namespace,\r\n                        events,\r\n                        j, event;\r\n\r\n\r\n                    if (type) {\r\n                        types = type.split(',');\r\n\r\n                        for (i = types.length; type = types[--i];) {\r\n                            p = type.split('.');\r\n\r\n                            namespace = p.slice(1, p.length).join('.') || '';\r\n                            type = p[0];\r\n\r\n\r\n                            if (namespace) {\r\n                                events = this.cache[type];\r\n\r\n                                for (j = events.length; event = events[--j];) {\r\n                                        if (event.namespace.indexOf(namespace) !== -1) {\r\n                                            events.splice(j, 1);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n\r\n                            } else {\r\n                                delete this.cache[type];\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this.cache = {};\r\n                    }\r\n                },\r\n                dispatchEvent: function (type) {\r\n                    var types, i,\r\n                        props,\r\n                        namespaces, namespace, k, matchNamespace,\r\n                        events, event, j,\r\n                        args = arguments;\r\n\r\n                    if (type) {\r\n                        types = type.split(',');\r\n\r\n                        for (i = types.length; type = types[--i];) {\r\n                            props = type.split('.');\r\n\r\n                            namespaces = props.slice(1, props.length) || [];\r\n                            type = props[0];\r\n                            events = this.cache[type] || [];\r\n\r\n                            if (namespaces.length) {\r\n\r\n                                for (j = events.length; event = events[--j];) {\r\n                                    matchNamespace = true;\r\n\r\n                                    for (k = namespaces.length; namespace = namespaces[--k];) {\r\n                                        if (event.namespace.indexOf(namespaces) === -1) {\r\n                                            matchNamespace = false;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (matchNamespace) {\r\n                                        event.callback.apply(event, args);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                for (j = events.length; event = events[--j];) {\r\n                                    event.callback.apply(event, args);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                //$AW.trigger('type1.namespace1.namespace2,type2.namespace1.namespace2,');\r\n                trigger: function (type) {\r\n                    var context = this,\r\n                        args = arguments;\r\n\r\n                    if (this.timeout) {\r\n                        window.clearTimeout(this.delayHandler[type]);\r\n                        this.delayHandler[type] = window.setTimeout(function () {\r\n                            context.dispatchEvent.apply(context, args);\r\n                        }, this.timeout);\r\n                    } else {\r\n                        context.dispatchEvent.apply(context, args);\r\n                    }\r\n                }\r\n            };\r\n\r\n            return function (timeout) {\r\n                return new Event(timeout);\r\n            };\r\n        }()",params:[{name:"timeout",desp:"时间(毫秒)",details:"分发事件的时间",type:"number",defaultValue:""}],returnValue:{desp:"事件实例",name:"eventInstance",details:"",type:"object",children:[{name:"on",desp:"定义事件",details:'$AW.on({"type1.namespace1.namespace2":callback1,"type2.namespace1.namespace2":callback2});$AW.on("type1.namespace1.namespace2,type2.namespace1.namespace2",callback);$AW.on("type1","namespace",callback);',type:"function",defaultValue:""},{name:"off",desp:"解绑事件",type:"function",details:'$AW.off("type1.namespace1.namespace2,type2.namespace1.namespace2,")',defaultValue:""},{name:"trigger",desp:"触发事件",type:"function",details:'$AW.trigger("type1.namespace1.namespace2,type2.namespace1.namespace2,")',defaultValue:""}],defaultValue:""},hasReturn:true,_belongTo:"便捷操作",edition:{universal:"app.dispatcher=function (timeout) {\r\n\r\n            var Event = function (timeout) {\r\n\r\n                this.timeout = timeout;\r\n                this.cache = {};\r\n                this.delayHandler = {};\r\n            };\r\n\r\n            Event.prototype = {\r\n                constructor: Event,\r\n                //事件监听\r\n                // cache: {},\r\n                // delayHandler: {},\r\n                //timeout:100,\r\n                // $AW.on({\r\n                //  'type1.namespace1.namespace2':callback1,\r\n                //  'type2.namespace1.namespace2':callback2,\r\n                // });\r\n                // $AW.on('type1.namespace1.namespace2,type2.namespace1.namespace2',callback);\r\n                // $AW.on('type1','namespace',callback);\r\n                on: (function () {\r\n\r\n                    var context,\r\n                        method = {\r\n                            '1': function (obj) {\r\n                                var k, v, p;\r\n\r\n                                for (k in obj) {\r\n                                    if (obj.hasOwnProperty(k)) {\r\n                                        v = obj[k];\r\n                                        p = k.split('.');\r\n\r\n                                        method['3'](p[0], p.slice(1, p.length).join('.'), v);\r\n                                    }\r\n                                }\r\n                            },\r\n                            '2': function (type, callback) {\r\n                                var types = type.split(','),\r\n                                    i, p;\r\n\r\n                                for (i = types.length; type = types[--i];) {\r\n\r\n                                    p = type.split('.');\r\n\r\n                                    method['3'](p[0], p.slice(1, p.length).join('.'), callback);\r\n                                }\r\n                            },\r\n                            '3': function (type, namespace, callback) {\r\n                                var event;\r\n\r\n                                event = (context.cache[type] || (context.cache[type] = []));\r\n                                namespace = namespace || '';\r\n\r\n                                if ($.isFunction(callback)) {\r\n                                    event.push({\r\n                                        callback: callback,\r\n                                        namespace: namespace || ''\r\n                                    });\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                    return function () {\r\n                        context = this;\r\n\r\n                        method[arguments.length].apply(this, arguments);\r\n                    };\r\n                }()),\r\n                //$AW.off('type1.namespace1.namespace2,type2.namespace1.namespace2,');\r\n                off: function (type) {\r\n\r\n                    var types,\r\n                        p, i, namespace,\r\n                        events,\r\n                        j, event;\r\n\r\n\r\n                    if (type) {\r\n                        types = type.split(',');\r\n\r\n                        for (i = types.length; type = types[--i];) {\r\n                            p = type.split('.');\r\n\r\n                            namespace = p.slice(1, p.length).join('.') || '';\r\n                            type = p[0];\r\n\r\n\r\n                            if (namespace) {\r\n                                events = this.cache[type];\r\n\r\n                                for (j = events.length; event = events[--j];) {\r\n                                        if (event.namespace.indexOf(namespace) !== -1) {\r\n                                            events.splice(j, 1);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n\r\n                            } else {\r\n                                delete this.cache[type];\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this.cache = {};\r\n                    }\r\n                },\r\n                dispatchEvent: function (type) {\r\n                    var types, i,\r\n                        props,\r\n                        namespaces, namespace, k, matchNamespace,\r\n                        events, event, j,\r\n                        args = arguments;\r\n\r\n                    if (type) {\r\n                        types = type.split(',');\r\n\r\n                        for (i = types.length; type = types[--i];) {\r\n                            props = type.split('.');\r\n\r\n                            namespaces = props.slice(1, props.length) || [];\r\n                            type = props[0];\r\n                            events = this.cache[type] || [];\r\n\r\n                            if (namespaces.length) {\r\n\r\n                                for (j = events.length; event = events[--j];) {\r\n                                    matchNamespace = true;\r\n\r\n                                    for (k = namespaces.length; namespace = namespaces[--k];) {\r\n                                        if (event.namespace.indexOf(namespaces) === -1) {\r\n                                            matchNamespace = false;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (matchNamespace) {\r\n                                        event.callback.apply(event, args);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                for (j = events.length; event = events[--j];) {\r\n                                    event.callback.apply(event, args);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                //$AW.trigger('type1.namespace1.namespace2,type2.namespace1.namespace2,');\r\n                trigger: function (type) {\r\n                    var context = this,\r\n                        args = arguments;\r\n\r\n                    if (this.timeout) {\r\n                        window.clearTimeout(this.delayHandler[type]);\r\n                        this.delayHandler[type] = window.setTimeout(function () {\r\n                            context.dispatchEvent.apply(context, args);\r\n                        }, this.timeout);\r\n                    } else {\r\n                        context.dispatchEvent.apply(context, args);\r\n                    }\r\n                }\r\n            };\r\n\r\n            return function (timeout) {\r\n                return new Event(timeout);\r\n            };\r\n        }()"}},{require:true,name:"popover",desp:"气泡",belongTo:"closure",appJsCode:"app.popover=function () {\r\n            var popover;\r\n            //tooltip\r\n\r\n            +function ($) {\r\n\r\n                'use strict';\r\n\r\n                // TOOLTIP PUBLIC CLASS DEFINITION\r\n                // ===============================\r\n\r\n                var Tooltip = function (element, options) {\r\n                    this.type = null;\r\n                    this.options = null;\r\n                    this.enabled = null;\r\n                    this.timeout = null;\r\n                    this.hoverState = null;\r\n                    this.$element = null;\r\n                    this.inState = null;\r\n\r\n                    this.init('tooltip', element, options)\r\n                };\r\n\r\n                var $window = $(window);\r\n\r\n                Tooltip.VERSION = '3.3.7';\r\n\r\n                Tooltip.TRANSITION_DURATION = 150;\r\n\r\n                Tooltip.DEFAULTS = {\r\n                    animation: true,\r\n                    placement: 'top',\r\n                    selector: false,\r\n                    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\r\n                    trigger: 'hover focus',\r\n                    title: '',\r\n                    delay: 0,\r\n                    html: false,\r\n                    container: false,\r\n                    viewport: {\r\n                        selector: 'body',\r\n                        padding: 0\r\n                    }\r\n                };\r\n\r\n                Tooltip.prototype.init = function (type, element, options) {\r\n                    this.enabled = true;\r\n                    this.type = type;\r\n                    this.$element = $(element);\r\n                    this.options = this.getOptions(options);\r\n                    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport));\r\n                    this.inState = {click: false, hover: false, focus: false};\r\n\r\n                    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\r\n                        throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\r\n                    }\r\n\r\n                    var triggers = this.options.trigger.split(' ');\r\n\r\n                    for (var i = triggers.length; i--;) {\r\n                        var trigger = triggers[i];\r\n\r\n                        if (trigger == 'click') {\r\n                            this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\r\n                        } else if (trigger != 'manual') {\r\n                            var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';\r\n                            var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';\r\n\r\n                            this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));\r\n                            this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\r\n                        }\r\n                    }\r\n\r\n                    this.options.selector ?\r\n                        (this._options = $.extend({}, this.options, {trigger: 'manual', selector: ''})) :\r\n                        this.fixTitle()\r\n                };\r\n\r\n                Tooltip.prototype.getDefaults = function () {\r\n                    return Tooltip.DEFAULTS\r\n                };\r\n\r\n                Tooltip.prototype.getOptions = function (options) {\r\n                    options = $.extend({}, this.getDefaults(), this.$element.data(), options);\r\n\r\n                    if (options.delay && typeof options.delay == 'number') {\r\n                        options.delay = {\r\n                            show: options.delay,\r\n                            hide: options.delay\r\n                        }\r\n                    }\r\n\r\n                    return options\r\n                };\r\n\r\n                Tooltip.prototype.getDelegateOptions = function () {\r\n                    var options = {};\r\n                    var defaults = this.getDefaults();\r\n\r\n                    this._options && $.each(this._options, function (key, value) {\r\n                        if (defaults[key] != value) options[key] = value\r\n                    });\r\n\r\n                    return options\r\n                };\r\n\r\n                Tooltip.prototype.enter = function (obj) {\r\n                    var self = obj instanceof this.constructor ?\r\n                        obj : $(obj.currentTarget).data('bs.' + this.type);\r\n\r\n                    if (!self) {\r\n                        self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\r\n                        $(obj.currentTarget).data('bs.' + this.type, self)\r\n                    }\r\n\r\n                    if (obj instanceof $.Event) {\r\n                        self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\r\n                    }\r\n\r\n                    if (self.tip().hasClass('in') || self.hoverState == 'in') {\r\n                        self.hoverState = 'in';\r\n                        return\r\n                    }\r\n\r\n                    clearTimeout(self.timeout);\r\n\r\n                    self.hoverState = 'in';\r\n\r\n                    if (!self.options.delay || !self.options.delay.show) return self.show();\r\n\r\n                    self.timeout = setTimeout(function () {\r\n                        if (self.hoverState == 'in') self.show()\r\n                    }, self.options.delay.show)\r\n                };\r\n\r\n                Tooltip.prototype.isInStateTrue = function () {\r\n                    for (var key in this.inState) {\r\n                        if (this.inState[key]) return true\r\n                    }\r\n\r\n                    return false\r\n                };\r\n\r\n                Tooltip.prototype.leave = function (obj) {\r\n                    var self = obj instanceof this.constructor ?\r\n                        obj : $(obj.currentTarget).data('bs.' + this.type);\r\n\r\n                    if (!self) {\r\n                        self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\r\n                        $(obj.currentTarget).data('bs.' + this.type, self)\r\n                    }\r\n\r\n                    if (obj instanceof $.Event) {\r\n                        self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\r\n                    }\r\n\r\n                    if (self.isInStateTrue()) return;\r\n\r\n                    clearTimeout(self.timeout);\r\n\r\n                    self.hoverState = 'out';\r\n\r\n                    if (!self.options.delay || !self.options.delay.hide) return self.hide();\r\n\r\n                    self.timeout = setTimeout(function () {\r\n                        if (self.hoverState == 'out') self.hide()\r\n                    }, self.options.delay.hide)\r\n                };\r\n\r\n                Tooltip.prototype.show = function () {\r\n\r\n                    //  将遮罩层以及提示栏的z-index提高比弹出框（1051）更高的1052，可以让在使用弹出框（popover)的同时，正常使用遮罩以及提示栏。\r\n                    app.shelter.upperZIndex();\r\n\r\n                    var e = $.Event('show.bs.' + this.type);\r\n\r\n                    if (this.hasContent() && this.enabled) {\r\n                        //add\r\n                        this.$element.trigger(e);\r\n\r\n                        var $tooltip = this.$element,\r\n                            tooltipUUID, resizeHandler,\r\n                            optionWidth = this.options.width,\r\n                            optionHeight = this.options.height;\r\n\r\n                        var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);\r\n                        if (e.isDefaultPrevented() || !inDom) return;\r\n                        var that = this;\r\n\r\n                        var $tip = this.tip();\r\n\r\n                        var tipId = this.getUID(this.type);\r\n\r\n                        this.setContent();\r\n                        $tip.attr('id', tipId);\r\n                        this.$element.attr('aria-describedby', tipId);\r\n\r\n                        if (this.options.animation) $tip.addClass('fade');\r\n\r\n                        var placement = typeof this.options.placement == 'function' ?\r\n                            this.options.placement.call(this, $tip[0], this.$element[0]) :\r\n                            this.options.placement;\r\n\r\n                        var autoToken = /\\s?auto?\\s?/i;\r\n                        var autoPlace = autoToken.test(placement);\r\n                        if (autoPlace) placement = placement.replace(autoToken, '') || 'top';\r\n\r\n\r\n                        $tip\r\n                            .detach()\r\n                            .css({display: 'block'})\r\n                            // .css({ top: 0, left: 0, display: 'block' })\r\n                            .addClass(placement)\r\n                            .data('bs.' + this.type, this);\r\n\r\n                        this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);\r\n\r\n                        // xieyirong@agree.com.cn\r\n                        // 2018-03-15\r\n                        // resizeHandler 初始化气泡尺寸以及监听窗口变化重置气泡尺寸\r\n                        if ((optionWidth || optionHeight)) {\r\n\r\n                            tooltipUUID = app.getUID();\r\n                            resizeHandler = function () {\r\n                                var tooltipHeight, tooltipWidth, windowHeight, windowWidth,\r\n                                    tooltipCss = {},\r\n                                    tooltipBodyCss, tooltipBodyHeight,\r\n                                    placement, pos, actualWidth, actualHeight, calculatedOffset;\r\n\r\n\r\n                                if (optionWidth) {\r\n                                    windowWidth = $window.width();\r\n\r\n                                    if (optionWidth.indexOf('%') !== -1) {\r\n                                        tooltipWidth = (parseInt(optionWidth, 10) / 100 || .8) * windowWidth;\r\n                                    } else {\r\n                                        tooltipWidth = parseInt(optionWidth, 10) || windowWidth * .8;\r\n                                    }\r\n\r\n                                    tooltipWidth = Math.min(tooltipWidth, windowWidth);\r\n                                    tooltipWidth = Math.max(tooltipWidth, 0);\r\n                                    tooltipCss.width = tooltipWidth;\r\n                                    tooltipCss.marginLeft = 0;\r\n                                }\r\n\r\n                                if (optionHeight) {\r\n                                    windowHeight = $window.height();\r\n\r\n                                    if (optionHeight.indexOf('%') !== -1) {\r\n                                        tooltipHeight = (parseInt(optionHeight, 10) / 100 || .7) * windowHeight;\r\n                                    } else {\r\n                                        tooltipHeight = parseInt(optionHeight, 10) || windowHeight * .7;\r\n                                    }\r\n\r\n                                    tooltipHeight = Math.min(tooltipHeight, windowHeight);\r\n\r\n                                    tooltipBodyHeight = tooltipHeight - $tip.children('.aweb-popover-header').height();\r\n\r\n                                    tooltipCss.height = tooltipHeight;\r\n                                    tooltipCss.marginTop = 0;\r\n\r\n                                    tooltipBodyCss = {\r\n                                        maxHeight: tooltipBodyHeight,\r\n                                        minHeight: tooltipBodyHeight\r\n                                    };\r\n                                }\r\n\r\n\r\n                                $tip.css(tooltipCss);\r\n                                if (tooltipBodyCss) {\r\n                                    $tip.children('.aweb-popover-body').css(tooltipBodyCss);\r\n                                }\r\n\r\n                                // resize 中更新 气泡位置\r\n\r\n                                placement = that.options.placement;\r\n                                pos = that.getPosition();\r\n                                actualWidth = $tip[0].offsetWidth;\r\n                                actualHeight = $tip[0].offsetHeight;\r\n                                calculatedOffset = that.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\r\n                                that.applyPlacement(calculatedOffset, placement);\r\n\r\n                            };\r\n\r\n                            $window.on('resize.' + tooltipUUID, resizeHandler);\r\n                            resizeHandler();\r\n\r\n                            this.uuid = tooltipUUID;\r\n                            this.resizeHandler = resizeHandler;\r\n                        }\r\n\r\n                        this.$element.trigger('inserted.bs.' + this.type);\r\n\r\n                        var pos = this.getPosition(),\r\n                            actualWidth = $tip[0].offsetWidth,\r\n                            actualHeight = $tip[0].offsetHeight,\r\n                            calculatedOffset, fixWidth, fixHeight, originFixWidth, originFixHeight, popoverHeaderHeight,\r\n                            popoverBodyHeight;\r\n\r\n                        if (autoPlace) {\r\n                            var orgPlacement = placement;\r\n                            var viewportDim = this.getPosition(this.$viewport);\r\n\r\n                            placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' :\r\n                                placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' :\r\n                                    placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' :\r\n                                        placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' :\r\n                                            placement;\r\n\r\n                            calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\r\n\r\n                            //对调整后方位为 left、top情况做处理，将原本的修改尺寸和调整后的修改尺寸作比较\r\n                            if (orgPlacement !== placement) {\r\n                                switch (placement) {\r\n                                    case 'left':\r\n                                        originFixWidth = viewportDim.width - pos.right;\r\n                                        if (calculatedOffset.left < 0) {\r\n                                            fixWidth = actualWidth + calculatedOffset.left;\r\n                                            if (fixWidth < originFixWidth) {\r\n                                                fixWidth = originFixWidth;\r\n                                                placement = orgPlacement;\r\n                                                $tip.css({'width': fixWidth + 'px'});\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    case 'top':\r\n                                        originFixHeight = viewportDim.height - pos.bottom;\r\n                                        if (calculatedOffset.top < 0) {\r\n                                            fixHeight = actualHeight + calculatedOffset.top;\r\n                                            if (fixHeight < originFixHeight) {\r\n                                                fixHeight = originFixHeight - 10;\r\n                                                placement = orgPlacement;\r\n                                                popoverHeaderHeight = $tip.children('.aweb-popover-header').height();\r\n                                                popoverBodyHeight = fixHeight - popoverHeaderHeight;\r\n                                                $tip.css({'height': fixHeight + 'px'});\r\n                                                $tip.find('.aweb-popover-body').css({\r\n                                                    'min-height': popoverBodyHeight + 'px',\r\n                                                    'max-height': popoverBodyHeight + 'px'\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                }\r\n\r\n                            }\r\n\r\n                            $tip\r\n                                .removeClass(orgPlacement)\r\n                                .addClass(placement)\r\n                        }\r\n\r\n                        calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\r\n\r\n                        //阻止气泡溢出\r\n                        switch (placement) {\r\n                            case 'left':\r\n                            case 'right':\r\n                                if (calculatedOffset.left < 0) {\r\n                                    fixWidth = actualWidth + calculatedOffset.left;\r\n                                    $tip.css({'width': fixWidth + 'px'});\r\n                                    calculatedOffset.left = 0;\r\n                                }\r\n                                break;\r\n                            case 'top':\r\n                            case 'bottm':\r\n                                if (calculatedOffset.top < 0) {\r\n                                    fixHeight = actualHeight + calculatedOffset.top;\r\n                                    popoverHeaderHeight = $tip.children('.aweb-popover-header').height();\r\n                                    popoverBodyHeight = fixHeight - popoverHeaderHeight;\r\n                                    $tip.css({'height': fixHeight + 'px'});\r\n                                    $tip.find('.aweb-popover-body').css({\r\n                                        'min-height': popoverBodyHeight + 'px',\r\n                                        'max-height': popoverBodyHeight + 'px'\r\n                                    });\r\n                                    calculatedOffset.top = 0;\r\n                                }\r\n                                break;\r\n                        }\r\n\r\n                        this.applyPlacement(calculatedOffset, placement);\r\n\r\n                        var complete = function () {\r\n                            var prevHoverState = that.hoverState;\r\n                            that.$element.trigger('shown.bs.' + that.type);\r\n                            that.hoverState = null;\r\n\r\n                            if (prevHoverState == 'out') that.leave(that)\r\n                        };\r\n\r\n                        $.support.transition && this.$tip.hasClass('fade') ?\r\n                            $tip\r\n                                .one('bsTransitionEnd', complete)\r\n                                .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n                            complete()\r\n                    }\r\n                };\r\n\r\n                Tooltip.prototype.applyPlacement = function (offset, placement) {\r\n                    var $tip = this.tip();\r\n                    var width = $tip[0].offsetWidth;\r\n                    var height = $tip[0].offsetHeight;\r\n\r\n                    // manually read margins because getBoundingClientRect includes difference\r\n                    var marginTop = parseInt($tip.css('margin-top'), 10);\r\n                    var marginLeft = parseInt($tip.css('margin-left'), 10);\r\n\r\n                    // we must check for NaN for ie 8/9\r\n                    if (isNaN(marginTop)) marginTop = 0;\r\n                    if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n                    offset.top += marginTop;\r\n                    offset.left += marginLeft;\r\n\r\n                    // $.fn.offset doesn't round pixel values\r\n                    // so we use setOffset directly with our own function B-0\r\n                    $.offset.setOffset($tip[0], $.extend({\r\n                        using: function (props) {\r\n                            $tip.css({\r\n                                top: Math.round(props.top),\r\n                                left: Math.round(props.left)\r\n                            })\r\n                        }\r\n                    }, offset), 0);\r\n\r\n                    $tip.addClass('in');\r\n\r\n                    // check to see if placing tip in new offset caused the tip to resize itself\r\n                    var actualWidth = $tip[0].offsetWidth;\r\n                    var actualHeight = $tip[0].offsetHeight;\r\n\r\n                    if (placement == 'top' && actualHeight != height) {\r\n                        offset.top = offset.top + height - actualHeight\r\n                    }\r\n\r\n                    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n                    if (delta.left) offset.left += delta.left;\r\n                    else offset.top += delta.top;\r\n\r\n                    var isVertical = /top|bottom/.test(placement);\r\n                    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n                    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n                    $tip.offset(offset);\r\n\r\n                    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\r\n                };\r\n\r\n                Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\r\n                    this.arrow()\r\n                        .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                        .css(isVertical ? 'top' : 'left', '')\r\n                };\r\n\r\n                Tooltip.prototype.setContent = function () {\r\n                    var $tip = this.tip();\r\n                    var title = this.getTitle();\r\n\r\n                    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);\r\n                    $tip.removeClass('fade in top bottom left right')\r\n                };\r\n\r\n                Tooltip.prototype.hide = function (callback) {\r\n                    //  将遮罩层以及提示栏的z-index还原\r\n                    app.shelter.lowerZIndex();\r\n\r\n                    var that = this;\r\n                    var $tip = $(this.$tip);\r\n                    var e = $.Event('hide.bs.' + this.type);\r\n\r\n                    function complete() {\r\n                        if (that.hoverState != 'in') $tip.detach();\r\n                        if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.\r\n                            that.$element\r\n                                .removeAttr('aria-describedby')\r\n                                .trigger('hidden.bs.' + that.type)\r\n                        }\r\n                        callback && callback()\r\n                    }\r\n\r\n                    this.$element.trigger(e);\r\n\r\n                    // null resizeHandler\r\n                    if (this.uuid) {\r\n                        $window.off('resize.' + this.uuid);\r\n                        this.resizeHandler = null;\r\n                    }\r\n\r\n                    if (e.isDefaultPrevented()) return;\r\n\r\n                    $tip.removeClass('in');\r\n\r\n                    $.support.transition && $tip.hasClass('fade') ?\r\n                        $tip\r\n                            .one('bsTransitionEnd', complete)\r\n                            .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n                        complete();\r\n\r\n                    this.hoverState = null;\r\n\r\n                    return this\r\n                };\r\n\r\n                Tooltip.prototype.fixTitle = function () {\r\n                    var $e = this.$element;\r\n                    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\r\n                        $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\r\n                    }\r\n                };\r\n\r\n                Tooltip.prototype.hasContent = function () {\r\n                    return this.getTitle()\r\n                };\r\n\r\n                Tooltip.prototype.getPosition = function ($element) {\r\n                    $element = $element || this.$element;\r\n\r\n                    var el = $element[0];\r\n                    var isBody = el.tagName == 'BODY';\r\n\r\n                    var elRect = el.getBoundingClientRect();\r\n                    if (elRect.width == null) {\r\n                        // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n                        elRect = $.extend({}, elRect, {\r\n                            width: elRect.right - elRect.left,\r\n                            height: elRect.bottom - elRect.top\r\n                        })\r\n                    }\r\n                    var isSvg = window.SVGElement && el instanceof window.SVGElement;\r\n                    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\r\n                    // See https://github.com/twbs/bootstrap/issues/20280\r\n                    var elOffset = isBody ? {top: 0, left: 0} : (isSvg ? null : $element.offset());\r\n                    var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()};\r\n                    var outerDims = isBody ? {width: $(window).width(), height: $(window).height()} : null;\r\n\r\n                    return $.extend({}, elRect, scroll, outerDims, elOffset)\r\n                };\r\n\r\n                Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\r\n                    return placement == 'bottom' ? {\r\n                            top: pos.top + pos.height,\r\n                            left: pos.left + pos.width / 2 - actualWidth / 2\r\n                        } :\r\n                        placement == 'top' ? {\r\n                                top: pos.top - actualHeight,\r\n                                left: pos.left + pos.width / 2 - actualWidth / 2\r\n                            } :\r\n                            placement == 'left' ? {\r\n                                    top: pos.top + pos.height / 2 - actualHeight / 2,\r\n                                    left: pos.left - actualWidth\r\n                                } :\r\n                                /* placement == 'right' */\r\n                                {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}\r\n\r\n                };\r\n\r\n                Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\r\n                    var delta = {top: 0, left: 0};\r\n                    if (!this.$viewport) return delta;\r\n\r\n                    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;\r\n                    var viewportDimensions = this.getPosition(this.$viewport);\r\n\r\n                    if (/right|left/.test(placement)) {\r\n                        var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;\r\n                        var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n                        if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n                            delta.top = viewportDimensions.top - topEdgeOffset\r\n                        } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n                            delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\r\n                        }\r\n                    } else {\r\n                        var leftEdgeOffset = pos.left - viewportPadding;\r\n                        var rightEdgeOffset = pos.left + viewportPadding + actualWidth;\r\n                        if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n                            delta.left = viewportDimensions.left - leftEdgeOffset\r\n                        } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n                            delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\r\n                        }\r\n                    }\r\n\r\n                    return delta\r\n                };\r\n\r\n                Tooltip.prototype.getTitle = function () {\r\n                    var title;\r\n                    var $e = this.$element;\r\n                    var o = this.options;\r\n\r\n                    title = (typeof o.title == 'function' ? o.title.call($e[0]) : o.title) || $e.attr('data-original-title');\r\n\r\n                    return title\r\n                };\r\n\r\n                Tooltip.prototype.getUID = function (prefix) {\r\n                    do prefix += ~~(Math.random() * 1000000);\r\n                    while (document.getElementById(prefix));\r\n                    return prefix\r\n                };\r\n\r\n                Tooltip.prototype.tip = function () {\r\n                    if (!this.$tip) {\r\n                        this.$tip = $(this.options.template);\r\n                        if (this.$tip.length != 1) {\r\n                            throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\r\n                        }\r\n                    }\r\n                    return this.$tip\r\n                };\r\n\r\n                Tooltip.prototype.arrow = function () {\r\n                    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\r\n                };\r\n\r\n                Tooltip.prototype.enable = function () {\r\n                    this.enabled = true\r\n                };\r\n\r\n                Tooltip.prototype.disable = function () {\r\n                    this.enabled = false\r\n                };\r\n\r\n                Tooltip.prototype.toggleEnabled = function () {\r\n                    this.enabled = !this.enabled\r\n                };\r\n\r\n                Tooltip.prototype.toggle = function (e) {\r\n                    var self = this;\r\n                    if (e) {\r\n                        self = $(e.currentTarget).data('bs.' + this.type);\r\n                        if (!self) {\r\n                            self = new this.constructor(e.currentTarget, this.getDelegateOptions());\r\n                            $(e.currentTarget).data('bs.' + this.type, self)\r\n                        }\r\n                    }\r\n\r\n                    if (e) {\r\n                        self.inState.click = !self.inState.click;\r\n                        if (self.isInStateTrue()) self.enter(self);\r\n                        else self.leave(self)\r\n                    } else {\r\n                        self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\r\n                    }\r\n                };\r\n\r\n                Tooltip.prototype.destroy = function () {\r\n                    var that = this;\r\n                    clearTimeout(this.timeout);\r\n                    this.hide(function () {\r\n                        that.$element.off('.' + that.type).removeData('bs.' + that.type);\r\n                        if (that.$tip) {\r\n                            that.$tip.detach()\r\n                        }\r\n                        that.$tip = null;\r\n                        that.$arrow = null;\r\n                        that.$viewport = null;\r\n                        that.$element = null\r\n                    })\r\n                };\r\n\r\n\r\n                // TOOLTIP PLUGIN DEFINITION\r\n                // =========================\r\n\r\n                function Plugin(option) {\r\n                    return this.each(function () {\r\n                        var $this = $(this);\r\n                        var data = $this.data('bs.tooltip');\r\n                        var options = typeof option == 'object' && option;\r\n\r\n                        if (!data && /destroy|hide/.test(option)) return;\r\n                        if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)));\r\n                        if (typeof option == 'string') data[option]()\r\n                    })\r\n                }\r\n\r\n                var old = $.fn.tooltip;\r\n\r\n                $.fn.tooltip = Plugin;\r\n                $.fn.tooltip.Constructor = Tooltip;\r\n\r\n\r\n                // TOOLTIP NO CONFLICT\r\n                // ===================\r\n\r\n                $.fn.tooltip.noConflict = function () {\r\n                    $.fn.tooltip = old;\r\n                    return this\r\n                }\r\n\r\n            }(jQuery);\r\n\r\n\r\n            //popover\r\n\r\n            +function ($) {\r\n                'use strict';\r\n\r\n                // POPOVER PUBLIC CLASS DEFINITION\r\n                // ===============================\r\n\r\n                var Popover = function (element, options) {\r\n                    this.init('popover', element, options)\r\n                };\r\n\r\n                if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');\r\n\r\n                Popover.VERSION = '3.3.7';\r\n\r\n                Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\r\n                    placement: 'right',\r\n                    trigger: 'click',\r\n                    content: '',\r\n                    template: '<div class=\"aweb-popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"aweb-popover-title\"></h3><div class=\"aweb-popover-content\"></div></div>'\r\n                });\r\n\r\n\r\n                // NOTE: POPOVER EXTENDS tooltip.js\r\n                // ================================\r\n\r\n                Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);\r\n\r\n                Popover.prototype.constructor = Popover;\r\n\r\n                Popover.prototype.getDefaults = function () {\r\n                    return Popover.DEFAULTS\r\n                };\r\n\r\n                Popover.prototype.setContent = function () {\r\n                    var $tip = this.tip();\r\n                    var title = this.getTitle();\r\n                    var content = this.getContent();\r\n\r\n                    $tip.find('.aweb-popover-title')[this.options.html ? 'html' : 'text'](title);\r\n                    $tip.find('.aweb-popover-content').children().detach().end()[ // we use append for html objects to maintain js events\r\n                        this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\r\n                        ](content);\r\n\r\n                    $tip.removeClass('fade top bottom left right in');\r\n\r\n                    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\r\n                    // this manually by checking the contents.\r\n                    if (!$tip.find('.aweb-popover-title').html()) $tip.find('.aweb-popover-title').hide()\r\n                };\r\n\r\n                Popover.prototype.hasContent = function () {\r\n                    return this.getTitle() || this.getContent()\r\n                };\r\n\r\n                Popover.prototype.getContent = function () {\r\n                    var $e = this.$element;\r\n                    var o = this.options;\r\n\r\n                    return $e.attr('data-content') ||\r\n                        (typeof o.content == 'function' ?\r\n                            o.content.call($e[0]) :\r\n                            o.content)\r\n                };\r\n\r\n                Popover.prototype.arrow = function () {\r\n                    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\r\n                };\r\n\r\n\r\n                // POPOVER PLUGIN DEFINITION\r\n                // =========================\r\n\r\n                function Plugin(option) {\r\n                    return this.each(function () {\r\n                        var $this = $(this);\r\n                        var data = $this.data('bs.popover');\r\n                        var options = typeof option == 'object' && option;\r\n\r\n                        if (!data && /destroy|hide/.test(option)) return;\r\n                        if (!data) $this.data('bs.popover', (data = new Popover(this, options)));\r\n                        if (typeof option == 'string') data[option]()\r\n                    })\r\n                }\r\n\r\n                var old = $.fn.popover;\r\n\r\n                $.fn.popover = Plugin;\r\n                $.fn.popover.Constructor = Popover;\r\n\r\n\r\n                // POPOVER NO CONFLICT\r\n                // ===================\r\n\r\n                $.fn.popover.noConflict = function () {\r\n                    $.fn.popover = old;\r\n                    return this\r\n                }\r\n\r\n            }(jQuery);\r\n\r\n            popover = function () {\r\n\r\n\r\n                function popover(options) {\r\n\r\n                    // var $popover = $(options.$elem).closest('button') !== 0 ? $(options.$elem).closest('button') : $(options.$elem);\r\n\r\n                    // if ($popover && $popover.data(\"bs.popover\")) {\r\n                    //     return false;\r\n                    // }\r\n\r\n                    var CONST = {\r\n                            POPOVER_LANG: {\r\n                                TITLE: '气泡',\r\n                                CONTENT: '气泡内容',\r\n                                DEFAULT_BTN: '<button title=\"全屏切换\" type=\"button\" data-role=\"toggleSize\"><i class=\"aweb-popover-header-icon aui aui-quanping fa fa-expand\"></i></button><button title=\"关闭\" type=\"button\" data-role=\"close\"><i class=\"aweb-popover-header-icon aui aui-guanbi iconfont icon-topbar-close\"></i></button>'\r\n                            },\r\n                            POPOVER_NAMESPACE: '.pop'\r\n                        },\r\n                        _default = {\r\n                            title: CONST.POPOVER_LANG.TITLE, //弹出框标题，非必填\r\n                            content: CONST.POPOVER_LANG.CONTENT, //弹出框内容\r\n                            init: null, //初始化函数\r\n                            confirmHandler: function () {\r\n                            }, //点击确定按钮触发的函数，参数以数组形式写在args那里\r\n                            args: [],\r\n                            html: true,\r\n                            container: 'body',\r\n                            height: '50%',\r\n                            width: '80%',\r\n                            placement: 'auto right',\r\n                            template: '<div class=\"aweb-popover\"  tabindex=\"0\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"aweb-popover-header\"><h4 class=\"aweb-popover-title\"></h4><div class=\"btn-group\">' +\r\n                                CONST.POPOVER_LANG.DEFAULT_BTN +\r\n                                '</div></div><div class=\"aweb-popover-body\"><div class=\"aweb-popover-content\"></div></div></div>'\r\n                        };\r\n\r\n                    var Pop = function (options) {\r\n                        this.options = $.extend({}, _default, options);\r\n                        this.init();\r\n                        this.on(this.events);\r\n                    };\r\n\r\n                    Pop.fn = Pop.prototype = {\r\n                        Constructor: Pop,\r\n                        events: {\r\n                            toggleSize: function (e, context) {\r\n                                var popoverBodyHeight, popoverBodyCss;\r\n\r\n                                // 设置窗口大小\r\n                                context.$tip.toggleClass('popover-lg');\r\n\r\n                                //调整 popover-body 高度\r\n                                popoverBodyHeight = context.$tip.height() - context.$tip.children('.aweb-popover-header').height();\r\n\r\n                                popoverBodyCss = {\r\n                                    maxHeight: popoverBodyHeight,\r\n                                    minHeight: popoverBodyHeight\r\n                                };\r\n\r\n                                if (popoverBodyCss) {\r\n                                    context.$tip.children('.aweb-popover-body').css(popoverBodyCss);\r\n                                }\r\n\r\n                                context.trigger('screenChange');\r\n\r\n                            },\r\n\r\n                            close: function (e, context) {\r\n                                context.$element && context.$element.popover('destroy');\r\n                                if (context.isShow) {\r\n                                    var handler = context.options.confirmHandler;\r\n                                    $.isFunction(handler) && handler.apply(context, context.options.args);\r\n                                    context.isShow = false;\r\n                                    context.popInstance.destroy();\r\n                                }\r\n                            }\r\n                        },\r\n\r\n                        init: function () {\r\n\r\n                            var listen = {},\r\n                                i, k, item, $newBtn,\r\n                                that = this,\r\n                                onList = this.options.on,\r\n                                $buttons, $button, btnClass, iconNamespace;\r\n\r\n\r\n                            this.isShow = true;\r\n                            this.options.args = [this].concat(this.options.args);\r\n\r\n                            if (!this.options.hasHeader) {\r\n                                this.options.template = '<div class=\"aweb-popover\"  tabindex=\"0\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"aweb-popover-body\"><div class=\"aweb-popover-content\"></div></div></div>';\r\n                            }\r\n\r\n                            //事件散列处理\r\n                            for (i in onList) {\r\n\r\n                                if (onList[i].btnName && onList[i].callback) {\r\n                                    listen[onList[i].btnName] = onList[i].callback;\r\n                                }\r\n\r\n                            }\r\n\r\n                            this.events = $.extend({}, this.events, listen);\r\n\r\n\r\n                            for (k in this.events) {\r\n                                this.events[k + CONST.POPOVER_NAMESPACE] = this.events[k];\r\n                                delete this.events[k];\r\n                            }\r\n\r\n                            if ($.isFunction(this.options.$elem)) {\r\n                                this.options.$elem = this.options.$elem();\r\n                            }\r\n\r\n                            this.$element = $(this.options.$elem).closest('button').length !== 0 ? $(this.options.$elem).closest('button') : $(this.options.$elem).closest('span').length !== 0 ? $(this.options.$elem).closest('span') : $(this.options.$elem);\r\n\r\n                            if ($.isFunction(this.options.content)) {\r\n                                this.options.content = this.options.content();\r\n                            }\r\n\r\n                            this.$element.popover({\r\n                                title: this.options.title,\r\n                                content: this.options.content,\r\n                                html: this.options.html,\r\n                                container: this.options.container,\r\n                                height: this.options.height,\r\n                                width: this.options.width,\r\n                                placement: this.options.placement,\r\n                                template: this.options.template,\r\n                                animation: false\r\n                            }).popover('show');\r\n\r\n                            // 初始化模拟鼠标点击\r\n                            if (this.options.fixClick) {\r\n                                this.$element.data('bs.popover').inState.click = true;\r\n                            }\r\n\r\n                            this.popInstance = this.$element.data('bs.popover');\r\n\r\n                            //保存气泡弹出框的索引\r\n                            this.$tip = this.$element.data('bs.popover').tip();\r\n\r\n                            this.$btnCtn = this.$tip.find('.aweb-popover-header > .btn-group').html(CONST.POPOVER_LANG.DEFAULT_BTN);\r\n\r\n                            $buttons = this.$btnCtn.find('button i');\r\n\r\n                            // 绑定 options.init 中的 this 为 this.$tip 对象，将 this <Pop实例> 作为第一个参数传入\r\n\r\n                            if ($.isFunction(this.options.init)) {\r\n                                this.options.init.apply(this.$tip, this.options.args);\r\n                            }\r\n\r\n                            // 处理 aui 与 aweb 图标关系\r\n\r\n                            if (window.auiApp && window.auiApp.mode !== 'virtualizer') {\r\n                                $buttons.each(function (index, item) {\r\n                                    $button = $(item);\r\n                                    btnClass = item.className.split(' ');\r\n\r\n                                    $.each(btnClass, function (index, item) {\r\n                                        if (item !== 'aweb-popover-header-icon' && item.indexOf('aui') < 0) {\r\n                                            $button.removeClass(item);\r\n                                        }\r\n                                    });\r\n                                });\r\n                            } else {\r\n\r\n                                $buttons.each(function (index, item) {\r\n                                    $(item).removeClass('aui');\r\n                                });\r\n                            }\r\n\r\n                            //合成按钮组（默认 关闭和全屏，并监听对应按钮的点击事件，并 trigger 对应注册的事件）\r\n\r\n                            for (i in onList) {\r\n                                //正则处理图标前缀\r\n                                if (onList[i].btnName && onList[i].icon && onList[i].title) {\r\n                                    iconNamespace = onList[i].icon.match(/([a-z]+)-([a-z]+)/)[1];\r\n                                    $newBtn = '<button title=\"' + onList[i].title + '\" type=\"button\" data-role=\"' + onList[i].btnName + '\"><i class=\"aweb-popover-header-icon ' + iconNamespace + \" \" + onList[i].icon + '\"></i></button>';\r\n                                    this.$btnCtn.prepend($newBtn);\r\n                                }\r\n\r\n                            }\r\n\r\n                            this.$tip.on('click' + CONST.POPOVER_NAMESPACE, '.aweb-popover-header button', function (e) {\r\n                                that.$tip.trigger($(this).attr('data-role') + CONST.POPOVER_NAMESPACE, that);\r\n                            });\r\n\r\n                            this.$tip.focus();\r\n\r\n                            //focusout\r\n                            this.$tip.on('focusout' + CONST.POPOVER_NAMESPACE, function (e) {\r\n\r\n                                // relatedTarget 是 aweb-popover 中的元素\r\n                                if ($(e.relatedTarget).closest('.aweb-popover').is(that.$tip)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (that.isShow) {\r\n                                    if ((that.$tip.is($(e.target)) || that.$tip.is($(e.target).closest('.aweb-popover'))) && (!e.relatedTarget || $(e.relatedTarget).closest('.aweb-popover').length === 0)) {\r\n\r\n                                        // 点击 popover 之外的区域造成的失焦\r\n                                        if (that.options.focusable !== false) {\r\n                                            that.close();\r\n                                        }\r\n\r\n                                    } else {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                                //其他提前触发 close 的失焦行为都调用 Pop 实例的 close() 方法\r\n\r\n                            });\r\n\r\n                            // 监听popover 的 hide 事件，并执行 confirmHandler\r\n\r\n                            this.$element.one('hide.bs.popover', function () {\r\n                                that.isShow = false;\r\n                                var handler = that.options.confirmHandler;\r\n                                $.isFunction(handler) && handler.apply(that, that.options.args);\r\n                            });\r\n\r\n                            // 监听popover 的 hidden 事件，并销毁 popover 实例、Pop实例\r\n                            this.$element.one('hidden.bs.popover', function () {\r\n                                that.destroy();\r\n                            });\r\n\r\n                        },\r\n\r\n                        on: function () {\r\n                            this.$tip.on.apply(this.$tip, arguments);\r\n                        },\r\n\r\n                        off: function () {\r\n                            this.$tip.off.apply(this.$tip, arguments);\r\n                        },\r\n\r\n                        trigger: function () {\r\n                            this.$tip.trigger.apply(this.$tip, arguments);\r\n                        },\r\n\r\n                        destroy: function () {\r\n                            this.off();\r\n                            this.$element = null;\r\n                            this.$btnCtn = null;\r\n                            this.$tip = null;\r\n                            this.options = null;\r\n                        },\r\n\r\n                        close: function () {\r\n                            this.$tip && this.$tip.trigger('close', this);\r\n                        },\r\n\r\n                        toggleSize: function () {\r\n                            this.$tip && this.$tip.trigger('toggleSize', this);\r\n                        },\r\n\r\n                        setCache: function (key, value) {\r\n                            if (!this.cache) {\r\n                                this.cache = {}\r\n                            }\r\n                            this.cache[key] = value;\r\n                        },\r\n\r\n                        getCache: function (key) {\r\n                            if (this.cache) {\r\n                                return this.cache[key];\r\n                            }\r\n                        }\r\n\r\n                    };\r\n\r\n                    return new Pop(options);\r\n\r\n                }\r\n\r\n                return popover;\r\n            }();\r\n\r\n            return popover;\r\n        }()",
params:[{name:"option",desp:"配置",type:"object",children:[{name:"$elem",type:"jQuery",desp:"气泡的触发元素",defaultValue:"$el",details:"表示气泡触发元素的jQuery对象"},{name:"title",type:"string",desp:"标题",defaultValue:"气泡",details:"气泡标题，非必填"},{name:"content",type:"string",desp:"气泡内容",defaultValue:"气泡内容",details:"可以是html字符串；或函数，返回内容的jQuery对象"},{name:"hasHeader",type:"boolean",desp:"是否显示气泡顶部(标题、按钮)",defaultValue:true,details:"配置是否显示气泡顶部"},{name:"init",type:"handler",desp:"初始化函数",defaultValue:"function(){}",details:"打开气泡时，加载内容的方法，其中入参为agrs的参数，第一个参数为 Pop 气泡实例对象，this指向气泡的 jQuery 对象"},{name:"confirmHandler",type:"handler",desp:"关闭确认事件",defaultValue:"function(){}",details:"确定按钮点击事件，其中入参为agrs的参数，第一个参数为 Pop 气泡实例对象，this 指向 Pop 气泡实例对象，this.$tip 指向气泡的 jQuery 对象"},{name:"args",type:"array",desp:"入参",defaultValue:[]},{name:"on",type:"object",desp:"新增按钮配置",details:"为气泡窗口新增按钮组的按钮，并配置相关参数",children:[{name:"iconBtn",type:"object",desp:"按钮配置",details:"配置一个新的按钮",children:[{name:"btnName",type:"string",desp:"按钮名称",defaultValue:"",details:'必需，配置按钮功能的英文名称，填入按钮的功能名，如"preview"'},{name:"icon",type:"string",desp:"按钮图标",defaultValue:"",details:'必需，配置按钮的图标，填入icon的CSS类名，如"aui-guanbi"'},{name:"title",type:"string",desp:"按钮描述",defaultValue:"",details:'必需，配置按钮的描述，如"关闭"'},{name:"callback",type:"handler",desp:"按钮事件",defaultValue:"function(){}",details:"必需，新增按钮事件，其中入参为 e 事件对象和 context Pop气泡实例（上下文），this指向气泡的 DOM 对象"}],defaultValue:""}],defaultValue:""},{name:"height",type:"string",desp:"高度",defaultValue:"80%",details:"可配置气泡高度"},{name:"width",type:"string",desp:"宽度",defaultValue:"80%",details:"可配置气泡宽度"},{name:"placement",type:"string",desp:"显示位置",defaultValue:"right auto",details:'可配置 (top | bottom | left | right | auto)，如果使用"auto"，将会再次调整，比如声明"right auto" 弹出框将尽量显示在右边，实在不行才显示在左边 '},{name:"focusable",type:"boolean",desp:"可否失焦触发气泡消失",defaultValue:true,details:"默认可通过失焦触发气泡消失，代码气泡不通过失焦触发气泡消失，需要设置 fasle"}],defaultValue:""}],hasReturn:false,details:"",returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.popover=function () {\r\n            var popover;\r\n            //tooltip\r\n\r\n            +function ($) {\r\n\r\n                'use strict';\r\n\r\n                // TOOLTIP PUBLIC CLASS DEFINITION\r\n                // ===============================\r\n\r\n                var Tooltip = function (element, options) {\r\n                    this.type = null;\r\n                    this.options = null;\r\n                    this.enabled = null;\r\n                    this.timeout = null;\r\n                    this.hoverState = null;\r\n                    this.$element = null;\r\n                    this.inState = null;\r\n\r\n                    this.init('tooltip', element, options)\r\n                };\r\n\r\n                var $window = $(window);\r\n\r\n                Tooltip.VERSION = '3.3.7';\r\n\r\n                Tooltip.TRANSITION_DURATION = 150;\r\n\r\n                Tooltip.DEFAULTS = {\r\n                    animation: true,\r\n                    placement: 'top',\r\n                    selector: false,\r\n                    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\r\n                    trigger: 'hover focus',\r\n                    title: '',\r\n                    delay: 0,\r\n                    html: false,\r\n                    container: false,\r\n                    viewport: {\r\n                        selector: 'body',\r\n                        padding: 0\r\n                    }\r\n                };\r\n\r\n                Tooltip.prototype.init = function (type, element, options) {\r\n                    this.enabled = true;\r\n                    this.type = type;\r\n                    this.$element = $(element);\r\n                    this.options = this.getOptions(options);\r\n                    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport));\r\n                    this.inState = {click: false, hover: false, focus: false};\r\n\r\n                    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\r\n                        throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\r\n                    }\r\n\r\n                    var triggers = this.options.trigger.split(' ');\r\n\r\n                    for (var i = triggers.length; i--;) {\r\n                        var trigger = triggers[i];\r\n\r\n                        if (trigger == 'click') {\r\n                            this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\r\n                        } else if (trigger != 'manual') {\r\n                            var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';\r\n                            var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';\r\n\r\n                            this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));\r\n                            this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\r\n                        }\r\n                    }\r\n\r\n                    this.options.selector ?\r\n                        (this._options = $.extend({}, this.options, {trigger: 'manual', selector: ''})) :\r\n                        this.fixTitle()\r\n                };\r\n\r\n                Tooltip.prototype.getDefaults = function () {\r\n                    return Tooltip.DEFAULTS\r\n                };\r\n\r\n                Tooltip.prototype.getOptions = function (options) {\r\n                    options = $.extend({}, this.getDefaults(), this.$element.data(), options);\r\n\r\n                    if (options.delay && typeof options.delay == 'number') {\r\n                        options.delay = {\r\n                            show: options.delay,\r\n                            hide: options.delay\r\n                        }\r\n                    }\r\n\r\n                    return options\r\n                };\r\n\r\n                Tooltip.prototype.getDelegateOptions = function () {\r\n                    var options = {};\r\n                    var defaults = this.getDefaults();\r\n\r\n                    this._options && $.each(this._options, function (key, value) {\r\n                        if (defaults[key] != value) options[key] = value\r\n                    });\r\n\r\n                    return options\r\n                };\r\n\r\n                Tooltip.prototype.enter = function (obj) {\r\n                    var self = obj instanceof this.constructor ?\r\n                        obj : $(obj.currentTarget).data('bs.' + this.type);\r\n\r\n                    if (!self) {\r\n                        self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\r\n                        $(obj.currentTarget).data('bs.' + this.type, self)\r\n                    }\r\n\r\n                    if (obj instanceof $.Event) {\r\n                        self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\r\n                    }\r\n\r\n                    if (self.tip().hasClass('in') || self.hoverState == 'in') {\r\n                        self.hoverState = 'in';\r\n                        return\r\n                    }\r\n\r\n                    clearTimeout(self.timeout);\r\n\r\n                    self.hoverState = 'in';\r\n\r\n                    if (!self.options.delay || !self.options.delay.show) return self.show();\r\n\r\n                    self.timeout = setTimeout(function () {\r\n                        if (self.hoverState == 'in') self.show()\r\n                    }, self.options.delay.show)\r\n                };\r\n\r\n                Tooltip.prototype.isInStateTrue = function () {\r\n                    for (var key in this.inState) {\r\n                        if (this.inState[key]) return true\r\n                    }\r\n\r\n                    return false\r\n                };\r\n\r\n                Tooltip.prototype.leave = function (obj) {\r\n                    var self = obj instanceof this.constructor ?\r\n                        obj : $(obj.currentTarget).data('bs.' + this.type);\r\n\r\n                    if (!self) {\r\n                        self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\r\n                        $(obj.currentTarget).data('bs.' + this.type, self)\r\n                    }\r\n\r\n                    if (obj instanceof $.Event) {\r\n                        self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\r\n                    }\r\n\r\n                    if (self.isInStateTrue()) return;\r\n\r\n                    clearTimeout(self.timeout);\r\n\r\n                    self.hoverState = 'out';\r\n\r\n                    if (!self.options.delay || !self.options.delay.hide) return self.hide();\r\n\r\n                    self.timeout = setTimeout(function () {\r\n                        if (self.hoverState == 'out') self.hide()\r\n                    }, self.options.delay.hide)\r\n                };\r\n\r\n                Tooltip.prototype.show = function () {\r\n\r\n                    //  将遮罩层以及提示栏的z-index提高比弹出框（1051）更高的1052，可以让在使用弹出框（popover)的同时，正常使用遮罩以及提示栏。\r\n                    app.shelter.upperZIndex();\r\n\r\n                    var e = $.Event('show.bs.' + this.type);\r\n\r\n                    if (this.hasContent() && this.enabled) {\r\n                        //add\r\n                        this.$element.trigger(e);\r\n\r\n                        var $tooltip = this.$element,\r\n                            tooltipUUID, resizeHandler,\r\n                            optionWidth = this.options.width,\r\n                            optionHeight = this.options.height;\r\n\r\n                        var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);\r\n                        if (e.isDefaultPrevented() || !inDom) return;\r\n                        var that = this;\r\n\r\n                        var $tip = this.tip();\r\n\r\n                        var tipId = this.getUID(this.type);\r\n\r\n                        this.setContent();\r\n                        $tip.attr('id', tipId);\r\n                        this.$element.attr('aria-describedby', tipId);\r\n\r\n                        if (this.options.animation) $tip.addClass('fade');\r\n\r\n                        var placement = typeof this.options.placement == 'function' ?\r\n                            this.options.placement.call(this, $tip[0], this.$element[0]) :\r\n                            this.options.placement;\r\n\r\n                        var autoToken = /\\s?auto?\\s?/i;\r\n                        var autoPlace = autoToken.test(placement);\r\n                        if (autoPlace) placement = placement.replace(autoToken, '') || 'top';\r\n\r\n\r\n                        $tip\r\n                            .detach()\r\n                            .css({display: 'block'})\r\n                            // .css({ top: 0, left: 0, display: 'block' })\r\n                            .addClass(placement)\r\n                            .data('bs.' + this.type, this);\r\n\r\n                        this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);\r\n\r\n                        // xieyirong@agree.com.cn\r\n                        // 2018-03-15\r\n                        // resizeHandler 初始化气泡尺寸以及监听窗口变化重置气泡尺寸\r\n                        if ((optionWidth || optionHeight)) {\r\n\r\n                            tooltipUUID = app.getUID();\r\n                            resizeHandler = function () {\r\n                                var tooltipHeight, tooltipWidth, windowHeight, windowWidth,\r\n                                    tooltipCss = {},\r\n                                    tooltipBodyCss, tooltipBodyHeight,\r\n                                    placement, pos, actualWidth, actualHeight, calculatedOffset;\r\n\r\n\r\n                                if (optionWidth) {\r\n                                    windowWidth = $window.width();\r\n\r\n                                    if (optionWidth.indexOf('%') !== -1) {\r\n                                        tooltipWidth = (parseInt(optionWidth, 10) / 100 || .8) * windowWidth;\r\n                                    } else {\r\n                                        tooltipWidth = parseInt(optionWidth, 10) || windowWidth * .8;\r\n                                    }\r\n\r\n                                    tooltipWidth = Math.min(tooltipWidth, windowWidth);\r\n                                    tooltipWidth = Math.max(tooltipWidth, 0);\r\n                                    tooltipCss.width = tooltipWidth;\r\n                                    tooltipCss.marginLeft = 0;\r\n                                }\r\n\r\n                                if (optionHeight) {\r\n                                    windowHeight = $window.height();\r\n\r\n                                    if (optionHeight.indexOf('%') !== -1) {\r\n                                        tooltipHeight = (parseInt(optionHeight, 10) / 100 || .7) * windowHeight;\r\n                                    } else {\r\n                                        tooltipHeight = parseInt(optionHeight, 10) || windowHeight * .7;\r\n                                    }\r\n\r\n                                    tooltipHeight = Math.min(tooltipHeight, windowHeight);\r\n\r\n                                    tooltipBodyHeight = tooltipHeight - $tip.children('.aweb-popover-header').height();\r\n\r\n                                    tooltipCss.height = tooltipHeight;\r\n                                    tooltipCss.marginTop = 0;\r\n\r\n                                    tooltipBodyCss = {\r\n                                        maxHeight: tooltipBodyHeight,\r\n                                        minHeight: tooltipBodyHeight\r\n                                    };\r\n                                }\r\n\r\n\r\n                                $tip.css(tooltipCss);\r\n                                if (tooltipBodyCss) {\r\n                                    $tip.children('.aweb-popover-body').css(tooltipBodyCss);\r\n                                }\r\n\r\n                                // resize 中更新 气泡位置\r\n\r\n                                placement = that.options.placement;\r\n                                pos = that.getPosition();\r\n                                actualWidth = $tip[0].offsetWidth;\r\n                                actualHeight = $tip[0].offsetHeight;\r\n                                calculatedOffset = that.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\r\n                                that.applyPlacement(calculatedOffset, placement);\r\n\r\n                            };\r\n\r\n                            $window.on('resize.' + tooltipUUID, resizeHandler);\r\n                            resizeHandler();\r\n\r\n                            this.uuid = tooltipUUID;\r\n                            this.resizeHandler = resizeHandler;\r\n                        }\r\n\r\n                        this.$element.trigger('inserted.bs.' + this.type);\r\n\r\n                        var pos = this.getPosition(),\r\n                            actualWidth = $tip[0].offsetWidth,\r\n                            actualHeight = $tip[0].offsetHeight,\r\n                            calculatedOffset, fixWidth, fixHeight, originFixWidth, originFixHeight, popoverHeaderHeight,\r\n                            popoverBodyHeight;\r\n\r\n                        if (autoPlace) {\r\n                            var orgPlacement = placement;\r\n                            var viewportDim = this.getPosition(this.$viewport);\r\n\r\n                            placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' :\r\n                                placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' :\r\n                                    placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' :\r\n                                        placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' :\r\n                                            placement;\r\n\r\n                            calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\r\n\r\n                            //对调整后方位为 left、top情况做处理，将原本的修改尺寸和调整后的修改尺寸作比较\r\n                            if (orgPlacement !== placement) {\r\n                                switch (placement) {\r\n                                    case 'left':\r\n                                        originFixWidth = viewportDim.width - pos.right;\r\n                                        if (calculatedOffset.left < 0) {\r\n                                            fixWidth = actualWidth + calculatedOffset.left;\r\n                                            if (fixWidth < originFixWidth) {\r\n                                                fixWidth = originFixWidth;\r\n                                                placement = orgPlacement;\r\n                                                $tip.css({'width': fixWidth + 'px'});\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                    case 'top':\r\n                                        originFixHeight = viewportDim.height - pos.bottom;\r\n                                        if (calculatedOffset.top < 0) {\r\n                                            fixHeight = actualHeight + calculatedOffset.top;\r\n                                            if (fixHeight < originFixHeight) {\r\n                                                fixHeight = originFixHeight - 10;\r\n                                                placement = orgPlacement;\r\n                                                popoverHeaderHeight = $tip.children('.aweb-popover-header').height();\r\n                                                popoverBodyHeight = fixHeight - popoverHeaderHeight;\r\n                                                $tip.css({'height': fixHeight + 'px'});\r\n                                                $tip.find('.aweb-popover-body').css({\r\n                                                    'min-height': popoverBodyHeight + 'px',\r\n                                                    'max-height': popoverBodyHeight + 'px'\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                        break;\r\n                                }\r\n\r\n                            }\r\n\r\n                            $tip\r\n                                .removeClass(orgPlacement)\r\n                                .addClass(placement)\r\n                        }\r\n\r\n                        calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\r\n\r\n                        //阻止气泡溢出\r\n                        switch (placement) {\r\n                            case 'left':\r\n                            case 'right':\r\n                                if (calculatedOffset.left < 0) {\r\n                                    fixWidth = actualWidth + calculatedOffset.left;\r\n                                    $tip.css({'width': fixWidth + 'px'});\r\n                                    calculatedOffset.left = 0;\r\n                                }\r\n                                break;\r\n                            case 'top':\r\n                            case 'bottm':\r\n                                if (calculatedOffset.top < 0) {\r\n                                    fixHeight = actualHeight + calculatedOffset.top;\r\n                                    popoverHeaderHeight = $tip.children('.aweb-popover-header').height();\r\n                                    popoverBodyHeight = fixHeight - popoverHeaderHeight;\r\n                                    $tip.css({'height': fixHeight + 'px'});\r\n                                    $tip.find('.aweb-popover-body').css({\r\n                                        'min-height': popoverBodyHeight + 'px',\r\n                                        'max-height': popoverBodyHeight + 'px'\r\n                                    });\r\n                                    calculatedOffset.top = 0;\r\n                                }\r\n                                break;\r\n                        }\r\n\r\n                        this.applyPlacement(calculatedOffset, placement);\r\n\r\n                        var complete = function () {\r\n                            var prevHoverState = that.hoverState;\r\n                            that.$element.trigger('shown.bs.' + that.type);\r\n                            that.hoverState = null;\r\n\r\n                            if (prevHoverState == 'out') that.leave(that)\r\n                        };\r\n\r\n                        $.support.transition && this.$tip.hasClass('fade') ?\r\n                            $tip\r\n                                .one('bsTransitionEnd', complete)\r\n                                .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n                            complete()\r\n                    }\r\n                };\r\n\r\n                Tooltip.prototype.applyPlacement = function (offset, placement) {\r\n                    var $tip = this.tip();\r\n                    var width = $tip[0].offsetWidth;\r\n                    var height = $tip[0].offsetHeight;\r\n\r\n                    // manually read margins because getBoundingClientRect includes difference\r\n                    var marginTop = parseInt($tip.css('margin-top'), 10);\r\n                    var marginLeft = parseInt($tip.css('margin-left'), 10);\r\n\r\n                    // we must check for NaN for ie 8/9\r\n                    if (isNaN(marginTop)) marginTop = 0;\r\n                    if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n                    offset.top += marginTop;\r\n                    offset.left += marginLeft;\r\n\r\n                    // $.fn.offset doesn't round pixel values\r\n                    // so we use setOffset directly with our own function B-0\r\n                    $.offset.setOffset($tip[0], $.extend({\r\n                        using: function (props) {\r\n                            $tip.css({\r\n                                top: Math.round(props.top),\r\n                                left: Math.round(props.left)\r\n                            })\r\n                        }\r\n                    }, offset), 0);\r\n\r\n                    $tip.addClass('in');\r\n\r\n                    // check to see if placing tip in new offset caused the tip to resize itself\r\n                    var actualWidth = $tip[0].offsetWidth;\r\n                    var actualHeight = $tip[0].offsetHeight;\r\n\r\n                    if (placement == 'top' && actualHeight != height) {\r\n                        offset.top = offset.top + height - actualHeight\r\n                    }\r\n\r\n                    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n                    if (delta.left) offset.left += delta.left;\r\n                    else offset.top += delta.top;\r\n\r\n                    var isVertical = /top|bottom/.test(placement);\r\n                    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n                    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n                    $tip.offset(offset);\r\n\r\n                    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\r\n                };\r\n\r\n                Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\r\n                    this.arrow()\r\n                        .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                        .css(isVertical ? 'top' : 'left', '')\r\n                };\r\n\r\n                Tooltip.prototype.setContent = function () {\r\n                    var $tip = this.tip();\r\n                    var title = this.getTitle();\r\n\r\n                    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);\r\n                    $tip.removeClass('fade in top bottom left right')\r\n                };\r\n\r\n                Tooltip.prototype.hide = function (callback) {\r\n                    //  将遮罩层以及提示栏的z-index还原\r\n                    app.shelter.lowerZIndex();\r\n\r\n                    var that = this;\r\n                    var $tip = $(this.$tip);\r\n                    var e = $.Event('hide.bs.' + this.type);\r\n\r\n                    function complete() {\r\n                        if (that.hoverState != 'in') $tip.detach();\r\n                        if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.\r\n                            that.$element\r\n                                .removeAttr('aria-describedby')\r\n                                .trigger('hidden.bs.' + that.type)\r\n                        }\r\n                        callback && callback()\r\n                    }\r\n\r\n                    this.$element.trigger(e);\r\n\r\n                    // null resizeHandler\r\n                    if (this.uuid) {\r\n                        $window.off('resize.' + this.uuid);\r\n                        this.resizeHandler = null;\r\n                    }\r\n\r\n                    if (e.isDefaultPrevented()) return;\r\n\r\n                    $tip.removeClass('in');\r\n\r\n                    $.support.transition && $tip.hasClass('fade') ?\r\n                        $tip\r\n                            .one('bsTransitionEnd', complete)\r\n                            .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\r\n                        complete();\r\n\r\n                    this.hoverState = null;\r\n\r\n                    return this\r\n                };\r\n\r\n                Tooltip.prototype.fixTitle = function () {\r\n                    var $e = this.$element;\r\n                    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\r\n                        $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\r\n                    }\r\n                };\r\n\r\n                Tooltip.prototype.hasContent = function () {\r\n                    return this.getTitle()\r\n                };\r\n\r\n                Tooltip.prototype.getPosition = function ($element) {\r\n                    $element = $element || this.$element;\r\n\r\n                    var el = $element[0];\r\n                    var isBody = el.tagName == 'BODY';\r\n\r\n                    var elRect = el.getBoundingClientRect();\r\n                    if (elRect.width == null) {\r\n                        // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n                        elRect = $.extend({}, elRect, {\r\n                            width: elRect.right - elRect.left,\r\n                            height: elRect.bottom - elRect.top\r\n                        })\r\n                    }\r\n                    var isSvg = window.SVGElement && el instanceof window.SVGElement;\r\n                    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\r\n                    // See https://github.com/twbs/bootstrap/issues/20280\r\n                    var elOffset = isBody ? {top: 0, left: 0} : (isSvg ? null : $element.offset());\r\n                    var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop()};\r\n                    var outerDims = isBody ? {width: $(window).width(), height: $(window).height()} : null;\r\n\r\n                    return $.extend({}, elRect, scroll, outerDims, elOffset)\r\n                };\r\n\r\n                Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\r\n                    return placement == 'bottom' ? {\r\n                            top: pos.top + pos.height,\r\n                            left: pos.left + pos.width / 2 - actualWidth / 2\r\n                        } :\r\n                        placement == 'top' ? {\r\n                                top: pos.top - actualHeight,\r\n                                left: pos.left + pos.width / 2 - actualWidth / 2\r\n                            } :\r\n                            placement == 'left' ? {\r\n                                    top: pos.top + pos.height / 2 - actualHeight / 2,\r\n                                    left: pos.left - actualWidth\r\n                                } :\r\n                                /* placement == 'right' */\r\n                                {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}\r\n\r\n                };\r\n\r\n                Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\r\n                    var delta = {top: 0, left: 0};\r\n                    if (!this.$viewport) return delta;\r\n\r\n                    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;\r\n                    var viewportDimensions = this.getPosition(this.$viewport);\r\n\r\n                    if (/right|left/.test(placement)) {\r\n                        var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;\r\n                        var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n                        if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n                            delta.top = viewportDimensions.top - topEdgeOffset\r\n                        } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n                            delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\r\n                        }\r\n                    } else {\r\n                        var leftEdgeOffset = pos.left - viewportPadding;\r\n                        var rightEdgeOffset = pos.left + viewportPadding + actualWidth;\r\n                        if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n                            delta.left = viewportDimensions.left - leftEdgeOffset\r\n                        } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n                            delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\r\n                        }\r\n                    }\r\n\r\n                    return delta\r\n                };\r\n\r\n                Tooltip.prototype.getTitle = function () {\r\n                    var title;\r\n                    var $e = this.$element;\r\n                    var o = this.options;\r\n\r\n                    title = (typeof o.title == 'function' ? o.title.call($e[0]) : o.title) || $e.attr('data-original-title');\r\n\r\n                    return title\r\n                };\r\n\r\n                Tooltip.prototype.getUID = function (prefix) {\r\n                    do prefix += ~~(Math.random() * 1000000);\r\n                    while (document.getElementById(prefix));\r\n                    return prefix\r\n                };\r\n\r\n                Tooltip.prototype.tip = function () {\r\n                    if (!this.$tip) {\r\n                        this.$tip = $(this.options.template);\r\n                        if (this.$tip.length != 1) {\r\n                            throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\r\n                        }\r\n                    }\r\n                    return this.$tip\r\n                };\r\n\r\n                Tooltip.prototype.arrow = function () {\r\n                    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\r\n                };\r\n\r\n                Tooltip.prototype.enable = function () {\r\n                    this.enabled = true\r\n                };\r\n\r\n                Tooltip.prototype.disable = function () {\r\n                    this.enabled = false\r\n                };\r\n\r\n                Tooltip.prototype.toggleEnabled = function () {\r\n                    this.enabled = !this.enabled\r\n                };\r\n\r\n                Tooltip.prototype.toggle = function (e) {\r\n                    var self = this;\r\n                    if (e) {\r\n                        self = $(e.currentTarget).data('bs.' + this.type);\r\n                        if (!self) {\r\n                            self = new this.constructor(e.currentTarget, this.getDelegateOptions());\r\n                            $(e.currentTarget).data('bs.' + this.type, self)\r\n                        }\r\n                    }\r\n\r\n                    if (e) {\r\n                        self.inState.click = !self.inState.click;\r\n                        if (self.isInStateTrue()) self.enter(self);\r\n                        else self.leave(self)\r\n                    } else {\r\n                        self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\r\n                    }\r\n                };\r\n\r\n                Tooltip.prototype.destroy = function () {\r\n                    var that = this;\r\n                    clearTimeout(this.timeout);\r\n                    this.hide(function () {\r\n                        that.$element.off('.' + that.type).removeData('bs.' + that.type);\r\n                        if (that.$tip) {\r\n                            that.$tip.detach()\r\n                        }\r\n                        that.$tip = null;\r\n                        that.$arrow = null;\r\n                        that.$viewport = null;\r\n                        that.$element = null\r\n                    })\r\n                };\r\n\r\n\r\n                // TOOLTIP PLUGIN DEFINITION\r\n                // =========================\r\n\r\n                function Plugin(option) {\r\n                    return this.each(function () {\r\n                        var $this = $(this);\r\n                        var data = $this.data('bs.tooltip');\r\n                        var options = typeof option == 'object' && option;\r\n\r\n                        if (!data && /destroy|hide/.test(option)) return;\r\n                        if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)));\r\n                        if (typeof option == 'string') data[option]()\r\n                    })\r\n                }\r\n\r\n                var old = $.fn.tooltip;\r\n\r\n                $.fn.tooltip = Plugin;\r\n                $.fn.tooltip.Constructor = Tooltip;\r\n\r\n\r\n                // TOOLTIP NO CONFLICT\r\n                // ===================\r\n\r\n                $.fn.tooltip.noConflict = function () {\r\n                    $.fn.tooltip = old;\r\n                    return this\r\n                }\r\n\r\n            }(jQuery);\r\n\r\n\r\n            //popover\r\n\r\n            +function ($) {\r\n                'use strict';\r\n\r\n                // POPOVER PUBLIC CLASS DEFINITION\r\n                // ===============================\r\n\r\n                var Popover = function (element, options) {\r\n                    this.init('popover', element, options)\r\n                };\r\n\r\n                if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');\r\n\r\n                Popover.VERSION = '3.3.7';\r\n\r\n                Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\r\n                    placement: 'right',\r\n                    trigger: 'click',\r\n                    content: '',\r\n                    template: '<div class=\"aweb-popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"aweb-popover-title\"></h3><div class=\"aweb-popover-content\"></div></div>'\r\n                });\r\n\r\n\r\n                // NOTE: POPOVER EXTENDS tooltip.js\r\n                // ================================\r\n\r\n                Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);\r\n\r\n                Popover.prototype.constructor = Popover;\r\n\r\n                Popover.prototype.getDefaults = function () {\r\n                    return Popover.DEFAULTS\r\n                };\r\n\r\n                Popover.prototype.setContent = function () {\r\n                    var $tip = this.tip();\r\n                    var title = this.getTitle();\r\n                    var content = this.getContent();\r\n\r\n                    $tip.find('.aweb-popover-title')[this.options.html ? 'html' : 'text'](title);\r\n                    $tip.find('.aweb-popover-content').children().detach().end()[ // we use append for html objects to maintain js events\r\n                        this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\r\n                        ](content);\r\n\r\n                    $tip.removeClass('fade top bottom left right in');\r\n\r\n                    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\r\n                    // this manually by checking the contents.\r\n                    if (!$tip.find('.aweb-popover-title').html()) $tip.find('.aweb-popover-title').hide()\r\n                };\r\n\r\n                Popover.prototype.hasContent = function () {\r\n                    return this.getTitle() || this.getContent()\r\n                };\r\n\r\n                Popover.prototype.getContent = function () {\r\n                    var $e = this.$element;\r\n                    var o = this.options;\r\n\r\n                    return $e.attr('data-content') ||\r\n                        (typeof o.content == 'function' ?\r\n                            o.content.call($e[0]) :\r\n                            o.content)\r\n                };\r\n\r\n                Popover.prototype.arrow = function () {\r\n                    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\r\n                };\r\n\r\n\r\n                // POPOVER PLUGIN DEFINITION\r\n                // =========================\r\n\r\n                function Plugin(option) {\r\n                    return this.each(function () {\r\n                        var $this = $(this);\r\n                        var data = $this.data('bs.popover');\r\n                        var options = typeof option == 'object' && option;\r\n\r\n                        if (!data && /destroy|hide/.test(option)) return;\r\n                        if (!data) $this.data('bs.popover', (data = new Popover(this, options)));\r\n                        if (typeof option == 'string') data[option]()\r\n                    })\r\n                }\r\n\r\n                var old = $.fn.popover;\r\n\r\n                $.fn.popover = Plugin;\r\n                $.fn.popover.Constructor = Popover;\r\n\r\n\r\n                // POPOVER NO CONFLICT\r\n                // ===================\r\n\r\n                $.fn.popover.noConflict = function () {\r\n                    $.fn.popover = old;\r\n                    return this\r\n                }\r\n\r\n            }(jQuery);\r\n\r\n            popover = function () {\r\n\r\n\r\n                function popover(options) {\r\n\r\n                    // var $popover = $(options.$elem).closest('button') !== 0 ? $(options.$elem).closest('button') : $(options.$elem);\r\n\r\n                    // if ($popover && $popover.data(\"bs.popover\")) {\r\n                    //     return false;\r\n                    // }\r\n\r\n                    var CONST = {\r\n                            POPOVER_LANG: {\r\n                                TITLE: '气泡',\r\n                                CONTENT: '气泡内容',\r\n                                DEFAULT_BTN: '<button title=\"全屏切换\" type=\"button\" data-role=\"toggleSize\"><i class=\"aweb-popover-header-icon aui aui-quanping fa fa-expand\"></i></button><button title=\"关闭\" type=\"button\" data-role=\"close\"><i class=\"aweb-popover-header-icon aui aui-guanbi iconfont icon-topbar-close\"></i></button>'\r\n                            },\r\n                            POPOVER_NAMESPACE: '.pop'\r\n                        },\r\n                        _default = {\r\n                            title: CONST.POPOVER_LANG.TITLE, //弹出框标题，非必填\r\n                            content: CONST.POPOVER_LANG.CONTENT, //弹出框内容\r\n                            init: null, //初始化函数\r\n                            confirmHandler: function () {\r\n                            }, //点击确定按钮触发的函数，参数以数组形式写在args那里\r\n                            args: [],\r\n                            html: true,\r\n                            container: 'body',\r\n                            height: '50%',\r\n                            width: '80%',\r\n                            placement: 'auto right',\r\n                            template: '<div class=\"aweb-popover\"  tabindex=\"0\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"aweb-popover-header\"><h4 class=\"aweb-popover-title\"></h4><div class=\"btn-group\">' +\r\n                                CONST.POPOVER_LANG.DEFAULT_BTN +\r\n                                '</div></div><div class=\"aweb-popover-body\"><div class=\"aweb-popover-content\"></div></div></div>'\r\n                        };\r\n\r\n                    var Pop = function (options) {\r\n                        this.options = $.extend({}, _default, options);\r\n                        this.init();\r\n                        this.on(this.events);\r\n                    };\r\n\r\n                    Pop.fn = Pop.prototype = {\r\n                        Constructor: Pop,\r\n                        events: {\r\n                            toggleSize: function (e, context) {\r\n                                var popoverBodyHeight, popoverBodyCss;\r\n\r\n                                // 设置窗口大小\r\n                                context.$tip.toggleClass('popover-lg');\r\n\r\n                                //调整 popover-body 高度\r\n                                popoverBodyHeight = context.$tip.height() - context.$tip.children('.aweb-popover-header').height();\r\n\r\n                                popoverBodyCss = {\r\n                                    maxHeight: popoverBodyHeight,\r\n                                    minHeight: popoverBodyHeight\r\n                                };\r\n\r\n                                if (popoverBodyCss) {\r\n                                    context.$tip.children('.aweb-popover-body').css(popoverBodyCss);\r\n                                }\r\n\r\n                                context.trigger('screenChange');\r\n\r\n                            },\r\n\r\n                            close: function (e, context) {\r\n                                context.$element && context.$element.popover('destroy');\r\n                                if (context.isShow) {\r\n                                    var handler = context.options.confirmHandler;\r\n                                    $.isFunction(handler) && handler.apply(context, context.options.args);\r\n                                    context.isShow = false;\r\n                                    context.popInstance.destroy();\r\n                                }\r\n                            }\r\n                        },\r\n\r\n                        init: function () {\r\n\r\n                            var listen = {},\r\n                                i, k, item, $newBtn,\r\n                                that = this,\r\n                                onList = this.options.on,\r\n                                $buttons, $button, btnClass, iconNamespace;\r\n\r\n\r\n                            this.isShow = true;\r\n                            this.options.args = [this].concat(this.options.args);\r\n\r\n                            if (!this.options.hasHeader) {\r\n                                this.options.template = '<div class=\"aweb-popover\"  tabindex=\"0\" role=\"tooltip\"><div class=\"arrow\"></div><div class=\"aweb-popover-body\"><div class=\"aweb-popover-content\"></div></div></div>';\r\n                            }\r\n\r\n                            //事件散列处理\r\n                            for (i in onList) {\r\n\r\n                                if (onList[i].btnName && onList[i].callback) {\r\n                                    listen[onList[i].btnName] = onList[i].callback;\r\n                                }\r\n\r\n                            }\r\n\r\n                            this.events = $.extend({}, this.events, listen);\r\n\r\n\r\n                            for (k in this.events) {\r\n                                this.events[k + CONST.POPOVER_NAMESPACE] = this.events[k];\r\n                                delete this.events[k];\r\n                            }\r\n\r\n                            if ($.isFunction(this.options.$elem)) {\r\n                                this.options.$elem = this.options.$elem();\r\n                            }\r\n\r\n                            this.$element = $(this.options.$elem).closest('button').length !== 0 ? $(this.options.$elem).closest('button') : $(this.options.$elem).closest('span').length !== 0 ? $(this.options.$elem).closest('span') : $(this.options.$elem);\r\n\r\n                            if ($.isFunction(this.options.content)) {\r\n                                this.options.content = this.options.content();\r\n                            }\r\n\r\n                            this.$element.popover({\r\n                                title: this.options.title,\r\n                                content: this.options.content,\r\n                                html: this.options.html,\r\n                                container: this.options.container,\r\n                                height: this.options.height,\r\n                                width: this.options.width,\r\n                                placement: this.options.placement,\r\n                                template: this.options.template,\r\n                                animation: false\r\n                            }).popover('show');\r\n\r\n                            // 初始化模拟鼠标点击\r\n                            if (this.options.fixClick) {\r\n                                this.$element.data('bs.popover').inState.click = true;\r\n                            }\r\n\r\n                            this.popInstance = this.$element.data('bs.popover');\r\n\r\n                            //保存气泡弹出框的索引\r\n                            this.$tip = this.$element.data('bs.popover').tip();\r\n\r\n                            this.$btnCtn = this.$tip.find('.aweb-popover-header > .btn-group').html(CONST.POPOVER_LANG.DEFAULT_BTN);\r\n\r\n                            $buttons = this.$btnCtn.find('button i');\r\n\r\n                            // 绑定 options.init 中的 this 为 this.$tip 对象，将 this <Pop实例> 作为第一个参数传入\r\n\r\n                            if ($.isFunction(this.options.init)) {\r\n                                this.options.init.apply(this.$tip, this.options.args);\r\n                            }\r\n\r\n                            // 处理 aui 与 aweb 图标关系\r\n\r\n                            if (window.auiApp && window.auiApp.mode !== 'virtualizer') {\r\n                                $buttons.each(function (index, item) {\r\n                                    $button = $(item);\r\n                                    btnClass = item.className.split(' ');\r\n\r\n                                    $.each(btnClass, function (index, item) {\r\n                                        if (item !== 'aweb-popover-header-icon' && item.indexOf('aui') < 0) {\r\n                                            $button.removeClass(item);\r\n                                        }\r\n                                    });\r\n                                });\r\n                            } else {\r\n\r\n                                $buttons.each(function (index, item) {\r\n                                    $(item).removeClass('aui');\r\n                                });\r\n                            }\r\n\r\n                            //合成按钮组（默认 关闭和全屏，并监听对应按钮的点击事件，并 trigger 对应注册的事件）\r\n\r\n                            for (i in onList) {\r\n                                //正则处理图标前缀\r\n                                if (onList[i].btnName && onList[i].icon && onList[i].title) {\r\n                                    iconNamespace = onList[i].icon.match(/([a-z]+)-([a-z]+)/)[1];\r\n                                    $newBtn = '<button title=\"' + onList[i].title + '\" type=\"button\" data-role=\"' + onList[i].btnName + '\"><i class=\"aweb-popover-header-icon ' + iconNamespace + \" \" + onList[i].icon + '\"></i></button>';\r\n                                    this.$btnCtn.prepend($newBtn);\r\n                                }\r\n\r\n                            }\r\n\r\n                            this.$tip.on('click' + CONST.POPOVER_NAMESPACE, '.aweb-popover-header button', function (e) {\r\n                                that.$tip.trigger($(this).attr('data-role') + CONST.POPOVER_NAMESPACE, that);\r\n                            });\r\n\r\n                            this.$tip.focus();\r\n\r\n                            //focusout\r\n                            this.$tip.on('focusout' + CONST.POPOVER_NAMESPACE, function (e) {\r\n\r\n                                // relatedTarget 是 aweb-popover 中的元素\r\n                                if ($(e.relatedTarget).closest('.aweb-popover').is(that.$tip)) {\r\n                                    return false;\r\n                                }\r\n\r\n                                if (that.isShow) {\r\n                                    if ((that.$tip.is($(e.target)) || that.$tip.is($(e.target).closest('.aweb-popover'))) && (!e.relatedTarget || $(e.relatedTarget).closest('.aweb-popover').length === 0)) {\r\n\r\n                                        // 点击 popover 之外的区域造成的失焦\r\n                                        if (that.options.focusable !== false) {\r\n                                            that.close();\r\n                                        }\r\n\r\n                                    } else {\r\n                                        return false;\r\n                                    }\r\n                                }\r\n                                //其他提前触发 close 的失焦行为都调用 Pop 实例的 close() 方法\r\n\r\n                            });\r\n\r\n                            // 监听popover 的 hide 事件，并执行 confirmHandler\r\n\r\n                            this.$element.one('hide.bs.popover', function () {\r\n                                that.isShow = false;\r\n                                var handler = that.options.confirmHandler;\r\n                                $.isFunction(handler) && handler.apply(that, that.options.args);\r\n                            });\r\n\r\n                            // 监听popover 的 hidden 事件，并销毁 popover 实例、Pop实例\r\n                            this.$element.one('hidden.bs.popover', function () {\r\n                                that.destroy();\r\n                            });\r\n\r\n                        },\r\n\r\n                        on: function () {\r\n                            this.$tip.on.apply(this.$tip, arguments);\r\n                        },\r\n\r\n                        off: function () {\r\n                            this.$tip.off.apply(this.$tip, arguments);\r\n                        },\r\n\r\n                        trigger: function () {\r\n                            this.$tip.trigger.apply(this.$tip, arguments);\r\n                        },\r\n\r\n                        destroy: function () {\r\n                            this.off();\r\n                            this.$element = null;\r\n                            this.$btnCtn = null;\r\n                            this.$tip = null;\r\n                            this.options = null;\r\n                        },\r\n\r\n                        close: function () {\r\n                            this.$tip && this.$tip.trigger('close', this);\r\n                        },\r\n\r\n                        toggleSize: function () {\r\n                            this.$tip && this.$tip.trigger('toggleSize', this);\r\n                        },\r\n\r\n                        setCache: function (key, value) {\r\n                            if (!this.cache) {\r\n                                this.cache = {}\r\n                            }\r\n                            this.cache[key] = value;\r\n                        },\r\n\r\n                        getCache: function (key) {\r\n                            if (this.cache) {\r\n                                return this.cache[key];\r\n                            }\r\n                        }\r\n\r\n                    };\r\n\r\n                    return new Pop(options);\r\n\r\n                }\r\n\r\n                return popover;\r\n            }();\r\n\r\n            return popover;\r\n        }()"
}},{name:"alertAction",desp:"提示框操作",appJsCode:"app.alertAction=function (){\r\n            var\r\n                alertAction = {\r\n                    close :app.alert.close,\r\n                    closeAll :app.alert.closeAll,\r\n                    getAlertList :app.alert.getAlertList,\r\n                    listener:app.alert.listener\r\n                };\r\n\r\n            return alertAction;\r\n        }()",require:true,belongTo:"class",cInterfaces:[{name:"close",desp:"关闭提示框",params:[{name:"option",type:"object",children:[{name:"id",desp:"需要关闭的提示框id",type:"string",necessary:true,overviewType:"default",defaultValue:""}],desp:"",overviewType:"default",defaultValue:""}],details:"当调用app.alert有传入id时，输入该id可以关闭",defaultValue:'app.alertAction.close("1")',hasReturn:true,returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"closeAll",desp:"关闭所有提示框",details:"关闭所有提示框",hasReturn:true,returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"getAlertList",desp:"获取所有正在执行的提示框列表",details:"获取所有正在执行的提示框列表信息，包括在界面上显示的提示框和在队列中的提示框，它将返回一个数组，里面每一个索引对应一个对象，包含每一个提示框的信息，0键对应提示框内容，1键对应提示框类型，2键对应提示框id",hasReturn:true,returnValue:{name:"alertList",type:"array",desp:"正在执行的所有提示框列表",defaultValue:[{0:"msgContent1",1:"error",2:"id1"},{0:"msgContent2",1:"success",2:"id2"},{0:"msgContent3",1:"warning",2:"id3"}]}},{name:"listener",desp:"监听alert事件",details:"监听alert事件",params:[{name:"callback",desp:"回调函数",type:"handler",details:"回调函数，底层返回提示框参数作为入参",children:[{name:"itemMsg",desp:"提示框参数",type:"object",details:"提示框参数，包括当前提示框的信息、类型、id",children:[{name:1,type:"string",desp:"当前提示框信息",overviewType:"default",defaultValue:""},{name:2,type:"string",desp:"当前提示框类型",overviewType:"default",defaultValue:""},{name:3,type:"string",desp:"当前提示框的id",overviewType:"default",defaultValue:""}],overviewType:"default",defaultValue:""}],overviewType:"default",defaultValue:""}],hasReturn:true,returnValue:{name:"",desp:"",type:"string",defaultValue:""}}],details:"",hasReturn:false,returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.alertAction=function (){\r\n            var\r\n                alertAction = {\r\n                    close :app.alert.close,\r\n                    closeAll :app.alert.closeAll,\r\n                    getAlertList :app.alert.getAlertList,\r\n                    listener:app.alert.listener\r\n                };\r\n\r\n            return alertAction;\r\n        }()"}},{name:"getUA",desp:"获取设备终端信息",require:true,appJsCode:"app.getUA=function () {\r\n            var TYPE = {\r\n                    WEIXIN_IPAD:'weixin iPad',\r\n                    WEIXIN_IPHONE:'weixin iPhone',\r\n                    WEIXIN_ANDROID_PHONE:'weixin androidPhone',\r\n                    WEIXIN_ANDROID_PAD:'weixin androidPad',\r\n\r\n                    ALIPAY_IPAD:'Alipay iPad',\r\n                    ALIPAY_IPHONE:'Alipay iPhone',\r\n                    ALIPAY_ANDROID_PHONE:'Alipay androidPhone',\r\n                    ALIPAY_ANDROID_PAD:'Alipay androidPad',\r\n\r\n                    //手机网页\r\n                    IPHONE:'iPhone',\r\n                    IPAD:'iPad',\r\n                    ANDROID_PHONE:'androidPhone',\r\n                    ANDROID_PAD:'androidPad',\r\n\r\n                    //PC浏览器\r\n                    MSIE:'IE6~10'||'Ionic IE6~10',//考虑在本地IE浏览器运行时的情况\r\n                    IE11:'IE11'||'Ionic IE11', //考虑在本地IE11浏览器运行时的情况\r\n                    MICROSOFT_EDGE:'Edge'||'Ionic Edge',//考虑在本地Edge浏览器运行时的情况\r\n                    PC_NOT_IE:'PC'||'Ionic',//考虑在本地浏览器运行时的情况\r\n\r\n\r\n                    //类似于Ionic在本地搭建服务器的APP\r\n                    IONIC_IPAD:'Ionic iPad',\r\n                    IONIC_IPHONE:'Ionic iPhone',\r\n                    IONIC_ANDROID_PHONE:'Ionic androidPhone',\r\n                    IONIC_ANDROID_PAD:'Ionic androidPad',\r\n\r\n                    //类似于cordova的本地APP\r\n                    CORDOVA_IPAD:'Cordova iPad',\r\n                    CORDOVA_IPHONE:'Cordova iPhone',\r\n                    CORDOVA_ANDROID_PHONE:'Cordova androidPhone',\r\n                    CORDOVA_ANDROID_PAD:'Cordova androidPad'\r\n\r\n                },\r\n                config = [\r\n                    /* {  name: 'android',\r\n                        reg: /android/i\r\n                     },\r\n                    {\r\n                        name: 'ios',\r\n                        reg: /\\(i[^;]+;( U;)? CPU.+Mac OS X/i\r\n                    },*/\r\n                    //环境\r\n                    {\r\n                       name:'Cordova',\r\n                       reg:/^file/i\r\n                    },\r\n                    {\r\n                        name:'Ionic',\r\n                        reg:/^http:\\/\\/localhost:8080/i\r\n                    },\r\n                    {\r\n                        name: 'weixin',\r\n                        reg: /MicroMessenger/i\r\n                    },\r\n                    {\r\n                        name:'Alipay',\r\n                        reg: /Alipay/i\r\n                    },\r\n                    /*{\r\n                        name:'MQQBrower',\r\n                        reg:/MQQBROWSER/i\r\n                    },\r\n                    {\r\n                        name:'UC Browser',\r\n                        reg:/UCWEB/i\r\n                    },*/\r\n\r\n                    //设备\r\n                    {\r\n                        name:'androidPhone',\r\n                        reg: /^(?=.*(Android))(?=.*(Mobile)).+$/i\r\n                    },\r\n                    {\r\n                        name:'androidPad',\r\n                        reg: /^(?=.*(Android))(?!.*(Mobile)).+$/i\r\n                    },\r\n                    {\r\n                        name:'iPad',\r\n                        reg: /iPad/i\r\n                    },\r\n                    {\r\n                        name: 'iPhone',\r\n                        reg: /iPhone/i\r\n                    },\r\n                    //浏览器\r\n                    {\r\n                        name:'IE6~10',\r\n                        reg:/MSIE/i\r\n                    },\r\n                    {\r\n                        name:'IE11',\r\n                        reg:/Trident\\/7\\.0/i\r\n                    },\r\n                    {\r\n                        name:'Edge',\r\n                        reg:/Edge/i\r\n                    }\r\n\r\n                ],\r\n\r\n                len = config.length,\r\n\r\n\r\n\r\n\r\n                getUAFunc = function(){\r\n                    var\r\n                        UA = navigator.userAgent,\r\n                        url = document.URL,\r\n                        result = [],\r\n                        item, reg, k;\r\n\r\n                    if(UA && url){\r\n\r\n                        for (k=0;k<len;k++) {\r\n                            if ((item = config[k]) && (reg = item.reg) && reg.test(UA)) {\r\n                            result.push(item.name);\r\n                            }\r\n                        }\r\n                    }\r\n                    result = (result.length ? result.join(' ') : TYPE.PC_NOT_IE);\r\n                    return result\r\n                };\r\n                getUAFunc.TYPE = TYPE;\r\n\r\n\r\n\r\n            return getUAFunc\r\n        }()",belongTo:"closure",hasReturn:true,ReturnValue:{name:"result",type:"string",desp:'设备终端信息,包含浏览器环境（weixin--"微信"、Alipay--"支付宝"、Cordova--类似于cordova环境、Ionic--类似于Ionic环境）、设备类型（PC(非IE内核）、IE、iPad、iPhone、androidPhone、androidPad)',defaultValue:"weixin iPhone"},details:"",returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"便捷操作",edition:{universal:"app.getUA=function () {\r\n            var TYPE = {\r\n                    WEIXIN_IPAD:'weixin iPad',\r\n                    WEIXIN_IPHONE:'weixin iPhone',\r\n                    WEIXIN_ANDROID_PHONE:'weixin androidPhone',\r\n                    WEIXIN_ANDROID_PAD:'weixin androidPad',\r\n\r\n                    ALIPAY_IPAD:'Alipay iPad',\r\n                    ALIPAY_IPHONE:'Alipay iPhone',\r\n                    ALIPAY_ANDROID_PHONE:'Alipay androidPhone',\r\n                    ALIPAY_ANDROID_PAD:'Alipay androidPad',\r\n\r\n                    //手机网页\r\n                    IPHONE:'iPhone',\r\n                    IPAD:'iPad',\r\n                    ANDROID_PHONE:'androidPhone',\r\n                    ANDROID_PAD:'androidPad',\r\n\r\n                    //PC浏览器\r\n                    MSIE:'IE6~10'||'Ionic IE6~10',//考虑在本地IE浏览器运行时的情况\r\n                    IE11:'IE11'||'Ionic IE11', //考虑在本地IE11浏览器运行时的情况\r\n                    MICROSOFT_EDGE:'Edge'||'Ionic Edge',//考虑在本地Edge浏览器运行时的情况\r\n                    PC_NOT_IE:'PC'||'Ionic',//考虑在本地浏览器运行时的情况\r\n\r\n\r\n                    //类似于Ionic在本地搭建服务器的APP\r\n                    IONIC_IPAD:'Ionic iPad',\r\n                    IONIC_IPHONE:'Ionic iPhone',\r\n                    IONIC_ANDROID_PHONE:'Ionic androidPhone',\r\n                    IONIC_ANDROID_PAD:'Ionic androidPad',\r\n\r\n                    //类似于cordova的本地APP\r\n                    CORDOVA_IPAD:'Cordova iPad',\r\n                    CORDOVA_IPHONE:'Cordova iPhone',\r\n                    CORDOVA_ANDROID_PHONE:'Cordova androidPhone',\r\n                    CORDOVA_ANDROID_PAD:'Cordova androidPad'\r\n\r\n                },\r\n                config = [\r\n                    /* {  name: 'android',\r\n                        reg: /android/i\r\n                     },\r\n                    {\r\n                        name: 'ios',\r\n                        reg: /\\(i[^;]+;( U;)? CPU.+Mac OS X/i\r\n                    },*/\r\n                    //环境\r\n                    {\r\n                       name:'Cordova',\r\n                       reg:/^file/i\r\n                    },\r\n                    {\r\n                        name:'Ionic',\r\n                        reg:/^http:\\/\\/localhost:8080/i\r\n                    },\r\n                    {\r\n                        name: 'weixin',\r\n                        reg: /MicroMessenger/i\r\n                    },\r\n                    {\r\n                        name:'Alipay',\r\n                        reg: /Alipay/i\r\n                    },\r\n                    /*{\r\n                        name:'MQQBrower',\r\n                        reg:/MQQBROWSER/i\r\n                    },\r\n                    {\r\n                        name:'UC Browser',\r\n                        reg:/UCWEB/i\r\n                    },*/\r\n\r\n                    //设备\r\n                    {\r\n                        name:'androidPhone',\r\n                        reg: /^(?=.*(Android))(?=.*(Mobile)).+$/i\r\n                    },\r\n                    {\r\n                        name:'androidPad',\r\n                        reg: /^(?=.*(Android))(?!.*(Mobile)).+$/i\r\n                    },\r\n                    {\r\n                        name:'iPad',\r\n                        reg: /iPad/i\r\n                    },\r\n                    {\r\n                        name: 'iPhone',\r\n                        reg: /iPhone/i\r\n                    },\r\n                    //浏览器\r\n                    {\r\n                        name:'IE6~10',\r\n                        reg:/MSIE/i\r\n                    },\r\n                    {\r\n                        name:'IE11',\r\n                        reg:/Trident\\/7\\.0/i\r\n                    },\r\n                    {\r\n                        name:'Edge',\r\n                        reg:/Edge/i\r\n                    }\r\n\r\n                ],\r\n\r\n                len = config.length,\r\n\r\n\r\n\r\n\r\n                getUAFunc = function(){\r\n                    var\r\n                        UA = navigator.userAgent,\r\n                        url = document.URL,\r\n                        result = [],\r\n                        item, reg, k;\r\n\r\n                    if(UA && url){\r\n\r\n                        for (k=0;k<len;k++) {\r\n                            if ((item = config[k]) && (reg = item.reg) && reg.test(UA)) {\r\n                            result.push(item.name);\r\n                            }\r\n                        }\r\n                    }\r\n                    result = (result.length ? result.join(' ') : TYPE.PC_NOT_IE);\r\n                    return result\r\n                };\r\n                getUAFunc.TYPE = TYPE;\r\n\r\n\r\n\r\n            return getUAFunc\r\n        }()"}}]},{desp:"数据操作",children:[{name:"queryString",desp:"获取页面内查询字符串",appJsCode:"app.queryString=function (key) {\r\n\r\n            var\r\n                hash = window.location.hash||document.location.hash,\r\n                search = window.location.search || document.location.search||'',\r\n                decoder = window.decodeURI || window.decodeURIComponent,\r\n                rKey = new RegExp('\\\\b' + key + '=([^$&]+)'),\r\n                value;\r\n\r\n                if(hash && !search){\r\n                    search = hash.split('?')[1]\r\n                }\r\n\r\n\r\n\r\n            value = search.match(rKey);\r\n            value = value && value[1];\r\n\r\n            return value ? decoder(value) : '';\r\n        }",require:true,params:[{name:"key",type:"string",desp:"queryString的键名",details:"以http://localhost:8080/index.html?timeStamp=12465为例",defaultValue:"timeStamp"}],hasReturn:true,returnValue:{name:"value",type:"string",desp:"queryString对应键名的值",details:"字符串，返回queryString对应键名的值，若queryString不存在该键名的值，则返回空字符串",defaultValue:12465},details:"",belongTo:"function",_belongTo:"数据操作",edition:{universal:"app.queryString=function (key) {\r\n\r\n            var\r\n                hash = window.location.hash||document.location.hash,\r\n                search = window.location.search || document.location.search||'',\r\n                decoder = window.decodeURI || window.decodeURIComponent,\r\n                rKey = new RegExp('\\\\b' + key + '=([^$&]+)'),\r\n                value;\r\n\r\n                if(hash && !search){\r\n                    search = hash.split('?')[1]\r\n                }\r\n\r\n\r\n\r\n            value = search.match(rKey);\r\n            value = value && value[1];\r\n\r\n            return value ? decoder(value) : '';\r\n        }"}},{name:"setData",desp:"将数据缓存到浏览器",appJsCode:"app.setData=function (name, value, toCookie, expireDays) {\r\n            function setCookie(name, value, expireDays) {\r\n                var temp = '_name_=_value_;path=' + document.location.hostname + ';expires=_expireDays_;max-age=_maxAge_',\r\n                    expireDate = new Date();\r\n\r\n                expireDays = expireDays ? expireDays : 100;\r\n                expireDate.setDate(expireDate.getDate() + expireDays);\r\n                document.cookie = temp.replace(/_name_/, name).replace(/_value_/, value).replace(/_expireDays_/, expireDate.toUTCString()).replace(/_maxAge__/, 3600 * 24 * expireDays);\r\n\r\n                return document.cookie; //判断是否禁用cookie\r\n            }\r\n\r\n            var encoder = window.encodeURI || window.encodeURIComponent || window.escape,\r\n                result = true;\r\n\r\n            if (value || !~expireDays) {\r\n                if (typeof value !== 'string') {\r\n                    value = app.stringify(value);\r\n                }\r\n                value = encoder(value);\r\n\r\n                if (toCookie) {\r\n                    result = !!setCookie(name, value, expireDays);\r\n                } else {\r\n                    try {\r\n                        window.localStorage.setItem(name, value);\r\n                    } catch (e) { //如果禁用localStorage将会抛出异常\r\n                        result = !!setCookie(name, value, expireDays);\r\n                    }\r\n                }\r\n            } else {\r\n                result = false;\r\n            }\r\n\r\n            return result;\r\n        }",require:true,params:[{name:"name",type:"string",desp:"存储的数据名称",details:"字符串，存储的数据名称，必需",defaultValue:""},{name:"data",type:"object",details:"任意类型，存储的数据，必需。非字符串类型，会通过app.stringify将其转化为字符串再存储",desp:"存储的数据",defaultValue:""},{name:"toCookie",type:"boolean",details:"布尔型，是否存储到cookie中，默认情况先尝试存储到localStorage，如果失败，则尝试储存到cookie中，非必需",desp:"是否存储到cookie中",defaultValue:false},{name:"expireDays",type:"number",details:"正整数，如果存储到cookie，过期天数，默认值为100天，非必需",desp:"过期天数",defaultValue:100}],hasReturn:true,returnValue:{name:"result",type:"boolean",desp:"保存结果",details:"布尔型，是否存储数据成功",defaultValue:""},details:"",belongTo:"function",_belongTo:"数据操作",edition:{universal:"app.setData=function (name, value, toCookie, expireDays) {\r\n            function setCookie(name, value, expireDays) {\r\n                var temp = '_name_=_value_;path=' + document.location.hostname + ';expires=_expireDays_;max-age=_maxAge_',\r\n                    expireDate = new Date();\r\n\r\n                expireDays = expireDays ? expireDays : 100;\r\n                expireDate.setDate(expireDate.getDate() + expireDays);\r\n                document.cookie = temp.replace(/_name_/, name).replace(/_value_/, value).replace(/_expireDays_/, expireDate.toUTCString()).replace(/_maxAge__/, 3600 * 24 * expireDays);\r\n\r\n                return document.cookie; //判断是否禁用cookie\r\n            }\r\n\r\n            var encoder = window.encodeURI || window.encodeURIComponent || window.escape,\r\n                result = true;\r\n\r\n            if (value || !~expireDays) {\r\n                if (typeof value !== 'string') {\r\n                    value = app.stringify(value);\r\n                }\r\n                value = encoder(value);\r\n\r\n                if (toCookie) {\r\n                    result = !!setCookie(name, value, expireDays);\r\n                } else {\r\n                    try {\r\n                        window.localStorage.setItem(name, value);\r\n                    } catch (e) { //如果禁用localStorage将会抛出异常\r\n                        result = !!setCookie(name, value, expireDays);\r\n                    }\r\n                }\r\n            } else {\r\n                result = false;\r\n            }\r\n\r\n            return result;\r\n        }"}},{name:"getData",require:true,desp:"从浏览器缓存中获取数据",appJsCode:"app.getData=function (name, fromCookie) {\r\n            function getCookie(name) {\r\n                var value = document.cookie.match(new RegExp(name + '=([^;]+)'));\r\n\r\n                return value && value.length ? value[1] : '';\r\n            }\r\n\r\n            var value,\r\n                decoder = window.decodeURI || window.decodeURIComponent || window.unescape;\r\n\r\n            if (fromCookie) {\r\n                value = getCookie(name);\r\n            } else {\r\n                try {\r\n                    value = window.localStorage.getItem(name);\r\n\r\n                    if (!value) value = getCookie(name); //如果是保存在Cookie那里\r\n                } catch (e) { //如果禁用localStorage将会抛出异常\r\n                    value = getCookie(name);\r\n                }\r\n            }\r\n            return decoder(value);\r\n        }",params:[{name:"name",type:"string",desp:"存储的数据名称",details:"字符串，存储的数据名称，必需",defaultValue:""},{name:"fromCookie",type:"boolean",desp:"是否从cookie中获取数据",defaultValue:false,details:"布尔型，是否从cookie中获取数据，缺省值false，即默认从localStorage获取，若失败则从cookie获取，非必需"}],hasReturn:true,returnValue:{name:"data",type:"string",details:"字符串，获取成功，返回JSON格式的字符串，获取失败则返回空字符串。可以使用app.parseJSObject转化为javaScript对象",desp:"JSON格式字符串",defaultValue:""},details:"",belongTo:"function",_belongTo:"数据操作",edition:{universal:"app.getData=function (name, fromCookie) {\r\n            function getCookie(name) {\r\n                var value = document.cookie.match(new RegExp(name + '=([^;]+)'));\r\n\r\n                return value && value.length ? value[1] : '';\r\n            }\r\n\r\n            var value,\r\n                decoder = window.decodeURI || window.decodeURIComponent || window.unescape;\r\n\r\n            if (fromCookie) {\r\n                value = getCookie(name);\r\n            } else {\r\n                try {\r\n                    value = window.localStorage.getItem(name);\r\n\r\n                    if (!value) value = getCookie(name); //如果是保存在Cookie那里\r\n                } catch (e) { //如果禁用localStorage将会抛出异常\r\n                    value = getCookie(name);\r\n                }\r\n            }\r\n            return decoder(value);\r\n        }"}},{require:true,name:"removeData",desp:"删除浏览器数据",appJsCode:"app.removeData=function (name, fromCookie) {\r\n            var result = true;\r\n\r\n            if (fromCookie) {\r\n                result = app.setData(name, '', true, -1);\r\n            } else {\r\n                try {\r\n                    window.localStorage.removeItem(name);\r\n                } catch (e) {\r\n                    result = app.setData(name, '', true, -1);\r\n                }\r\n            }\r\n            return result;\r\n        }",params:[{name:"name",type:"string",desp:"存储的数据名称",details:"字符串，删除数据的名称，必需",defaultValue:""},{name:"fromCookie",type:"boolean",desp:"是否从cookie中获取数据",defaultValue:false,details:"布尔型，是否从cookie中删除数据，默认情况先尝试从localStorage中删除，如果失败，则尝试从cookie删除，非必需"}],hasReturn:true,returnValue:{name:"result",type:"boolean",desp:"删除结果",details:"布尔型，是否删除数据成功",defaultValue:""},details:"",belongTo:"function",_belongTo:"数据操作",edition:{universal:"app.removeData=function (name, fromCookie) {\r\n            var result = true;\r\n\r\n            if (fromCookie) {\r\n                result = app.setData(name, '', true, -1);\r\n            } else {\r\n                try {\r\n                    window.localStorage.removeItem(name);\r\n                } catch (e) {\r\n                    result = app.setData(name, '', true, -1);\r\n                }\r\n            }\r\n            return result;\r\n        }"}},{require:true,name:"domain",desp:"公共数据缓存池",belongTo:"class",appJsCode:"app.domain=function () {\r\n            var domain = {\r\n                /**\r\n                 * [session 初始化session存储字段]\r\n                 * @type {Object}\r\n                 */\r\n                session: {},\r\n\r\n                /**\r\n                 * [scope 页面间数据交互存储域]\r\n                 * @type {Object}\r\n                 */\r\n                scope: {},\r\n\r\n                /**\r\n                 * [exports 导出数据到全局共享域]\r\n                 * @param  {[type]} namespace        [命名空间]\r\n                 * @param  {[type]} data        [字段json]\r\n                 */\r\n                exports: function (namespace, data) {\r\n                    var cache;\r\n\r\n                    if(aweb.debug) {\r\n	                    var handler = app.router && app.router.getCurrentHandler();\r\n\r\n	                    if (data && handler) {\r\n		                    console.log(['页面模型：', handler.path, ' 设置跨页缓存，命名空间为:', namespace, '，数据为'].join(''));\r\n		                    console.log(data);\r\n	                    }\r\n                    }\r\n\r\n                    domain.clearScope(namespace);\r\n\r\n                    if (!domain.scope[namespace]) {\r\n                        domain.scope[namespace] = {};\r\n                    }\r\n	                cache=domain.scope[namespace];\r\n\r\n                    if (data) {\r\n                        for (var name in data) {\r\n                            //清除缓存数据时，可能清除原先数据的bug\r\n                            if (typeof data[name] === 'string') {\r\n                                //字符串\r\n	                            cache[name] = '' + data[name];\r\n                            } else if ($.isArray(data[name])) {\r\n                                //数组\r\n	                            cache[name] = [].concat(data[name]);\r\n                            } else if (typeof data[name] === 'object') {\r\n                                //对象\r\n                                if(data[name]===null){\r\n	                                cache[name] = null;\r\n                                }else{\r\n	                                cache[name] = $.extend(true, {}, data[name]);\r\n                                }\r\n                            } else {\r\n                                //函数\r\n	                            cache[name] = data[name];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * [clearScope 根据id清除全局共享域中的数据]\r\n                 * @param  {[type]} namespace [命名空间]\r\n                 */\r\n                clearScope: function (namespace) {\r\n                    if (domain.scope[namespace]) {\r\n\r\n	                    if(aweb.debug) {\r\n		                    var handler = app.router && app.router.getCurrentHandler();\r\n\r\n		                    if (handler) {\r\n			                    console.log(['页面模型：', handler.path, ' 清除跨页缓存，命名空间为:', namespace].join(''));\r\n		                    }\r\n	                    }\r\n\r\n                        delete domain.scope[namespace];\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * [get 获取共享域中数据]\r\n                 * @param  {[type]} namespace  [命名空间]\r\n                 * @param  {[type]} name       [字段名]\r\n                 */\r\n                get: function (namespace, name) {\r\n                    var cache;\r\n\r\n                    if (domain.scope[namespace]) {\r\n                        cache=(name === undefined ? domain.scope[namespace] : domain.scope[namespace][name]);\r\n\r\n	                    if(aweb.debug) {\r\n		                    var handler = app.router && app.router.getCurrentHandler();\r\n\r\n		                    if (handler) {\r\n			                    console.log(['页面模型：', handler.path, ' 获取跨页缓存，命名空间为:', namespace, '，数据为'].join(''));\r\n			                    console.log(cache);\r\n		                    }\r\n	                    }\r\n\r\n                        return cache;\r\n                    }\r\n                }\r\n            };\r\n\r\n            return domain;\r\n\r\n        }()",cInterfaces:[{name:"exports",desp:"将数据写入公共数据缓存池",params:[{name:"namespace",type:"string",desp:"命名空间",defaultValue:"page",details:"必需，字符串类型，储存数据的命名空间；",overviewType:"default"},{name:"data",type:"object",desp:"JavaScript对象数据",details:"必需，json数据，需要跨页储存的数据；",children:[{name:"key1",desp:"键名1",type:"string",defaultValue:"value1",overviewType:"default"},{name:"key2",desp:"键名2",type:"boolean",defaultValue:true,overviewType:"default"},{name:"key3",desp:"键名3",type:"array",defaultValue:[],overviewType:"default"},{name:"key4",desp:"键名4",type:"object",defaultValue:{},overviewType:"default"}],overviewType:"default",defaultValue:""}],hasReturn:false,details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"get",desp:"获取公共数据缓存池的数据",params:[{name:"namespace",type:"string",desp:"命名空间",defaultValue:"page",details:"必需，字符串类型，储存数据的命名空间；",overviewType:"default"},{name:"key",type:"string",desp:"存取数据的键",defaultValue:"key4",details:"非必需，字符串类型，储存数据的键",overviewType:"default"}],hasReturn:true,returnValue:{name:"data",type:"object",defaultValue:{},desp:"当键（key）没有声明的情况下，将返回命名空间下所有的数据副本 ；否则将返回该命名空间下该键中的数据副本"},details:""},{name:"clearScope",desp:"清除公共数据缓存池某个命名空间下的数据",params:[{name:"namespace",type:"string",desp:"命名空间",details:"必需，字符串类型，储存数据的命名空间",overviewType:"default",defaultValue:""}],hasReturn:false,details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}}],details:"",hasReturn:false,returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"数据操作",edition:{universal:"app.domain=function () {\r\n            var domain = {\r\n                /**\r\n                 * [session 初始化session存储字段]\r\n                 * @type {Object}\r\n                 */\r\n                session: {},\r\n\r\n                /**\r\n                 * [scope 页面间数据交互存储域]\r\n                 * @type {Object}\r\n                 */\r\n                scope: {},\r\n\r\n                /**\r\n                 * [exports 导出数据到全局共享域]\r\n                 * @param  {[type]} namespace        [命名空间]\r\n                 * @param  {[type]} data        [字段json]\r\n                 */\r\n                exports: function (namespace, data) {\r\n                    var cache;\r\n\r\n                    if(aweb.debug) {\r\n	                    var handler = app.router && app.router.getCurrentHandler();\r\n\r\n	                    if (data && handler) {\r\n		                    console.log(['页面模型：', handler.path, ' 设置跨页缓存，命名空间为:', namespace, '，数据为'].join(''));\r\n		                    console.log(data);\r\n	                    }\r\n                    }\r\n\r\n                    domain.clearScope(namespace);\r\n\r\n                    if (!domain.scope[namespace]) {\r\n                        domain.scope[namespace] = {};\r\n                    }\r\n	                cache=domain.scope[namespace];\r\n\r\n                    if (data) {\r\n                        for (var name in data) {\r\n                            //清除缓存数据时，可能清除原先数据的bug\r\n                            if (typeof data[name] === 'string') {\r\n                                //字符串\r\n	                            cache[name] = '' + data[name];\r\n                            } else if ($.isArray(data[name])) {\r\n                                //数组\r\n	                            cache[name] = [].concat(data[name]);\r\n                            } else if (typeof data[name] === 'object') {\r\n                                //对象\r\n                                if(data[name]===null){\r\n	                                cache[name] = null;\r\n                                }else{\r\n	                                cache[name] = $.extend(true, {}, data[name]);\r\n                                }\r\n                            } else {\r\n                                //函数\r\n	                            cache[name] = data[name];\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * [clearScope 根据id清除全局共享域中的数据]\r\n                 * @param  {[type]} namespace [命名空间]\r\n                 */\r\n                clearScope: function (namespace) {\r\n                    if (domain.scope[namespace]) {\r\n\r\n	                    if(aweb.debug) {\r\n		                    var handler = app.router && app.router.getCurrentHandler();\r\n\r\n		                    if (handler) {\r\n			                    console.log(['页面模型：', handler.path, ' 清除跨页缓存，命名空间为:', namespace].join(''));\r\n		                    }\r\n	                    }\r\n\r\n                        delete domain.scope[namespace];\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * [get 获取共享域中数据]\r\n                 * @param  {[type]} namespace  [命名空间]\r\n                 * @param  {[type]} name       [字段名]\r\n                 */\r\n                get: function (namespace, name) {\r\n                    var cache;\r\n\r\n                    if (domain.scope[namespace]) {\r\n                        cache=(name === undefined ? domain.scope[namespace] : domain.scope[namespace][name]);\r\n\r\n	                    if(aweb.debug) {\r\n		                    var handler = app.router && app.router.getCurrentHandler();\r\n\r\n		                    if (handler) {\r\n			                    console.log(['页面模型：', handler.path, ' 获取跨页缓存，命名空间为:', namespace, '，数据为'].join(''));\r\n			                    console.log(cache);\r\n		                    }\r\n	                    }\r\n\r\n                        return cache;\r\n                    }\r\n                }\r\n            };\r\n\r\n            return domain;\r\n\r\n        }()"}},{require:true,name:"validate",desp:"表单校验",belongTo:"closure",appJsCode:"app.validate=function () {\r\n            var setting = {\r\n                TYPE: {\r\n                    /*必需*/\r\n                    require: /^[^$]{1,}$/,\r\n                    /* 整数 */\r\n                    integer: /^-?\\d+$/,\r\n                    /* 浮点数 */\r\n                    float: /^(?:-?\\d+\\.)(?:\\d+)?$/,\r\n                    /* 全数字 */\r\n                    number: /^\\d+?$/,\r\n                    /* 全字母 */\r\n                    letter: /^[a-zA-Z]+$/,\r\n                    /* 全大写字母 */\r\n                    uppercaseLetter: /^[A-Z]+$/,\r\n                    /* 全小写字母 */\r\n                    lowercaseLetter: /^[a-z]+$/,\r\n                    /* 字母数字下划线，且由字母开头 */\r\n                    account: /^[a-zA-Z]+(?:[a-zA-Z0-9_]+)?$/,\r\n                    /*不能是全数字*/\r\n                    id: /^(?!\\d+$)[\\da-zA-Z]*$/,\r\n                    /* 邮箱格式 */\r\n                    email: /^(?:[\\w-]+(?:\\.[\\w-]+)*)@[\\w-]+(?:\\.[\\w-]+)+$/,\r\n                    /* 邮编格式 */\r\n                    zipCode: /^[1-9]\\d{5}$/,\r\n                    /* 手机格式 */\r\n                    mobile: /^(?:(?:\\(?:\\d{2,3}\\))|(?:\\d{3}\\-))?1\\d{10}$/,\r\n                    /* 端口格式 */\r\n                    port: /^(?:[0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/,\r\n                    /* 主机格式*/\r\n                    host: /^(?:(?:(?:2(?:5[0-5]|[0-4][0-9]))|(?:1[0-9]{2})|(?:[1-9][0-9])|[0-9])\\.){3}(?:(?:2(?:5[0-5]|[0-4][0-9]))|(?:1[0-9]{2})|(?:[1-9][0-9])|[0-9])$/\r\n                },\r\n                MESSAGE: {\r\n                    require: '请输入内容',\r\n                    integer: '请输入整型',\r\n                    float: '请输入浮点数',\r\n                    number: '请输入数字',\r\n                    letter: '请输入字母',\r\n                    uppercaseLetter: '请输入大写字母',\r\n                    lowercaseLetter: '请输入小写字母',\r\n                    account: '请输入正确的账号格式',\r\n                    email: '请输入正确的邮件格式',\r\n                    zipCode: '请输入正确的邮编',\r\n                    mobile: '请输入正确的手机格式',\r\n                    port: '请输入正确的端口格式',\r\n                    host: '请输入正确的主机格式',\r\n                    _default: '请输入正确格式'\r\n                },\r\n                SUCCESS_CALLBACK: function ($elem) {\r\n                },\r\n                ERROR_CALLBACK: function ($elem, msg) {\r\n                    app.alert(msg, app.alert.ERROR);\r\n                },\r\n                CLEAN_CALLBACK: function (focusEvent) {\r\n                }\r\n            };\r\n            var _type = setting.TYPE,\r\n                _message = setting.MESSAGE,\r\n                _success = setting.SUCCESS_CALLBACK,\r\n                _error = setting.ERROR_CALLBACK,\r\n                _clean = setting.CLEAN_CALLBACK;\r\n\r\n            var validate = function (data, success, error, clean, isContinue, isValidate) {\r\n                var list = [],\r\n                    result = true,\r\n                    singleResult,\r\n                    i, item,\r\n                    info, $elem, value, exp, msg;\r\n\r\n                success = $.isFunction(success) ? success : _success;\r\n                error = $.isFunction(error) ? error : _error;\r\n                clean = $.isFunction(clean) ? clean : _clean;\r\n\r\n                if ($.isFunction(data)) {\r\n                    data = data();\r\n                }\r\n\r\n                if ($.isArray(data)) {\r\n                    for (i = -1;\r\n                         (item = data[++i]);) {\r\n                        singleResult = true;\r\n                        info = item.validate || {};\r\n                        msg = info.errorMsg;\r\n\r\n                        //get Element\r\n                        if (info.id) {\r\n                            $elem = $(info.id, info.context);\r\n                            if (!$elem.length) {\r\n                                $elem = null;\r\n                            }\r\n                        } else {\r\n                            $elem = null;\r\n                        }\r\n\r\n                        //get value\r\n                        value = item.value !== undefined ? item.value : ($elem ? $elem.val() : '');\r\n\r\n                        if (isValidate) {\r\n                            //校验信息\r\n                            try {\r\n                                if (info.require === 'true' && (value === undefined || value === '')) {\r\n                                    singleResult = false;\r\n                                    msg = item.desp + '必填';\r\n                                } else if (value) { //require===true or default\r\n                                    if (info.maxLength) {\r\n                                        if ((info.hasChineseCharacter === 'true' && value.replace(/[^\\x00-\\xff]/g, '**').length > parseInt(info.maxLength, 10)) ||\r\n                                            (value.length > parseInt(info.maxLength, 10))) {\r\n                                            singleResult = false;\r\n                                            msg = item.desp + '的最大长度不能大于' + info.maxLength;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (singleResult && info.minLength) {\r\n                                        if ((info.hasChineseCharacter === 'true' && value.replace(/[^\\x00-\\xff]/g, '**').length < parseInt(info.minLength, 10)) ||\r\n                                            (value.length < parseInt(info.minLength, 10))) {\r\n                                            singleResult = false;\r\n                                            msg = item.desp + '的最小长度不能小于' + info.minLength;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (singleResult) {\r\n                                        /*\r\n											 *   version 4.3\r\n											 *   desp    自定义校验功能\r\n											 *   author  lijiancheng@agree.com.cn\r\n											 * */\r\n                                        if ($.isFunction(info.validateHandler)) {\r\n                                            singleResult = info.validateHandler(value);\r\n\r\n                                            if ($.isPlainObject(singleResult)) {\r\n                                                msg = singleResult.errorMsg;\r\n                                                value = singleResult.value;\r\n                                                singleResult = singleResult.result;\r\n                                            } else {\r\n                                                singleResult = true;\r\n                                            }\r\n\r\n                                        } else if (info.regex) {\r\n                                            exp = _type[info.regex] || new RegExp(info.regex.replace(/\\\\\\\\/g, '\\\\'));\r\n\r\n                                            singleResult = $.isFunction(exp) ? exp(value) : exp.test(value);\r\n\r\n                                            msg = msg ? msg : _message[info.regex];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (e) {\r\n                                msg = e.message;\r\n\r\n                                singleResult = false;\r\n                            }\r\n                        }\r\n\r\n                        if (singleResult) {\r\n                            list.push({\r\n                                name: item.name,\r\n                                value: value,\r\n                                queryString: item.queryString,\r\n                                urlExternal: item.urlExternal\r\n                            });\r\n\r\n                            $elem && success($elem);\r\n\r\n                        } else {\r\n                            list.push({\r\n                                name: item.name,\r\n                                value: value,\r\n                                queryString: item.queryString,\r\n                                urlExternal: item.urlExternal,\r\n                                errorMsg: msg\r\n                            });\r\n\r\n                            /*\r\n								 *   version 4.2.10.9\r\n								 *   desp 修复校验没有提示的问题\r\n								 *   author lijiancheng@agree.com.cn\r\n								 *\r\n								 * */\r\n                            if ($elem) {\r\n                                error($elem, msg);\r\n\r\n                                $elem.one('focus.validate', clean);\r\n                            } else {\r\n                                error($(), msg);\r\n                            }\r\n\r\n                            result = result && singleResult;\r\n\r\n                            if (!isContinue) break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    list = data;\r\n                }\r\n\r\n                return {\r\n                    data: list,\r\n                    result: result\r\n                }\r\n            };\r\n\r\n            $.extend(validate, setting);\r\n\r\n            return validate;\r\n        }()",
params:[{name:"data",desp:"校验的元素",type:"array",children:[{name:"name",type:"string",details:"必需，表示需要传输到后台的名称，在AWEB中，name由别名和名称组成（alias+name）",desp:"字段名称",defaultValue:""},{name:"value",type:"string",desp:"值",details:"非必需，表示需要传输到后台的值",defaultValue:""},{name:"validate",type:"object",desp:"校验的信息",details:"必需，表示需要校验的信息",children:[{name:" context",desp:"jQuery对象或者选择器",type:"jQuery",details:"表示输入元素DOM对象的上下文",defaultValue:""},{name:"id",desp:"输入元素的jQuery选择器",type:"string",details:"如果data[i].value为空，则从此处获取元素的值",defaultValue:""},{name:"regex",desp:"校验类型或正则表达式",type:"string",details:"如果为false、undefined、null，则表示无需校验。校验类型，可以通过app.validate.TYPE获取",defaultValue:""},{name:"errorMsg",details:"需要校验时必需，校验错误是记录或显示的提示语句",type:"string",desp:"校验类型或者正则",defaultValue:""}],defaultValue:""}],defaultValue:""},{name:"successCallback",type:"handler",desp:"校验正确后执行的函数",details:"函数，非必需，表示校验正确后执行的函数。$elem，jQuery对象，表示被校验的元素，由$(data.id,data.context)获取",defaultValue:""},{name:"errorCallback",type:"handler",desp:"校验失败后执行的函数",details:"数，非必需，表示校验错误后执行的函数。$elem，jQuery对象，表示被校验的元素，由$(data.id,data.context)获取，errorMsg，字符串，表示错误校验失败的提示语句",defaultValue:""},{name:"cleanCallback",type:"handler",desp:"清理错误提示回调函数",details:"函数，非必需，表示清理错误提示回调函数。其中函数中的this指向被校验的DOM元素",defaultValue:""},{name:"isContinue",type:"boolean",desp:"校验错误后是否继续校验data余下部分",details:"布尔值，非必需，表示校验错误后是否继续校验data余下部分",defaultValue:""},{name:"isValidate",type:"boolean",desp:"是否进行校验",details:"布尔值，非必需，如果等于false，则直接返回data部分的实际数据",defaultValue:true}],hasReturn:true,returnValue:{name:"validateResult",type:"object",desp:"校验结果对象",children:[{name:"result",type:"boolean",desp:"是否校验正确",details:"布尔值，表示是否校验正确，当data中的所有元素都校验成功时，就返回true，否则返回false",defaultValue:""},{name:"data",type:"array",desp:"校验元素的信息",details:"数组对象，记录校验元素的信息",children:[{name:"name",desp:"校验字段的名称",type:"string",details:"字符串，校验字段的名称，与data[i].name相同",defaultValue:""},{name:"value",details:"字符串，校验字段的值，与data[i].value||$(data.id,data.context).val()相同",type:"string",desp:"校验字段的值",defaultValue:""},{name:"errorMsg",details:"字符串，校验失败时，出现的错误提示",type:"string",desp:"错误提示",defaultValue:""}],defaultValue:""}],details:"",defaultValue:""},details:"",_belongTo:"数据操作",edition:{universal:"app.validate=function () {\r\n            var setting = {\r\n                TYPE: {\r\n                    /*必需*/\r\n                    require: /^[^$]{1,}$/,\r\n                    /* 整数 */\r\n                    integer: /^-?\\d+$/,\r\n                    /* 浮点数 */\r\n                    float: /^(?:-?\\d+\\.)(?:\\d+)?$/,\r\n                    /* 全数字 */\r\n                    number: /^\\d+?$/,\r\n                    /* 全字母 */\r\n                    letter: /^[a-zA-Z]+$/,\r\n                    /* 全大写字母 */\r\n                    uppercaseLetter: /^[A-Z]+$/,\r\n                    /* 全小写字母 */\r\n                    lowercaseLetter: /^[a-z]+$/,\r\n                    /* 字母数字下划线，且由字母开头 */\r\n                    account: /^[a-zA-Z]+(?:[a-zA-Z0-9_]+)?$/,\r\n                    /*不能是全数字*/\r\n                    id: /^(?!\\d+$)[\\da-zA-Z]*$/,\r\n                    /* 邮箱格式 */\r\n                    email: /^(?:[\\w-]+(?:\\.[\\w-]+)*)@[\\w-]+(?:\\.[\\w-]+)+$/,\r\n                    /* 邮编格式 */\r\n                    zipCode: /^[1-9]\\d{5}$/,\r\n                    /* 手机格式 */\r\n                    mobile: /^(?:(?:\\(?:\\d{2,3}\\))|(?:\\d{3}\\-))?1\\d{10}$/,\r\n                    /* 端口格式 */\r\n                    port: /^(?:[0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/,\r\n                    /* 主机格式*/\r\n                    host: /^(?:(?:(?:2(?:5[0-5]|[0-4][0-9]))|(?:1[0-9]{2})|(?:[1-9][0-9])|[0-9])\\.){3}(?:(?:2(?:5[0-5]|[0-4][0-9]))|(?:1[0-9]{2})|(?:[1-9][0-9])|[0-9])$/\r\n                },\r\n                MESSAGE: {\r\n                    require: '请输入内容',\r\n                    integer: '请输入整型',\r\n                    float: '请输入浮点数',\r\n                    number: '请输入数字',\r\n                    letter: '请输入字母',\r\n                    uppercaseLetter: '请输入大写字母',\r\n                    lowercaseLetter: '请输入小写字母',\r\n                    account: '请输入正确的账号格式',\r\n                    email: '请输入正确的邮件格式',\r\n                    zipCode: '请输入正确的邮编',\r\n                    mobile: '请输入正确的手机格式',\r\n                    port: '请输入正确的端口格式',\r\n                    host: '请输入正确的主机格式',\r\n                    _default: '请输入正确格式'\r\n                },\r\n                SUCCESS_CALLBACK: function ($elem) {\r\n                },\r\n                ERROR_CALLBACK: function ($elem, msg) {\r\n                    app.alert(msg, app.alert.ERROR);\r\n                },\r\n                CLEAN_CALLBACK: function (focusEvent) {\r\n                }\r\n            };\r\n            var _type = setting.TYPE,\r\n                _message = setting.MESSAGE,\r\n                _success = setting.SUCCESS_CALLBACK,\r\n                _error = setting.ERROR_CALLBACK,\r\n                _clean = setting.CLEAN_CALLBACK;\r\n\r\n            var validate = function (data, success, error, clean, isContinue, isValidate) {\r\n                var list = [],\r\n                    result = true,\r\n                    singleResult,\r\n                    i, item,\r\n                    info, $elem, value, exp, msg;\r\n\r\n                success = $.isFunction(success) ? success : _success;\r\n                error = $.isFunction(error) ? error : _error;\r\n                clean = $.isFunction(clean) ? clean : _clean;\r\n\r\n                if ($.isFunction(data)) {\r\n                    data = data();\r\n                }\r\n\r\n                if ($.isArray(data)) {\r\n                    for (i = -1;\r\n                         (item = data[++i]);) {\r\n                        singleResult = true;\r\n                        info = item.validate || {};\r\n                        msg = info.errorMsg;\r\n\r\n                        //get Element\r\n                        if (info.id) {\r\n                            $elem = $(info.id, info.context);\r\n                            if (!$elem.length) {\r\n                                $elem = null;\r\n                            }\r\n                        } else {\r\n                            $elem = null;\r\n                        }\r\n\r\n                        //get value\r\n                        value = item.value !== undefined ? item.value : ($elem ? $elem.val() : '');\r\n\r\n                        if (isValidate) {\r\n                            //校验信息\r\n                            try {\r\n                                if (info.require === 'true' && (value === undefined || value === '')) {\r\n                                    singleResult = false;\r\n                                    msg = item.desp + '必填';\r\n                                } else if (value) { //require===true or default\r\n                                    if (info.maxLength) {\r\n                                        if ((info.hasChineseCharacter === 'true' && value.replace(/[^\\x00-\\xff]/g, '**').length > parseInt(info.maxLength, 10)) ||\r\n                                            (value.length > parseInt(info.maxLength, 10))) {\r\n                                            singleResult = false;\r\n                                            msg = item.desp + '的最大长度不能大于' + info.maxLength;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (singleResult && info.minLength) {\r\n                                        if ((info.hasChineseCharacter === 'true' && value.replace(/[^\\x00-\\xff]/g, '**').length < parseInt(info.minLength, 10)) ||\r\n                                            (value.length < parseInt(info.minLength, 10))) {\r\n                                            singleResult = false;\r\n                                            msg = item.desp + '的最小长度不能小于' + info.minLength;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (singleResult) {\r\n                                        /*\r\n											 *   version 4.3\r\n											 *   desp    自定义校验功能\r\n											 *   author  lijiancheng@agree.com.cn\r\n											 * */\r\n                                        if ($.isFunction(info.validateHandler)) {\r\n                                            singleResult = info.validateHandler(value);\r\n\r\n                                            if ($.isPlainObject(singleResult)) {\r\n                                                msg = singleResult.errorMsg;\r\n                                                value = singleResult.value;\r\n                                                singleResult = singleResult.result;\r\n                                            } else {\r\n                                                singleResult = true;\r\n                                            }\r\n\r\n                                        } else if (info.regex) {\r\n                                            exp = _type[info.regex] || new RegExp(info.regex.replace(/\\\\\\\\/g, '\\\\'));\r\n\r\n                                            singleResult = $.isFunction(exp) ? exp(value) : exp.test(value);\r\n\r\n                                            msg = msg ? msg : _message[info.regex];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } catch (e) {\r\n                                msg = e.message;\r\n\r\n                                singleResult = false;\r\n                            }\r\n                        }\r\n\r\n                        if (singleResult) {\r\n                            list.push({\r\n                                name: item.name,\r\n                                value: value,\r\n                                queryString: item.queryString,\r\n                                urlExternal: item.urlExternal\r\n                            });\r\n\r\n                            $elem && success($elem);\r\n\r\n                        } else {\r\n                            list.push({\r\n                                name: item.name,\r\n                                value: value,\r\n                                queryString: item.queryString,\r\n                                urlExternal: item.urlExternal,\r\n                                errorMsg: msg\r\n                            });\r\n\r\n                            /*\r\n								 *   version 4.2.10.9\r\n								 *   desp 修复校验没有提示的问题\r\n								 *   author lijiancheng@agree.com.cn\r\n								 *\r\n								 * */\r\n                            if ($elem) {\r\n                                error($elem, msg);\r\n\r\n                                $elem.one('focus.validate', clean);\r\n                            } else {\r\n                                error($(), msg);\r\n                            }\r\n\r\n                            result = result && singleResult;\r\n\r\n                            if (!isContinue) break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    list = data;\r\n                }\r\n\r\n                return {\r\n                    data: list,\r\n                    result: result\r\n                }\r\n            };\r\n\r\n            $.extend(validate, setting);\r\n\r\n            return validate;\r\n        }()"}},{name:"title",desp:"获取或设置网页标题",appJsCode:"app.title=function (title) {\r\n            var doc = window.top && window.top.document || document;\r\n\r\n            if (typeof title === 'string') {\r\n                doc.title = title;\r\n            }\r\n\r\n            return doc.title;\r\n        }",require:true,params:[{name:"title",type:"string",desp:"标题",details:"设置网页需要显示的标题",defaultValue:"AWEB 5.0"}],hasReturn:true,returnValue:{name:"title",type:"string",desp:"标题",details:"返回当前网页显示的标题",defaultValue:"AWEB 5.0"},details:"",belongTo:"function",_belongTo:"数据操作",edition:{universal:"app.title=function (title) {\r\n            var doc = window.top && window.top.document || document;\r\n\r\n            if (typeof title === 'string') {\r\n                doc.title = title;\r\n            }\r\n\r\n            return doc.title;\r\n        }"}},{name:"getQueryStringMap",desp:"获取页面内查询字符串映射表",appJsCode:"app.getQueryStringMap=function () {\r\n\r\n            var hash = window.location.hash||document.location.hash,\r\n                search = window.location.search || document.location.search || '',\r\n                decoder = window.decodeURI || window.decodeURIComponent,\r\n                matcher,\r\n                i, length, params,\r\n                result = {};\r\n\r\n            if(hash && !search){\r\n\r\n                search ='?'+ hash.split('?')[1];\r\n\r\n            }\r\n            matcher = search.match(/[\\?\\&][^\\?\\&]+=[^\\?\\&]+/g);\r\n            if (matcher) {\r\n                for (i = 0, length = matcher.length; i < length; i++) {\r\n                    params = (matcher[i] || '').substring(1).split('=');\r\n                    result[params[0]] = decoder(params[1]);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }",hasReturn:true,require:true,returnValue:{name:"queryStringMap",type:"object",desp:"页面内查询字符串列表",details:"以http://localhost:8080/index.html?timeStamp=12465为例",children:[{name:"timeStamp",type:"string",desp:"键值对",defaultValue:12465,details:""}],defaultValue:""},details:"",belongTo:"function",_belongTo:"数据操作",edition:{universal:"app.getQueryStringMap=function () {\r\n\r\n            var hash = window.location.hash||document.location.hash,\r\n                search = window.location.search || document.location.search || '',\r\n                decoder = window.decodeURI || window.decodeURIComponent,\r\n                matcher,\r\n                i, length, params,\r\n                result = {};\r\n\r\n            if(hash && !search){\r\n\r\n                search ='?'+ hash.split('?')[1];\r\n\r\n            }\r\n            matcher = search.match(/[\\?\\&][^\\?\\&]+=[^\\?\\&]+/g);\r\n            if (matcher) {\r\n                for (i = 0, length = matcher.length; i < length; i++) {\r\n                    params = (matcher[i] || '').substring(1).split('=');\r\n                    result[params[0]] = decoder(params[1]);\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }"}},{name:"getNewQueryStringURL",desp:"获取更新后的页面内查询字符串",appJsCode:"app.getNewQueryStringURL=function (params) {\r\n            var map = $.extend(this.getQueryStringMap(), params),\r\n                encoder = window.encodeURI || window.encodeURIComponent,\r\n                prop,\r\n                ret = [];\r\n\r\n            for (prop in map) {\r\n                if (map.hasOwnProperty(prop)) {\r\n                    ret.push(prop + '=' + encoder(map[prop]));\r\n                }\r\n            }\r\n\r\n            return ret.join('&');\r\n        }",hasReturn:true,require:true,params:[{name:"newParams",type:"object",desp:"新加入的参数",details:"fullscreen=true为例",children:[{name:"fullscreen",type:"string",desp:"键值对",defaultValue:true}],defaultValue:""}],returnValue:{name:"newQueryString",type:"string",desp:"页面内查询字符串列表",details:"以http://localhost:8080/index.html?timeStamp=12465为例",defaultValue:"timeStamp=12346&fullscreen=true"},details:"",belongTo:"function",_belongTo:"数据操作",edition:{universal:"app.getNewQueryStringURL=function (params) {\r\n            var map = $.extend(this.getQueryStringMap(), params),\r\n                encoder = window.encodeURI || window.encodeURIComponent,\r\n                prop,\r\n                ret = [];\r\n\r\n            for (prop in map) {\r\n                if (map.hasOwnProperty(prop)) {\r\n                    ret.push(prop + '=' + encoder(map[prop]));\r\n                }\r\n            }\r\n\r\n            return ret.join('&');\r\n        }"}}]},{desp:"标签页",children:[{require:true,name:"page",desp:"标签页操作",appJsCode:"app.page=function () {\r\n            var actions = {\r\n                refresh: function () {\r\n                    var _router,\r\n                        _handler;\r\n\r\n                    if (_router = app.router) {\r\n                        if (_router.getCurrentHandler && (_handler = _router.getCurrentHandler())) {\r\n                            _handler.stepTo(0);\r\n                        }\r\n                    }\r\n                },\r\n                close: function () {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.close) {\r\n                        _tab.close();\r\n                    }\r\n                },\r\n                closeAll: function (tips) {\r\n                    var _router,\r\n                        _tab,\r\n                        _stack,\r\n                        i, domID;\r\n\r\n\r\n                    tips && app.shelter.show(tips);\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && (_stack = _tab.stack) && _stack.length) {\r\n\r\n                        try {\r\n                            for (i = -1; domID = _stack[++i];) {\r\n                                try {\r\n                                    _tab.close(domID, true);\r\n                                } catch (e) {\r\n                                    console.error(e);\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        } finally {\r\n                            _tab.stack = [];\r\n                            _router.cache = {};\r\n                        }\r\n\r\n                    }\r\n\r\n                    tips && app.shelter.hide();\r\n                },\r\n                updateCurrentInterval: function (uniqueId, option) {\r\n                    var _router,\r\n                        _handler;\r\n\r\n                    if (_router = app.router) {\r\n                        if (_router.getCurrentHandler && (_handler = _router.getCurrentHandler())) {\r\n                            _handler.updateInterval(uniqueId, option);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                fullscreen: function (fullscreen) {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.fullscreen) {\r\n                        _tab.fullscreen(fullscreen);\r\n                    }\r\n                },\r\n                isFullScreen: function () {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.isFullScreen) {\r\n                        return _tab.isFullScreen();\r\n                    }\r\n                },\r\n                displayNav: function (show) {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.displayNav) {\r\n                        _tab.displayNav(show);\r\n                    }\r\n                },\r\n                isDisplayNav: function () {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.isDisplayNav) {\r\n                        return _tab.isDisplayNav();\r\n                    }\r\n                }\r\n            };\r\n\r\n            return actions;\r\n        }()",belongTo:"class",cInterfaces:[{name:"refresh",desp:"刷新当前标签页",hasReturn:false,details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"close",desp:"关闭当前标签页",hasReturn:false,details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"closeAll",desp:"关闭所有页面",hasReturn:false,params:[{name:"tips",type:"string",details:"关闭窗口时的提示，如果为空，则不显示遮罩",desp:"关闭窗口遮罩提示",overviewType:"default",defaultValue:""}],details:"",returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"updateCurrentInterval",desp:"更新当前页面轮询配置",params:[{type:"string",desp:"轮询操作唯一标识",name:"uniqueId",defaultValue:"auiCtx.intervals.轮询ID",overviewType:"default"},{type:"object",desp:"轮询参数",name:"option",children:[{type:"number",desp:"时钟（ms）",details:"超时时间或轮询时间",name:"clock",defaultValue:1e3,overviewType:"default"},{type:"boolean",desp:"立即执行",details:"页面初始化时是否直接执行代码不用等待时钟超时",name:"immediate",defaultValue:false,overviewType:"default"},{type:"boolean",desp:"切出暂停",details:"切出页面时暂停轮询",name:"isPause",defaultValue:true,overviewType:"default"},{type:"number",desp:"执行次数",details:"轮询执行次数，当为0时表示页面生命周期内不断执行",placeholder:"当为0时表示页面生命周期内不断执行",name:"times",defaultValue:0,overviewType:"default"}],overviewType:"default",defaultValue:""}],details:"",hasReturn:true,returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"fullscreen",desp:"全屏",params:[{type:"boolean",desp:"是否全屏",name:"fullscreen",defaultValue:true,overviewType:"default"}],details:"",hasReturn:true,returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"isFullScreen",desp:"是否全屏中",hasReturn:true,returnValue:{name:"screenIsFull",type:"boolean",desp:"是否全屏中",defaultValue:true},details:""},{name:"displayNav",desp:"显示或隐藏导航",params:[{type:"boolean",desp:"是否显示导航",name:"show",defaultValue:true,overviewType:"default"}],details:"",hasReturn:true,returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"isDisplayNav",desp:"是否显示导航栏中",hasReturn:true,returnValue:{name:"NavIsDisplay",type:"boolean",desp:"是否显示导航栏中",defaultValue:true},details:""}],details:"",hasReturn:false,returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"标签页",edition:{universal:"app.page=function () {\r\n            var actions = {\r\n                refresh: function () {\r\n                    var _router,\r\n                        _handler;\r\n\r\n                    if (_router = app.router) {\r\n                        if (_router.getCurrentHandler && (_handler = _router.getCurrentHandler())) {\r\n                            _handler.stepTo(0);\r\n                        }\r\n                    }\r\n                },\r\n                close: function () {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.close) {\r\n                        _tab.close();\r\n                    }\r\n                },\r\n                closeAll: function (tips) {\r\n                    var _router,\r\n                        _tab,\r\n                        _stack,\r\n                        i, domID;\r\n\r\n\r\n                    tips && app.shelter.show(tips);\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && (_stack = _tab.stack) && _stack.length) {\r\n\r\n                        try {\r\n                            for (i = -1; domID = _stack[++i];) {\r\n                                try {\r\n                                    _tab.close(domID, true);\r\n                                } catch (e) {\r\n                                    console.error(e);\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        } finally {\r\n                            _tab.stack = [];\r\n                            _router.cache = {};\r\n                        }\r\n\r\n                    }\r\n\r\n                    tips && app.shelter.hide();\r\n                },\r\n                updateCurrentInterval: function (uniqueId, option) {\r\n                    var _router,\r\n                        _handler;\r\n\r\n                    if (_router = app.router) {\r\n                        if (_router.getCurrentHandler && (_handler = _router.getCurrentHandler())) {\r\n                            _handler.updateInterval(uniqueId, option);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                fullscreen: function (fullscreen) {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.fullscreen) {\r\n                        _tab.fullscreen(fullscreen);\r\n                    }\r\n                },\r\n                isFullScreen: function () {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.isFullScreen) {\r\n                        return _tab.isFullScreen();\r\n                    }\r\n                },\r\n                displayNav: function (show) {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.displayNav) {\r\n                        _tab.displayNav(show);\r\n                    }\r\n                },\r\n                isDisplayNav: function () {\r\n                    var _router,\r\n                        _tab;\r\n\r\n                    if ((_router = app.router) && (_tab = _router.tab) && _tab.isDisplayNav) {\r\n                        return _tab.isDisplayNav();\r\n                    }\r\n                }\r\n            };\r\n\r\n            return actions;\r\n        }()"}}]},{desp:"伪异步、多线程",children:[{require:true,name:"performance",desp:"伪异步、多线程操作",appJsCode:"app.performance=function () {\r\n            var Performance = function () {\r\n                },\r\n                vendors = ['webkit', 'moz'],\r\n                requestAnimationFrame = window.requestAnimationFrame,\r\n                cancelAnimationFrame = cancelAnimationFrame,\r\n                setTimeout = window.setTimeout,\r\n                clearTimeout = window.clearTimeout;\r\n\r\n            for (var x = 0; x < vendors.length && !requestAnimationFrame; ++x) {\r\n                requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\r\n                cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\r\n            }\r\n\r\n            if (!requestAnimationFrame) {\r\n                requestAnimationFrame = setTimeout;\r\n            }\r\n            if (!cancelAnimationFrame) {\r\n                cancelAnimationFrame = clearTimeout;\r\n            }\r\n\r\n            Performance.prototype = {\r\n                constructor: Performance,\r\n\r\n                id: 'performanceDelayId',\r\n\r\n                timeout: 220,\r\n                frequency: 16.7,\r\n\r\n                longDelay: function (callback) {\r\n                    var id;\r\n\r\n                    if ($.isFunction(callback)) {\r\n                        if (id = callback[this.id]) {\r\n                            clearTimeout(id);\r\n                            cancelAnimationFrame(id);\r\n                        }\r\n\r\n                        callback[this.id] = setTimeout(callback, this.timeout);\r\n                    }\r\n\r\n\r\n                },\r\n                shortDelay: function (callback) {\r\n                    var id;\r\n\r\n                    if ($.isFunction(callback)) {\r\n                        if (id = callback[this.id]) {\r\n                            clearTimeout(id);\r\n                            cancelAnimationFrame(id);\r\n                        }\r\n\r\n                        callback[this.id] = requestAnimationFrame(callback, this.frequency);\r\n                    }\r\n                },\r\n                setTimeout: function (timeout) {\r\n                    this.timeout = timeout;\r\n                },\r\n                getTimeout: function () {\r\n                    return this.timeout;\r\n                },\r\n                setFrequency: function (frequency) {\r\n                    this.frequency = frequency;\r\n                },\r\n                getFrequency: function () {\r\n                    return this.frequency;\r\n                }\r\n            };\r\n\r\n            return new Performance();\r\n        }()",belongTo:"class",cInterfaces:[{name:"longDelay",desp:"长延时操作",details:"用于长延时操作，用于数据处理量大或即时渲染要求低的处理的延时调用",hasReturn:false,params:[{type:"handler",desp:"操作内容",name:"callback",defaultValue:"function(){}",overviewType:"default"}],returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{name:"shortDelay",desp:"短延时操作",details:"用于短延时操作，用于数据处理量小或即时渲染要求低的处理的延时调用",hasReturn:false,params:[{type:"handler",desp:"操作内容",name:"callback",defaultValue:"function(){}",overviewType:"default"}],returnValue:{name:"",desp:"",type:"string",defaultValue:""}},{require:true,name:"sleep",desp:"浏览器休眠",details:"用于模拟浏览器休眠，用于暂停一段时间后执行代码",hasReturn:false,params:[{type:"number",desp:"休眠时间",name:"timeout",overviewType:"default",defaultValue:""}],returnValue:{name:"",desp:"",type:"string",defaultValue:""}}],details:"",hasReturn:false,returnValue:{name:"",desp:"",details:"",type:"string",defaultValue:""},_belongTo:"伪异步、多线程",edition:{universal:"app.performance=function () {\r\n            var Performance = function () {\r\n                },\r\n                vendors = ['webkit', 'moz'],\r\n                requestAnimationFrame = window.requestAnimationFrame,\r\n                cancelAnimationFrame = cancelAnimationFrame,\r\n                setTimeout = window.setTimeout,\r\n                clearTimeout = window.clearTimeout;\r\n\r\n            for (var x = 0; x < vendors.length && !requestAnimationFrame; ++x) {\r\n                requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\r\n                cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\r\n            }\r\n\r\n            if (!requestAnimationFrame) {\r\n                requestAnimationFrame = setTimeout;\r\n            }\r\n            if (!cancelAnimationFrame) {\r\n                cancelAnimationFrame = clearTimeout;\r\n            }\r\n\r\n            Performance.prototype = {\r\n                constructor: Performance,\r\n\r\n                id: 'performanceDelayId',\r\n\r\n                timeout: 220,\r\n                frequency: 16.7,\r\n\r\n                longDelay: function (callback) {\r\n                    var id;\r\n\r\n                    if ($.isFunction(callback)) {\r\n                        if (id = callback[this.id]) {\r\n                            clearTimeout(id);\r\n                            cancelAnimationFrame(id);\r\n                        }\r\n\r\n                        callback[this.id] = setTimeout(callback, this.timeout);\r\n                    }\r\n\r\n\r\n                },\r\n                shortDelay: function (callback) {\r\n                    var id;\r\n\r\n                    if ($.isFunction(callback)) {\r\n                        if (id = callback[this.id]) {\r\n                            clearTimeout(id);\r\n                            cancelAnimationFrame(id);\r\n                        }\r\n\r\n                        callback[this.id] = requestAnimationFrame(callback, this.frequency);\r\n                    }\r\n                },\r\n                setTimeout: function (timeout) {\r\n                    this.timeout = timeout;\r\n                },\r\n                getTimeout: function () {\r\n                    return this.timeout;\r\n                },\r\n                setFrequency: function (frequency) {\r\n                    this.frequency = frequency;\r\n                },\r\n                getFrequency: function () {\r\n                    return this.frequency;\r\n                }\r\n            };\r\n\r\n            return new Performance();\r\n        }()"
}}]}],appInterfacesConst:[{category:"提示语句",valueArray:["app.alert.ERROR","app.alert.SUCCESS","app.alert.WARNING","app.alert.MESSAGE","app.alert._DEFAULT"],despArray:["提示错误类型","提示成功类型","提示警告类型","日志信息类型","默认类型"]},{category:"行为接口比较条件",valueArray:["app.behavior.LESS_THAN","app.behavior.EQUAL","app.behavior.GREAT_THAN","app.behavior.NOT","app.behavior.INCLUDES","app.behavior.NOT_INCLUDES","app.behavior.STARTS_WITH"],despArray:["小于","等于","大于","不等于","包含","不包含","以…开头"]},{category:"路由",valueArray:["app.router.getCurrentHandler()"],despArray:["获取当前标签页实例"]}],resetVersion:"universal"}});